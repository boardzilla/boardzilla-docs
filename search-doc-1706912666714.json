{"searchDocs":[{"title":"@boardzilla/core","type":0,"sectionRef":"#","url":"/api","content":"@boardzilla/core 👋 This is Boardzilla, a framework to make writing a digital board game easy. Boardzilla takes care of player managementstructuring game rulespersisting game &amp; player stateanimations and much more! Visit us at https://boardzilla.io. See documentation at https://docs.boardzilla.io.","keywords":"","version":"Next"},{"title":"Class: Player<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Player","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#id","content":" • id: string  A player's unique user id  Defined in​  boardzilla-core/src/player/player.ts:20    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#name","content":" • name: string  A player's chosen name  Defined in​  boardzilla-core/src/player/player.ts:25    ","version":"Next","tagName":"h3"},{"title":"color​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#color","content":" • color: string  String hex code of the player's chosen color  Defined in​  boardzilla-core/src/player/player.ts:30    ","version":"Next","tagName":"h3"},{"title":"avatar​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#avatar","content":" • avatar: string  String URL of the avatar image for this player  Defined in​  boardzilla-core/src/player/player.ts:35    ","version":"Next","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#host","content":" • host: boolean  Whether this player is the gane's host  Defined in​  boardzilla-core/src/player/player.ts:40    ","version":"Next","tagName":"h3"},{"title":"position​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#position","content":" • position: number  A player's seating position at the table. This is distinct from turn order, which is the order of game.players. Turn order can be altered during a game, whereas position cannot.  Defined in​  boardzilla-core/src/player/player.ts:47  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#methods","content":" ","version":"Next","tagName":"h2"},{"title":"setCurrent​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#setcurrent","content":" ▸ setCurrent(this): void  Set this player as the current player  Parameters​  Name\tTypethis\tP  Returns​  void  Defined in​  boardzilla-core/src/player/player.ts:60    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#others","content":" ▸ others(this): P[]  Returns an array of all other players.  Parameters​  Name\tTypethis\tP  Returns​  P[]  Defined in​  boardzilla-core/src/player/player.ts:67    ","version":"Next","tagName":"h3"},{"title":"other​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#other","content":" ▸ other(this): P  Returns the other player. Only allowed in 2 player games  Parameters​  Name\tTypethis\tP  Returns​  P  Defined in​  boardzilla-core/src/player/player.ts:74    ","version":"Next","tagName":"h3"},{"title":"allMy​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#allmy","content":" ▸ allMy&lt;F&gt;(this, className, ...finders): ElementCollection&lt;F&gt;  Finds all elements of a given type that are owned by this player. This is equivalent to calling board.all(...) with {owner: this} as one of the search terms. Also see GameElement#owner.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypethis\tP className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/player/player.ts:84    ","version":"Next","tagName":"h3"},{"title":"my​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#my","content":" ▸ my&lt;F&gt;(this, className, ...finders): undefined | F  Finds the first element of a given type that is owned by this player. This is equivalent to calling board.first(...) with {owner: this} as one of the search terms. Also see GameElement#owner.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypethis\tP className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/player/player.ts:100    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: Player<P, B>","url":"/api/classes/Player#has","content":" ▸ has&lt;F&gt;(this, className, ...finders): boolean  Returns true if any element of a given type is owned by this player. This is equivalent to calling board.has(...) with {owner: this} as one of the search terms. Also see GameElement#owner.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypethis\tP className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Defined in​  boardzilla-core/src/player/player.ts:116 ","version":"Next","tagName":"h3"},{"title":"Class: Game<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Game","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Actions​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#actions","content":" ","version":"Next","tagName":"h2"},{"title":"action​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#action","content":" ▸ action&lt;A&gt;(definition?): Action&lt;P, A&gt;  Create an Action. An action is a single move that a player can take. Some actions require choices, sometimes several, before they can be executed. Some don't have any choices, like if a player can simply 'pass'. What defines where one action ends and another begins is how much you as a player can decide before you &quot;commit&quot;. For example, in chess you select a piece to move and then a place to put it. These are a single move, not separate. (Unless playing touch-move, which is rarely done in digital chess.) In hearts, you pass 3 cards to another players. These are a single move, not 3. You can change your mind as you select the cards, rather than have to commit to each one. Similarly, other players do not see any information about your choices until you actually commit the entire move.  This function is called for each action in the game actions you define indefineActions. These actions are initially declared with an optional prompt and condition. Further information is added to the action by chaining methods that add choices and behaviour. See Action.  If this action accepts prior arguments besides the ones chosen by the player during the execution of this action (especially common for followUp actions) then a generic can be added for these arguments to help Typescript type these parameters, e.g.:player =&gt; action&lt;{ cards: number}&gt;(...)  Type parameters​  Name\tTypeA\textends Record&lt;string, Argument&lt;P&gt;&gt; = {}  Parameters​  Name\tType\tDescriptiondefinition\tObject\t- definition.prompt?\tstring\tThe prompt that will appear for the player to explain what the action does. Further prompts can be defined for each choice they subsequently make to complete the action. definition.description?\tstring\t- definition.condition?\tboolean | (args: A) =&gt; boolean\tA boolean or a function returning a boolean that determines whether the action is currently allowed. Note that the choices you define for your action will further determine if the action is allowed. E.g. if you have a play card action and you add a choice for cards in your hand, Boardzilla will automatically disallow this action if there are no cards in your hand based on the face that there are no valid choices to complete the action. You do not need to specify a condition for these types of limitations. If using the function form, the function will receive an object with any arguments passed to this action, e.g. from followUp.  Returns​  Action&lt;P, A&gt;  Example  action({ prompt: 'Flip one of your cards' }).chooseOnBoard({ choices: board.find(Card, {mine: true}) }).do( card =&gt; card.hideFromAll() )   Defined in​  boardzilla-core/src/game.ts:350  ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#other","content":" ","version":"Next","tagName":"h2"},{"title":"players​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#players","content":" • players: PlayerCollection&lt;P&gt;  The players in this game. See Player  Defined in​  boardzilla-core/src/game.ts:75    ","version":"Next","tagName":"h3"},{"title":"board​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#board","content":" • board: B  The board for this game. See Board  Defined in​  boardzilla-core/src/game.ts:79    ","version":"Next","tagName":"h3"},{"title":"godMode​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#godmode","content":" • godMode: boolean = false  If true, allows any piece to be moved or modified in any way. Used only during development.  Defined in​  boardzilla-core/src/game.ts:92    ","version":"Next","tagName":"h3"},{"title":"flowCommands​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#flowcommands","content":" • flowCommands: Object  The flow commands available for this game. See:  playerActionsloopwhileLoopforEachforLoopeachPlayereveryPlayerifElseswitchCase  Type declaration​  Name\tTypeplayerActions\t(options: { name?: string ; players?: P[] | (args: Record&lt;string, any&gt;) =&gt; P[] ; player?: P | (args: Record&lt;string, any&gt;) =&gt; P ; actions: (string | { name: string ; prompt?: string | (args: Record&lt;string, any&gt;) =&gt; string ; args?: Record&lt;string, Argument&lt;P&gt;&gt; | (args: Record&lt;string, any&gt;) =&gt; Record&lt;string, Argument&lt;P&gt;&gt; ; do?: FlowDefinition&lt;P&gt; })[] ; prompt?: string | (args: Record&lt;string, any&gt;) =&gt; string ; description?: string ; optional?: string | (args: Record&lt;string, any&gt;) =&gt; string ; skipIf?: &quot;always&quot; | &quot;never&quot; | &quot;only-one&quot; }) =&gt; default&lt;P&gt; loop\t(...block: FlowStep&lt;P&gt;[]) =&gt; default&lt;P&gt; whileLoop\t(options: { while: (a: FlowArguments) =&gt; boolean ; do: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P&gt; forEach\t&lt;T&gt;(options: { name: string ; collection: (a: FlowArguments) =&gt; T[] | T[] ; do: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P, T&gt; forLoop\t&lt;T&gt;(options: { name: string ; initial: T | (a: FlowArguments) =&gt; T ; next: (a: T) =&gt; T ; while: (a: T) =&gt; boolean ; do: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P, T&gt; eachPlayer\t(options: { name: string ; startingPlayer?: P | (a: FlowArguments) =&gt; P ; nextPlayer?: (p: P) =&gt; P ; turns?: number ; continueUntil?: (p: P) =&gt; boolean ; do: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P&gt; everyPlayer\t(options: { players?: P[] ; do: FlowDefinition&lt;P&gt; ; name?: string }) =&gt; default&lt;P&gt; ifElse\t(options: { name?: string ; if: (r: Record&lt;any, any&gt;) =&gt; boolean ; do: FlowDefinition&lt;P&gt; ; else?: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P&gt; switchCase\t&lt;T&gt;(options: { name?: string ; switch: T | (a: FlowArguments) =&gt; T ; cases: SwitchCaseCases&lt;P, T&gt; ; default?: FlowDefinition&lt;P&gt; }) =&gt; default&lt;P, T&gt;  Defined in​  boardzilla-core/src/game.ts:114    ","version":"Next","tagName":"h3"},{"title":"defineFlow​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#defineflow","content":" ▸ defineFlow(...flow): void  Define your game's flow. May contain any of the following:  playerActionsloopwhileLoopforEachforLoopeachPlayereveryPlayerifElseswitchCase  Parameters​  Name\tType...flow\tFlowStep&lt;P&gt;[]  Returns​  void  Defined in​  boardzilla-core/src/game.ts:149    ","version":"Next","tagName":"h3"},{"title":"defineActions​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#defineactions","content":" ▸ defineActions(actions): void  Define your game's actions.  Parameters​  Name\tType\tDescriptionactions\tRecord&lt;string, (player: P) =&gt; Action&lt;P, Record&lt;string, Argument&lt;P&gt;&gt;&gt;&gt;\tAn object consisting of actions where the key is the name of the action and value is a function that accepts a player taking the action and returns the result of calling action and chaining choices, results and messages onto the result  Returns​  void  Defined in​  boardzilla-core/src/game.ts:162    ","version":"Next","tagName":"h3"},{"title":"setting​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#setting","content":" ▸ setting(key): any  Retrieve the selected setting value for a setting defined in render.  Parameters​  Name\tTypekey\tstring  Returns​  any  Defined in​  boardzilla-core/src/game.ts:175    ","version":"Next","tagName":"h3"},{"title":"finish​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#finish","content":" ▸ finish(winner?): void  End the game  Parameters​  Name\tType\tDescriptionwinner?\tP | P[]\ta player or players that are the winners of the game. In a solo game if no winner is provided, this is considered a loss.  Returns​  void  Defined in​  boardzilla-core/src/game.ts:204    ","version":"Next","tagName":"h3"},{"title":"addDelay​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#adddelay","content":" ▸ addDelay(): void  Add a delay in the animation of the state change at this point for player as they receive game updates.  Returns​  void  Defined in​  boardzilla-core/src/game.ts:284    ","version":"Next","tagName":"h3"},{"title":"followUp​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#followup","content":" ▸ followUp(action): void  Queue up a follow-up action while processing an action. If called during the processing of a game action, the follow-up action given will be added as a new action immediately following the current one, before the game's flow can resume normally. This is common for card games where the play of a certain card may require more actions be taken.  Parameters​  Name\tType\tDescriptionaction\tActionStub&lt;P&gt;\tThe action added to the follow-up queue.  Returns​  void  Example  defineAction({ ... playCard: player =&gt; action() .chooseOnBoard('card', cards) .do( ({ card }) =&gt; { if (card.damage) { // this card allows another action to do damage to another Card game.followUp({ name: 'doDamage', args: { amount: card.damage } }); } } )   Defined in​  boardzilla-core/src/game.ts:403    ","version":"Next","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"Class: Game<P, B>","url":"/api/classes/Game#message","content":" ▸ message(message, args?): void  Add a message that will be broadcast in the chat at the next game update, based on the current state of the game.  Parameters​  Name\tType\tDescriptionmessage\tstring\tThe message to send. This can contain interpolated strings with double braces, i.e. {{player}} that are defined in args. Of course, strings can be interpolated normally using template literals. However game objects (e.g. players or pieces) passed in as args will be displayed specially by Boardzilla. args?\tRecord&lt;string, Argument&lt;P&gt;&gt;\tAN object of key-value pairs of strings for interpolation in the message.  Returns​  void  Example  game.message( '{{player}} has a score of {{score}}', { player, score: player.score() } );   Defined in​  boardzilla-core/src/game.ts:577 ","version":"Next","tagName":"h3"},{"title":"Class: PlayerCollection<P>","type":0,"sectionRef":"#","url":"/api/classes/PlayerCollection","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#type-parameters","content":" Name\tTypeP\textends Player  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#hierarchy","content":" Array&lt;P&gt; ↳ PlayerCollection  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#properties","content":" ","version":"Next","tagName":"h2"},{"title":"currentPosition​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#currentposition","content":" • currentPosition: number[]  An array of table positions that may currently act.  Defined in​  boardzilla-core/src/player/collection.ts:21    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#game","content":" • game: Game&lt;P, Board&lt;P, any&gt;&gt;  A reference to the Game class  Defined in​  boardzilla-core/src/player/collection.ts:26  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#methods","content":" ","version":"Next","tagName":"h2"},{"title":"atPosition​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#atposition","content":" ▸ atPosition(position): undefined | P  Returns the player at a given table position.  Parameters​  Name\tTypeposition\tnumber  Returns​  undefined | P  Defined in​  boardzilla-core/src/player/collection.ts:41    ","version":"Next","tagName":"h3"},{"title":"current​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#current","content":" ▸ current(): undefined | P  Returns the player that may currently act. It is an error to call current when multiple players can act  Returns​  undefined | P  Defined in​  boardzilla-core/src/player/collection.ts:49    ","version":"Next","tagName":"h3"},{"title":"allCurrent​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#allcurrent","content":" ▸ allCurrent(): P[]  Returns the array of all players that may currently act.  Returns​  P[]  Defined in​  boardzilla-core/src/player/collection.ts:57    ","version":"Next","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#host","content":" ▸ host(): P  Returns the host player  Returns​  P  Defined in​  boardzilla-core/src/player/collection.ts:64    ","version":"Next","tagName":"h3"},{"title":"notCurrent​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#notcurrent","content":" ▸ notCurrent(): P[]  Returns the array of players that may not currently act.  Returns​  P[]  Defined in​  boardzilla-core/src/player/collection.ts:71    ","version":"Next","tagName":"h3"},{"title":"inPositionOrder​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#inpositionorder","content":" ▸ inPositionOrder(): PlayerCollection&lt;P&gt;  Returns the array of players in the order of table positions. Does not alter the actual player order.  Returns​  PlayerCollection&lt;P&gt;  Defined in​  boardzilla-core/src/player/collection.ts:79    ","version":"Next","tagName":"h3"},{"title":"setCurrent​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#setcurrent","content":" ▸ setCurrent(players): void  Set the current player(s).  Parameters​  Name\tType\tDescriptionplayers\tnumber | number[] | P | P[]\tThe Player or table position of the player to act, or an array of either.  Returns​  void  Defined in​  boardzilla-core/src/player/collection.ts:89    ","version":"Next","tagName":"h3"},{"title":"next​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#next","content":" ▸ next(): P  Advance the current player to act to the next player based on player order.  Returns​  P  Defined in​  boardzilla-core/src/player/collection.ts:98    ","version":"Next","tagName":"h3"},{"title":"after​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#after","content":" ▸ after(player): P  Return the next player to act based on player order.  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  P  Defined in​  boardzilla-core/src/player/collection.ts:110    ","version":"Next","tagName":"h3"},{"title":"seatedNext​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#seatednext","content":" ▸ seatedNext(player, steps?): P  Return the player next to this player at the table.  Parameters​  Name\tType\tDefault value\tDescriptionplayer\tP\tundefined\t- steps\tnumber\t1\t1 = one step to the left, -1 = one step to the right, etc  Returns​  P  Defined in​  boardzilla-core/src/player/collection.ts:118    ","version":"Next","tagName":"h3"},{"title":"turnOrderOf​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#turnorderof","content":" ▸ turnOrderOf(player): number  Returns the turn order of the given player, starting with 0. This is distinct from Player#position. Turn order can be altered during a game, whereas table position cannot.  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  number  Defined in​  boardzilla-core/src/player/collection.ts:127    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#sortby","content":" ▸ sortBy(key, direction?): PlayerCollection&lt;P&gt;  Sorts the players by some means, changing the turn order.  Parameters​  Name\tType\tDescriptionkey\tSorter&lt;P&gt; | Sorter&lt;P&gt;[]\tA key of function for sorting, or a list of such. See Sorter direction?\t&quot;desc&quot; | &quot;asc&quot;\t&quot;asc&quot; to cause players to be sorted from lowest to highest, &quot;desc&quot; for highest to lower  Returns​  PlayerCollection&lt;P&gt;  Defined in​  boardzilla-core/src/player/collection.ts:141    ","version":"Next","tagName":"h3"},{"title":"sortedBy​","type":1,"pageTitle":"Class: PlayerCollection<P>","url":"/api/classes/PlayerCollection#sortedby","content":" ▸ sortedBy(key, direction?): PlayerCollection&lt;P&gt;  Returns a copy of this collection sorted by some Sorter.  Parameters​  Name\tType\tDefault valuekey\tSorter&lt;P&gt; | Sorter&lt;P&gt;[]\tundefined direction\t&quot;desc&quot; | &quot;asc&quot;\t&quot;asc&quot;  Returns​  PlayerCollection&lt;P&gt;  Defined in​  boardzilla-core/src/player/collection.ts:159 ","version":"Next","tagName":"h3"},{"title":"Class: Action<P, A>","type":0,"sectionRef":"#","url":"/api/classes/Action","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#type-parameters","content":" Name\tTypeP\textends Player A\textends Record&lt;string, Argument&lt;P&gt;&gt; = NonNullable&lt;unknown&gt;  ","version":"Next","tagName":"h2"},{"title":"Behaviour​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#behaviour","content":" ","version":"Next","tagName":"h2"},{"title":"do​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#do","content":" ▸ do(move): Action&lt;P, A&gt;  Add behaviour to this action to alter game state. After adding the choices to an action, calling do causes Boardzilla to use the player choices to actually do something with those choices. Call this method after all the methods for player choices so that the choices are properly available to the do function.  Parameters​  Name\tType\tDescriptionmove\t(args: A) =&gt; any\tThe action to perform. This function accepts one argument with key-value pairs for each choice added to the action using the provided names.  Returns​  Action&lt;P, A&gt;  Example  player =&gt; action({ prompt: 'Take resources', }).chooseFrom({ 'resource', ['lumber', 'steel'], { prompt: 'Select resource' } }).chooseNumber( 'amount', { prompt: 'Select amount', max: 3 }).do(({ resource, amount }) =&gt; { // the choices are automatically passed in with their proper type board.firstN(amount, Resource, {resource}).putInto( player.my('stockPile') ); })   Defined in​  boardzilla-core/src/action/action.ts:301    ","version":"Next","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#message","content":" ▸ message(message, args?): Action&lt;P, A&gt;  Add a message to this action that will be broadcast in the chat. Call this method after all the methods for player choices so that the choices are properly available to the message function. However the message should be called before or after any do behaviour depending on whether you want the message to reflect the game state before or after the move is performs. The action's message and do functions can be intermixed in this way to generate messages at different points int the execution of a move.  Parameters​  Name\tType\tDescriptionmessage\tstring\tThe message to send. This can contain interpolated strings with double braces just as when calling Game#message directly. However when using this method, the player performing the action, plus any choices made in the action are automatically made available. args?\tRecord&lt;string, Argument&lt;P&gt;&gt; | (a: A) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;\tIf additional strings are needed in the message besides 'player' and the player choices, these can be specified here. This can also be specified as a function that accepts the player choices and returns key-value pairs of strings for interpolation.  Returns​  Action&lt;P, A&gt;  Example  action({ prompt: 'Say something', }).enterText({ 'message', }).message( '{{player}} said {{message}}' // no args needed ).message( `I said, {{player}} said {{loudMessage}}, ({ message }) =&gt; ({ loudMessage: message.toUpperCase() }) )   Defined in​  boardzilla-core/src/action/action.ts:339    ","version":"Next","tagName":"h3"},{"title":"move​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#move","content":" ▸ move(piece, into): Action&lt;P, A&gt;  Indicates that this action does a move with the selected elements. This is almost the equivalent of calling Action#do and adding a putInto command, except that the game will also permit the UI to allow a mouse drag for the move.  Parameters​  Name\tType\tDescriptionpiece\tkeyof A | Piece&lt;any, any&gt;\tA Piece to move or the name of the piece selection in this action into\tGameElement&lt;any, any&gt; | keyof A\tA GameElement to move into or the name of the destination selection in this action. player =&gt; action({ prompt: 'Discard a card from hand' }).chooseOnBoard( 'card', player.my(Card) ).move( 'card', $.discard )  Returns​  Action&lt;P, A&gt;  Defined in​  boardzilla-core/src/action/action.ts:799  ","version":"Next","tagName":"h3"},{"title":"Choices​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#choices","content":" ","version":"Next","tagName":"h2"},{"title":"chooseFrom​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#choosefrom","content":" ▸ chooseFrom&lt;N, T&gt;(name, choices, options?): Action&lt;P, A &amp; { [key in string]: T }&gt;  Add a choice to this action from a list of options. These choices will be displayed as buttons in the UI.  Type parameters​  Name\tTypeN\textends string T\textends string | number | boolean | Player&lt;any, any&gt; | GameElement&lt;P, any&gt;  Parameters​  Name\tType\tDescriptionname\tN\tThe name of this choice. This name will be used in all functions that accept the player's choices choices\tT[] | Record&lt;string, T&gt; | (args: A) =&gt; T[] | Record&lt;string, T&gt;\tEither an array of choices or an object with a key-value pair of choices. Use the object style when you want player text to contain additional logic that you don't want to reference in the game logic, similiar to &lt;option value=&quot;key&quot;&gt;Some text&lt;/option&gt; in HTML. This can also be a function that returns the choice array/object. This function will accept arguments for each choice the player has made up to this point in the action. options?\tObject options.prompt?\tstring | (args: A) =&gt; string\tPrompt displayed to the user for this choice. options.confirm?\tstring | [string, undefined | Record&lt;string, Argument&lt;P&gt;&gt; | (args: A &amp; { [key in string]: T }) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;]\tA confirmation message that the player will always see before commiting this choice. This can be useful to present additional information about the consequences of this choice, or simply to force the player to hit a button with a clear message. This can be a simple string, or a 2-celled array in the same form as message with a string message and a set of key-value pairs for string interpolation, optionally being a function that takes an object of key-value pairs for all player choices, and returns the interpolation object. options.validate?\t(args: A &amp; { [key in string]: T }) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. If false, the game will not allow the player to submit this choice. If a string is returned, this will display as the reason for disallowing these selections. options.skipIf?\t&quot;always&quot; | &quot;never&quot; | &quot;only-one&quot; | (args: A) =&gt; boolean\tOne of 'always', 'never' or 'only-one' or a function returning a boolean. (Default 'only-one'). - only-one: If there is only valid choice in the choices given, the game will skip this choice, prompting the player for subsequent choices, if any, or completing the action otherwise. - always: Rather than present this choice directly, the player will be prompted with choices from the next choice in the action for each possible choice here, essentially expanding the choices ahead of time to save the player a step. This option only has relevance if there are subsequent choices in the action. - never: Always present this choice, even if the choice is forced - function: A function that accepts all player choices up to this point and returns a boolean. If returning true, this choice will be skipped. This form is useful in the rare situations where the choice at the time may be meaningless, e.g. selecting from a set of identical tokens. In this case the game will make the choice for the player using the first viable option.  Returns​  Action&lt;P, A &amp; { [key in string]: T }&gt;  Example  action({ prompt: 'Choose color', }).chooseFrom( 'color', ['white', 'blue', 'red'], ).do( ({ color }) =&gt; ... color will be equal to the player-selected color ... ) // a more complex example: action({ prompt: 'Take resources', }).chooseFrom( 'resource', ['lumber', 'steel', 'oil'], { prompt: 'Select resource' } ).chooseFrom( // Use the functional style to include the resource choice in the text // Also use object style to have the value simply be &quot;high&quot; or &quot;low&quot; 'grade', resource =&gt; ({ high: `High grade ${resource}`, low: `Low grade ${resource}` }), { // A follow-up choice that doesn't apply to &quot;oil&quot; skipIf: ({ resource }) =&gt; resource === 'oil', // Add an 'are you sure?' message confirm: ['Buy {{grade}} grade {{resource}}?', ({ grade }) = ({ grade: grade.toUpperCase() })] } ).do ( ({ resource, grade }) =&gt; { // resource will equal 'lumber', 'steel' or 'oil' // grade will equal 'high' or 'low' } )   Defined in​  boardzilla-core/src/action/action.ts:430    ","version":"Next","tagName":"h3"},{"title":"enterText​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#entertext","content":" ▸ enterText&lt;N&gt;(name, options?): Action&lt;P, A &amp; { [key in string]: string }&gt;  Prompt the user for text entry. Use this in games where players submit text, like word-guessing games.  Type parameters​  Name\tTypeN\textends string  Parameters​  Name\tType\tDescriptionname\tN\tThe name of this text input. This name will be used in all functions that accept the player's choices options?\tObject options.prompt?\tstring | (args: A) =&gt; string\tPrompt displayed to the user for entering this text. options.validate?\t(args: A &amp; { [key in string]: string }) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. If false, the game will not allow the player to submit this text. If a string is returned, this will display as the reason for disallowing this text. options.regexp?\tRegExp\t- options.initial?\tstring | (args: A) =&gt; string\tDefault text that can appear initially before a user types.  Returns​  Action&lt;P, A &amp; { [key in string]: string }&gt;  Example  action({ prompt: 'Guess a word', }).enterText({ 'guess', { prompt: 'Your guess', } }).message( guess =&gt; `{{player}} guessed ${guess}` })   Defined in​  boardzilla-core/src/action/action.ts:474    ","version":"Next","tagName":"h3"},{"title":"chooseNumber​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#choosenumber","content":" ▸ chooseNumber&lt;N&gt;(name, options?): Action&lt;P, A &amp; { [key in string]: number }&gt;  Add a numerical choice for this action. This will be presented with a number picker.  Type parameters​  Name\tTypeN\textends string  Parameters​  Name\tType\tDescriptionname\tN\tThe name of this choice. This name will be used in all functions that accept the player's choices options\tObject options.min?\tnumber | (args: A) =&gt; number\tMinimum allowed. Default 1. options.max?\tnumber | (args: A) =&gt; number\tMaximum allowed. Default Infinity options.prompt?\tstring | (args: A) =&gt; string\tPrompt displayed to the user for entering this number. options.confirm?\tstring | [string, undefined | Record&lt;string, Argument&lt;P&gt;&gt; | (args: A &amp; { [key in string]: number }) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;]\tA confirmation message that the player will always see before commiting this choice. This can be useful to present additional information about the consequences of this choice, or simply to force the player to hit a button with a clear message. This can be a simple string, or a 2-celled array in the same form as message with a string message and a set of key-value pairs for string interpolation, optionally being a function that takes an object of key-value pairs for all player choices, and returns the interpolation object. options.validate?\t(args: A &amp; { [key in string]: number }) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. If false, the game will not allow the player to submit this choice. If a string is returned, this will display as the reason for disallowing these selections. options.initial?\tnumber | (args: A) =&gt; number\tInitial value to display in the picker options.skipIf?\t&quot;always&quot; | &quot;never&quot; | &quot;only-one&quot; | (args: A) =&gt; boolean\tOne of 'always', 'never' or 'only-one' or a function returning a boolean. (Default 'only-one'). - only-one: If there is only valid choice in the choices given, the game will skip this choice, prompting the player for subsequent choices, if any, or completing the action otherwise. - always: Rather than present this choice directly, the player will be prompted with choices from the next choice in the action for each possible choice here, essentially expanding the choices ahead of time to save the player a step. This option only has relevance if there are subsequent choices in the action. - never: Always present this choice, even if the choice is forced - function: A function that accepts all player choices up to this point and returns a boolean. If returning true, this choice will be skipped. This form is useful in the rare situations where the choice at the time may be meaningless, e.g. selecting from a set of identical tokens. In this case the game will make the choice for the player using the first viable option.  Returns​  Action&lt;P, A &amp; { [key in string]: number }&gt;  Example  player =&gt; action({ prompt: 'Buy resources', }).chooseNumber( 'amount', { min: 5, max: 10 // select from 5 - 10 }).do( ({ amount }) =&gt; player.resource += amount );   Defined in​  boardzilla-core/src/action/action.ts:547    ","version":"Next","tagName":"h3"},{"title":"chooseOnBoard​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#chooseonboard","content":" ▸ chooseOnBoard&lt;T, N&gt;(name, choices, options?): Action&lt;P, A &amp; { [key in string]: T }&gt;  Add a choice to this action using the board. Users will click on the board to make their choice.  Type parameters​  Name\tTypeT\textends GameElement&lt;P, any&gt; N\textends string  Parameters​  Name\tType\tDescriptionname\tN\tThe name of this choice. This name will be used in all functions that accept the player's choices choices\tBoardQueryMulti&lt;P, T, A&gt;\tElements that may be chosen. This can either be an array of elements or a function returning an array, if the choices depend on previous choices. If using a function, it will accept arguments for each choice the player has made up to this point in the action. options?\tObject options.prompt?\tstring | (args: A) =&gt; string\tPrompt displayed to the user for this choice. options.confirm?\tstring | [string, undefined | Record&lt;string, Argument&lt;P&gt;&gt; | (args: A &amp; { [key in string]: T }) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;]\tA confirmation message that the player will always see before commiting this choice. This can be useful to present additional information about the consequences of this choice, or simply to force the player to hit a button with a clear message. This can be a simple string, or a 2-celled array in the same form as message with a string message and a set of key-value pairs for string interpolation, optionally being a function that takes an object of key-value pairs for all player choices up to this point, including this one, and returns the interpolation object. options.validate?\t(args: A &amp; { [key in string]: T | T[] }) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. If false, the game will not allow the player to submit this choice. If a string is returned, this will display as the reason for disallowing these selections. options.min?\tundefined\tIf supplied, the choice is for a set of elements and the minimum required is min. options.max?\tundefined\tIf supplied, the choice is for a set of elements and the maximum allowed is max. options.number?\tundefined\tIf supplied, the choice is for a set of exactly number elements. For example, if the player is being asked to pass 3 cards from their hand, the choices should be to the cards in their hand and the number to 3. options.skipIf?\t&quot;always&quot; | &quot;never&quot; | &quot;only-one&quot; | (args: A) =&gt; boolean\tOne of 'always', 'never' or 'only-one' or a function returning a boolean. (Default 'only-one'). - only-one: If there is only valid choice in the choices given, the game will skip this choice, prompting the player for subsequent choices, if any, or completing the action otherwise. - always: Rather than present this choice directly, the player will be prompted with choices from the next choice in the action for each possible choice here, essentially expanding the choices ahead of time to save the player a step. This option only has relevance if there are subsequent choices in the action. - never: Always present this choice, even if the choice is forced - function: A function that accepts all player choices up to this point and returns a boolean. If returning true, this choice will be skipped. This form is useful in the rare situations where the choice at the time may be meaningless, e.g. selecting from a set of identical tokens. In this case the game will make the choice for the player using the first viable option.  Returns​  Action&lt;P, A &amp; { [key in string]: T }&gt;  Example  player =&gt; action({ prompt: 'Mulligan', }).chooseOnBoard( 'cards', player.allMy(Card), { prompt: 'Mulligan 1-3 cards', // select 1-3 cards from hand min: 1, max: 3 ).do( ({ cards }) =&gt; { // `cards` is an ElementCollection of the cards selected cards.putInto($.discard); $.deck.firstN(cards.length, Card).putInto(player.my('hand')!); } )   Defined in​  boardzilla-core/src/action/action.ts:639    ","version":"Next","tagName":"h3"},{"title":"chooseGroup​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#choosegroup","content":" ▸ chooseGroup&lt;R&gt;(choices, options?): Action&lt;P, ExpandGroup&lt;P, A, R&gt;&gt;  Create a multi-selection choice. These selections will be presented all at once as a form.  Type parameters​  Name\tTypeR\textends Group&lt;P&gt;  Parameters​  Name\tType\tDescriptionchoices\tR\tAn object containing the selections. This is a set of key-value pairs where each key is the name of the selection and each value is an array of options where the first array element is a string indicating the type of choice ('number', 'select', 'board', 'text') and subsequent elements contain the options for the appropriate choice function (chooseNumber, chooseFrom, chooseOnBoard or enterText). options?\tObject\t- options.validate?\t(args: ExpandGroup&lt;P, A, R&gt;) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. If false, the game will not allow the player to submit these choices. If a string is returned, this will display as the reason for disallowing these selections. options.confirm?\tstring | [string, undefined | Record&lt;string, Argument&lt;P&gt;&gt; | (args: ExpandGroup&lt;P, A, R&gt;) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;]\tA confirmation message that the player will always see before commiting this choice. This can be useful to present additional information about the consequences of this choice, or simply to force the player to hit a button with a clear message. This can be a simple string, or a 2-celled array in the same form as message with a string message and a set of key-value pairs for string interpolation, optionally being a function that takes an object of key-value pairs for all player choices, and returns the interpolation object.  Returns​  Action&lt;P, ExpandGroup&lt;P, A, R&gt;&gt;  Example  action({ prompt: 'purchase' }).chooseGroup({ lumber: ['number', { min: 2 }], steel: ['number', { min: 2 }] }, { // may not purchase more than 10 total resources validate: ({ lumber, steel }) =&gt; lumber + steel &lt;= 10 });   Defined in​  boardzilla-core/src/action/action.ts:753    ","version":"Next","tagName":"h3"},{"title":"placePiece​","type":1,"pageTitle":"Class: Action<P, A>","url":"/api/classes/Action#placepiece","content":" ▸ placePiece(piece, into, options?): Action&lt;P, A &amp; { __placement__: [number, number] }&gt;  Add a placement selection to this action. This will be presented as a piece that players can move into the desired location, snapping to the grid of the destination as the player moves.  Parameters​  Name\tType\tDescriptionpiece\tkeyof A | Piece&lt;any, any&gt;\tA Piece to move or the name of the piece selection in this action into\tGameElement&lt;any, any&gt;\tA GameElement to move into options?\tObject\t- options.prompt?\tstring | (args: A) =&gt; string\t- options.confirm?\tstring | [string, undefined | Record&lt;string, Argument&lt;P&gt;&gt; | (args: A) =&gt; Record&lt;string, Argument&lt;P&gt;&gt;]\tA confirmation message that the player will always see before commiting this choice. This can be useful to present additional information about the consequences of this choice, or simply to force the player to hit a button with a clear message. This can be a simple string, or a 2-celled array in the same form as message with a string message and a set of key-value pairs for string interpolation, optionally being a function that takes an object of key-value pairs for all player choices, and returns the interpolation object. player =&gt; action({ prompt: 'Place your tile' }).chooseOnBoard( 'tile', player.my(Tile) ).placePiece( 'tile', $.map, { confirm: ({ position }) =&gt; [ 'Place tile into row {{row}} and column {{column}}?', position ] }) options.validate?\t(args: A) =&gt; undefined | string | boolean\tA function that takes an object of key-value pairs for all player choices and returns a boolean. The position selected will be available under the special choice name &quot;placement&quot;. If false, the game will not allow the player to submit these choices. If a string is returned, this will display as the reason for disallowing these selections.  Returns​  Action&lt;P, A &amp; { __placement__: [number, number] }&gt;  Defined in​  boardzilla-core/src/action/action.ts:849 ","version":"Next","tagName":"h3"},{"title":"Class: ElementCollection<T>","type":0,"sectionRef":"#","url":"/api/classes/ElementCollection","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#type-parameters","content":" Name\tTypeT\textends GameElement = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#hierarchy","content":" Array&lt;T&gt; ↳ ElementCollection  ","version":"Next","tagName":"h2"},{"title":"Queries​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#queries","content":" ","version":"Next","tagName":"h2"},{"title":"all​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  As GameElement#all, but finds all elements within this collection and its contained elements recursively.  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Defined in​  boardzilla-core/src/board/element-collection.ts:74    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  As GameElement#first, except finds the first element within this collection and its contained elements recursively that matches the arguments provided. See GameElement#all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Defined in​  boardzilla-core/src/board/element-collection.ts:144    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  As GameElement#firstn, except finds the first n elements within this collection and its contained elements recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Defined in​  boardzilla-core/src/board/element-collection.ts:165    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  As GameElement#last, expect finds the last element within this collection and its contained elements recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Defined in​  boardzilla-core/src/board/element-collection.ts:183    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  As GameElement#lastn, expect finds the last n elements within this collection and its contained elements recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Defined in​  boardzilla-core/src/board/element-collection.ts:204    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/board/element-collection.ts:219    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element-collection.ts:233    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/board/element-collection.ts:248    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element-collection.ts:262    ","version":"Next","tagName":"h3"},{"title":"sum​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#sum","content":" ▸ sum(key): number  Returns the sum of all elements in this collection measured by a provided key  Parameters​  Name\tTypekey\tkeyof T | (e: T) =&gt; number  Returns​  number  Example  deck.create(Card, '2', { pips: 2 }); deck.create(Card, '3', { pips: 3 }); deck.all(Card).sum('pips'); // =&gt; 5   Defined in​  boardzilla-core/src/board/element-collection.ts:382    ","version":"Next","tagName":"h3"},{"title":"withHighest​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#withhighest","content":" ▸ withHighest(...attributes): undefined | T  Returns the element in this collection with the highest value of the provided key(s).  Parameters​  Name\tType\tDescription...attributes\tSorter&lt;T&gt;[]\tany number of Sorter's used for comparing. If multiple are provided, subsequent ones are used to break ties on earlier ones.  Returns​  undefined | T  Example  army.create(Soldier, 'a', { strength: 2, initiative: 3 }); army.create(Soldier, 'b', { strength: 3, initiative: 1 }); army.create(Soldier, 'c', { strength: 3, initiative: 2 }); army.all(Solider).withHighest('strength', 'initiative'); // =&gt; Soldier 'c'   Defined in​  boardzilla-core/src/board/element-collection.ts:401    ","version":"Next","tagName":"h3"},{"title":"withLowest​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#withlowest","content":" ▸ withLowest(...attributes): undefined | T  Returns the element in this collection with the lowest value of the provided key(s).  Parameters​  Name\tType\tDescription...attributes\tSorter&lt;T&gt;[]\tany number of Sorter's used for comparing. If multiple are provided, subsequent ones are used to break ties on earlier ones.  Returns​  undefined | T  Example  army.create(Soldier, 'a', { strength: 2, initiative: 3 }); army.create(Soldier, 'b', { strength: 3, initiative: 1 }); army.create(Soldier, 'c', { strength: 2, initiative: 2 }); army.all(Solider).withLowest('strength', 'initiative'); // =&gt; Soldier 'c'   Defined in​  boardzilla-core/src/board/element-collection.ts:420    ","version":"Next","tagName":"h3"},{"title":"max​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#max","content":" ▸ max&lt;K&gt;(key): undefined | K  Returns the highest value of the provided key(s) found on any element in this collection.  Type parameters​  Name\tTypeK\textends string | number  Parameters​  Name\tType\tDescriptionkey\t{ [K2 in string | number | symbol]: T[K2] extends K ? K2 : never }[keyof T] | (t: T) =&gt; K\ta Sorter's used for comparing and extracting the max.  Returns​  undefined | K  Example  army.create(Soldier, 'a', { strength: 2, initiative: 3 }); army.create(Soldier, 'b', { strength: 3, initiative: 1 }); army.create(Soldier, 'c', { strength: 2, initiative: 2 }); army.all(Solider).max('strength'); // =&gt; 3   Defined in​  boardzilla-core/src/board/element-collection.ts:438    ","version":"Next","tagName":"h3"},{"title":"min​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#min","content":" ▸ min&lt;K&gt;(key): undefined | K  Returns the lowest value of the provided key(s) found on any element in this collection.  Type parameters​  Name\tTypeK\textends string | number  Parameters​  Name\tType\tDescriptionkey\t{ [K2 in string | number | symbol]: T[K2] extends K ? K2 : never }[keyof T] | (t: T) =&gt; K\ta Sorter's used for comparing and extracting the minimum.  Returns​  undefined | K  Example  army.create(Soldier, 'a', { strength: 2, initiative: 3 }); army.create(Soldier, 'b', { strength: 3, initiative: 1 }); army.create(Soldier, 'c', { strength: 2, initiative: 2 }); army.all(Solider).min('initiative'); // =&gt; 1   Defined in​  boardzilla-core/src/board/element-collection.ts:458    ","version":"Next","tagName":"h3"},{"title":"areAllEqual​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#areallequal","content":" ▸ areAllEqual(key): boolean  Returns whether all elements in this collection have the same value for key.  Parameters​  Name\tTypekey\tkeyof T  Returns​  boolean  Defined in​  boardzilla-core/src/board/element-collection.ts:468  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#structure","content":" ","version":"Next","tagName":"h2"},{"title":"sortBy​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;T&gt;  Sorts this collection by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;T&gt;  Defined in​  boardzilla-core/src/board/element-collection.ts:350    ","version":"Next","tagName":"h3"},{"title":"sortedBy​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#sortedby","content":" ▸ sortedBy(key, direction?): ElementCollection&lt;T&gt;  Returns a copy of this collection sorted by some Sorter.  Parameters​  Name\tType\tDefault valuekey\tSorter&lt;T&gt; | Sorter&lt;T&gt;[]\tundefined direction\t&quot;desc&quot; | &quot;asc&quot;\t&quot;asc&quot;  Returns​  ElementCollection&lt;T&gt;  Defined in​  boardzilla-core/src/board/element-collection.ts:369    ","version":"Next","tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#remove","content":" ▸ remove(): void  Remove all elements in this collection from the playing area and place them into Board#pile  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:478    ","version":"Next","tagName":"h3"},{"title":"putInto​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#putinto","content":" ▸ putInto(to, options?): void  Move all pieces in this collection into another element. See Piece#putInto.  Parameters​  Name\tTypeto\tGameElement&lt;any, any&gt; options?\tObject options.position?\tnumber options.fromTop?\tnumber options.fromBottom?\tnumber  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:489  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layout​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#layout","content":" ▸ layout(applyTo, attributes): void  Apply a layout to some of the elements directly contained within the elements in this collection. See GameElement#layout  Parameters​  Name\tTypeapplyTo\tT[&quot;_ui&quot;][&quot;layouts&quot;][number][&quot;applyTo&quot;] attributes\tPartial&lt;LayoutAttributes&lt;GameElement&lt;any, any&gt;&gt;&gt;  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:504    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#appearance","content":" ▸ appearance(appearance): void  Define the appearance of the elements in this collection. Any values provided override previous ones. See GameElement#appearance.  Parameters​  Name\tTypeappearance\tObject appearance.className?\tstring appearance.render?\tfalse | (el: T) =&gt; null | Element appearance.aspectRatio?\tnumber appearance.effects?\t{ attributes: Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; ; className: string }[] appearance.info?\tboolean | (el: T) =&gt; null | boolean | Element appearance.connections?\tObject appearance.connections.thickness?\tnumber appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot; appearance.connections.color?\tstring appearance.connections.fill?\tstring appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode appearance.connections.labelScale?\tnumber  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:516  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#showtoall","content":" ▸ showToAll(): void  Show these elements to all players  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:277    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#showonlyto","content":" ▸ showOnlyTo(player): void  Show these elements only to the given player  Parameters​  Name\tTypeplayer\tnumber | Player&lt;any, any&gt;  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:287    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#showto","content":" ▸ showTo(...player): void  Show these elements to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | Player&lt;any, any&gt;[]  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:302    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:319    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: ElementCollection<T>","url":"/api/classes/ElementCollection#hidefrom","content":" ▸ hideFrom(...player): void  Hide these elements from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | Player&lt;any, any&gt;[]  Returns​  void  Defined in​  boardzilla-core/src/board/element-collection.ts:330 ","version":"Next","tagName":"h3"},{"title":"Class: Piece<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Piece","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#hierarchy","content":" GameElement&lt;P, B&gt; ↳ Piece ↳↳ Die  ","version":"Next","tagName":"h2"},{"title":"Queries​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#queries","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#name","content":" • name: string  Element name, used to distinguish elements. Elements with the same name are generally considered indistibuishable. Names are also used for easy searching of elements.  Inherited from​  GameElement.name  Defined in​  boardzilla-core/src/board/element.ts:269    ","version":"Next","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#player","content":" • Optional player: P  Player with which this element is identified. This does not affect behaviour but will mark the element as mine in queries in the context of this player.  Inherited from​  GameElement.player  Defined in​  boardzilla-core/src/board/element.ts:277    ","version":"Next","tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds all elements within this element recursively that match the arguments provided.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Inherited from​  GameElement.all  Defined in​  boardzilla-core/src/board/element.ts:381    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  Finds the first element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  GameElement.first  Defined in​  boardzilla-core/src/board/element.ts:397    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the first n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  GameElement.firstN  Defined in​  boardzilla-core/src/board/element.ts:417    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  Finds the last element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  GameElement.last  Defined in​  boardzilla-core/src/board/element.ts:434    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the last n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  GameElement.lastN  Defined in​  boardzilla-core/src/board/element.ts:454    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  GameElement.top  Defined in​  boardzilla-core/src/board/element.ts:469    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.topN  Defined in​  boardzilla-core/src/board/element.ts:483    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  GameElement.bottom  Defined in​  boardzilla-core/src/board/element.ts:498    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.bottomN  Defined in​  boardzilla-core/src/board/element.ts:512    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#others","content":" ▸ others&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds &quot;sibling&quot; elements (elements that are directly inside the parent of this element) that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.others  Defined in​  boardzilla-core/src/board/element.ts:528    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#has","content":" ▸ has&lt;F&gt;(className, ...finders): boolean  Return whether any element within this element recursively matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Inherited from​  GameElement.has  Defined in​  boardzilla-core/src/board/element.ts:546    ","version":"Next","tagName":"h3"},{"title":"adjacencies​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#adjacencies","content":" ▸ adjacencies&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Find all elements adjacent based on row/column placement or based on this element having connections created by Space#connectTo. Uses the same parameters as GameElement#all  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.adjacencies  Defined in​  boardzilla-core/src/board/element.ts:579    ","version":"Next","tagName":"h3"},{"title":"container​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#container","content":" ▸ container&lt;T&gt;(className?): undefined | T  Returns this elements parent.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName?\tElementClass&lt;T&gt;\tIf provided, searches up the parent tree to find the first matching element. E.g. if a Token is placed on a Card in a players Tableau. calling token.container(Tableau) can be used to find the grandparent.  Returns​  undefined | T  Inherited from​  GameElement.container  Defined in​  boardzilla-core/src/board/element.ts:631    ","version":"Next","tagName":"h3"},{"title":"mine​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#mine","content":" • get mine(): boolean  Whether this element belongs to the player viewing the board. A player is considered to be currently viewing the board if this is called in the context of an action taken by a given player. It is an error to call this method when not in the context of a player action. When querying for elements using ElementFinder such as all and first,mine is available as a search key that accepts a value of true/false  Returns​  boolean  Inherited from​  GameElement.mine  Defined in​  boardzilla-core/src/board/element.ts:684    ","version":"Next","tagName":"h3"},{"title":"atPosition​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#atposition","content":" ▸ atPosition(«destructured»): undefined | GameElement&lt;P, B&gt;  Returns the element at row and column within this element  Parameters​  Name\tType«destructured»\tObject › column\tnumber › row\tnumber  Returns​  undefined | GameElement&lt;P, B&gt;  Inherited from​  GameElement.atPosition  Defined in​  boardzilla-core/src/board/element.ts:938  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#structure","content":" ","version":"Next","tagName":"h2"},{"title":"board​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#board","content":" • board: B  The Board to which this element belongs  Inherited from​  GameElement.board  Defined in​  boardzilla-core/src/board/element.ts:287    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#game","content":" • game: Game&lt;P, B&gt;  A reference to the Game  Inherited from​  GameElement.game  Defined in​  boardzilla-core/src/board/element.ts:293    ","version":"Next","tagName":"h3"},{"title":"constructor​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#constructor","content":" • new Piece&lt;P, B&gt;(ctx): Piece&lt;P, B&gt;  Do not use the constructor directly. Instead Call GameElement#create or GameElement#createMany on the element in which you want to create a new element.  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  Parameters​  Name\tTypectx\tPartial&lt;ElementContext&lt;P, any&gt;&gt;  Returns​  Piece&lt;P, B&gt;  Inherited from​  GameElement.constructor  Defined in​  boardzilla-core/src/board/element.ts:330    ","version":"Next","tagName":"h3"},{"title":"toString​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#tostring","content":" ▸ toString(): string  String used for representng this element in game messages when the object is passed directly, e.g. when taking the choice directly from a chooseOnBoard choice.  Returns​  string  Inherited from​  GameElement.toString  Defined in​  boardzilla-core/src/board/element.ts:361    ","version":"Next","tagName":"h3"},{"title":"adjacentTo​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#adjacentto","content":" ▸ adjacentTo(element): boolean  If this element is adjacent to some other element, based on row/column placement or based on this element having a connection created by Space#connectTo.  Parameters​  Name\tTypeelement\tGameElement&lt;P, B&gt;  Returns​  boolean  Inherited from​  GameElement.adjacentTo  Defined in​  boardzilla-core/src/board/element.ts:562    ","version":"Next","tagName":"h3"},{"title":"setOrder​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#setorder","content":" ▸ setOrder(order): void  Set this class to use a different ordering style.  Parameters​  Name\tType\tDescriptionorder\tundefined | &quot;normal&quot; | &quot;stacking&quot;\tordering style - &quot;normal&quot;: Elements placed into this element are put at the end of the list (default) - &quot;stacking&quot;: Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. if a stack of cards has order set to stacking the first method will return the last card placed in the stack, rather than the first one placed in the stack.  Returns​  void  Inherited from​  GameElement.setOrder  Defined in​  boardzilla-core/src/board/element.ts:619    ","version":"Next","tagName":"h3"},{"title":"isEmpty​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#isempty","content":" ▸ isEmpty(): boolean  Returns whether this element has no elements placed within it.  Returns​  boolean  Inherited from​  GameElement.isEmpty  Defined in​  boardzilla-core/src/board/element.ts:642    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Sorts the elements directly contained within this element by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Inherited from​  GameElement.sortBy  Defined in​  boardzilla-core/src/board/element.ts:650    ","version":"Next","tagName":"h3"},{"title":"shuffle​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#shuffle","content":" ▸ shuffle(): void  Re-orders the elements directly contained within this element randomly.  Returns​  void  Inherited from​  GameElement.shuffle  Defined in​  boardzilla-core/src/board/element.ts:658    ","version":"Next","tagName":"h3"},{"title":"owner​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#owner","content":" • get owner(): undefined | P  The player that owns this element, or the first element that contains this element searching up through the parent hierarchy. This is related to, but different than player. E.g. if a standard playing card is in a player's hand, typically the hand.player will be assigned to that player but the card itself would not have a player. In this case the card.owner() will equal the player in whose hand the card is placed.  Returns​  undefined | P  Inherited from​  GameElement.owner  Defined in​  boardzilla-core/src/board/element.ts:671    ","version":"Next","tagName":"h3"},{"title":"create​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#create","content":" ▸ create&lt;T&gt;(className, name, attributes?): T  Create an element inside this element. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pile or made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player.  Returns​  T  Example  deck.create(Card, 'ace-of-hearts', { suit: 'H', value: '1' });   Inherited from​  GameElement.create  Defined in​  boardzilla-core/src/board/element.ts:808    ","version":"Next","tagName":"h3"},{"title":"createMany​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#createmany","content":" ▸ createMany&lt;T&gt;(n, className, name, attributes?): ElementCollection&lt;T&gt;  Create n elements inside this element of the same class. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pileor made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tNumber to create className\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; | (n: number) =&gt; Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player. If a function is supplied here, a single number argument will be passed with the number of the added element, starting with 1.  Returns​  ElementCollection&lt;T&gt;  Inherited from​  GameElement.createMany  Defined in​  boardzilla-core/src/board/element.ts:846    ","version":"Next","tagName":"h3"},{"title":"isDescendantOf​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#isdescendantof","content":" ▸ isDescendantOf(el): boolean  Whether this element has the given element in its parent hierarchy  Parameters​  Name\tTypeel\tGameElement&lt;any, any&gt;  Returns​  boolean  Inherited from​  GameElement.isDescendantOf  Defined in​  boardzilla-core/src/board/element.ts:946    ","version":"Next","tagName":"h3"},{"title":"putInto​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#putinto","content":" ▸ putInto(to, options?): void  Move this piece into another element. This triggers any onEnter callbacks in the destination.  Parameters​  Name\tType\tDescriptionto\tGameElement&lt;any, any&gt;\tDestination element options?\tObject\t- options.position?\tnumber\tPlace the piece into a specific numbered position relative to the other elements in this space. Positive numbers count from the beginning. Negative numbers count from the end. options.fromTop?\tnumber\tPlace the piece into a specific numbered position counting from the first element options.fromBottom?\tnumber\tPlace the piece into a specific numbered position counting from the last element options.placement?\tObject\tPlace the piece into a specific row and column of the container's grid. options.placement.column\tnumber\t- options.placement.row\tnumber\t-  Returns​  void  Defined in​  boardzilla-core/src/board/piece.ts:29    ","version":"Next","tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#remove","content":" ▸ remove(): void  Remove this piece from the playing area and place it into Board#pile  Returns​  void  Defined in​  boardzilla-core/src/board/piece.ts:58  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layout​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#layout","content":" ▸ layout&lt;T&gt;(this, applyTo, attributes): void  Apply a layout to some of the elements directly contained within this element. See also ElementCollection#layout  Type parameters​  Name\tTypeT\textends Piece&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionthis\tT\t- applyTo\tstring | GameElement&lt;any, any&gt; | ElementClass&lt;any&gt; | ElementCollection&lt;GameElement&lt;any, any&gt;&gt;\tWhich elements this layout applies to. Provided value can be: - A specific GameElement - The name of an element - A specific set of elements (ElementCollection) - A class of elements If multiple layout declarations would apply to the same element, only one will be used. The order of specificity is as above. If a class is used and mutiple apply, the more specific class will be used. attributes\tPartial&lt;LayoutAttributes&lt;T&gt;&gt;\tA list of attributes describing the layout. All units of measurement are percentages of this elements width and height from 0-100, unless otherwise noted (See margin and gap)  Returns​  void  Inherited from​  GameElement.layout  Defined in​  boardzilla-core/src/board/element.ts:1113    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#appearance","content":" ▸ appearance(appearance): void  Define the appearance of this element. Any values provided override previous ones. See also ElementCollection#appearance  Parameters​  Name\tType\tDescriptionappearance\tObject\tPossible values are: appearance.className?\tstring\tA class name to add to the dom element appearance.render?\tfalse | (el: Piece&lt;P, B&gt;) =&gt; null | Element\tA function that takes this element as its only argument and returns JSX for the element. See /styling.md for more on usage. appearance.aspectRatio?\tnumber\tThe aspect ratio for this element. This value is a ratio of width over height. All layouts defined in layout will respect this aspect ratio. appearance.effects?\t{ attributes: Partial&lt;Pick&lt;Piece&lt;P, B&gt;, undefined | &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot;&gt;&gt; ; className: string }[]\tProvides a CSS class that will be applied to this element if its attributes change to match the provided ones. appearance.info?\tboolean | (el: Piece&lt;P, B&gt;) =&gt; null | boolean | Element\tReturn JSX for more info on this element. If returning true, an info modal will be available for this element but with only the rendered element and no text appearance.connections?\tObject\tIf the elements immediately within this element are connected using Space#connectTo, this makes those connections visible as connecting lines. Providing a label will place a label over top of this line by calling the provided function with the distance of the connection specified in Space#connectTo and using the retured JSX. If labelScale is provided, the label is scaled by this amount. appearance.connections.thickness?\tnumber\t- appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot;\t- appearance.connections.color?\tstring\t- appearance.connections.fill?\tstring\t- appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode\t- appearance.connections.labelScale?\tnumber\t-  Returns​  void  Inherited from​  GameElement.appearance  Defined in​  boardzilla-core/src/board/element.ts:1667  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#showtoall","content":" ▸ showToAll(): void  Show this element to all players  Returns​  void  Inherited from​  GameElement.showToAll  Defined in​  boardzilla-core/src/board/element.ts:693    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#showonlyto","content":" ▸ showOnlyTo(player): void  Show this element only to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  void  Inherited from​  GameElement.showOnlyTo  Defined in​  boardzilla-core/src/board/element.ts:701    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#showto","content":" ▸ showTo(...player): void  Show this element to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  GameElement.showTo  Defined in​  boardzilla-core/src/board/element.ts:714    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Inherited from​  GameElement.hideFromAll  Defined in​  boardzilla-core/src/board/element.ts:729    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#hidefrom","content":" ▸ hideFrom(...player): void  Hide this element from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  GameElement.hideFrom  Defined in​  boardzilla-core/src/board/element.ts:738    ","version":"Next","tagName":"h3"},{"title":"isVisibleTo​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#isvisibleto","content":" ▸ isVisibleTo(player): boolean  Returns whether this element is visible to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  boolean  Inherited from​  GameElement.isVisibleTo  Defined in​  boardzilla-core/src/board/element.ts:756    ","version":"Next","tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#isvisible","content":" ▸ isVisible(): boolean  Returns whether this element is visible to the current player. Can only be called when in a player context, during an action taken by a player or while the board is viewed by a given player.  Returns​  boolean  Inherited from​  GameElement.isVisible  Defined in​  boardzilla-core/src/board/element.ts:772    ","version":"Next","tagName":"h3"},{"title":"revealWhenHidden​","type":1,"pageTitle":"Class: Piece<P, B>","url":"/api/classes/Piece#revealwhenhidden","content":" ▸ revealWhenHidden&lt;T&gt;(this, ...attrs): void  Provide list of attributes that remain visible even when these elements are not visible to players. E.g. In a game with multiple card decks with different backs, identified by Card#deck, the identity of the card when face-down is hidden, but the deck it belongs to is not, since the card art on the back would identify the deck. In this case callingCard.revealWhenHidden('deck') will cause all attributes other than 'deck' to be hidden when the card is face down, while still revealing which deck it is.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypethis\tElementClass&lt;T&gt; ...attrs\tstring &amp; keyof T[]  Returns​  void  Inherited from​  GameElement.revealWhenHidden  Defined in​  boardzilla-core/src/board/element.ts:788 ","version":"Next","tagName":"h3"},{"title":"Examples","type":0,"sectionRef":"#","url":"/examples/examples","content":"Examples Want to see some examples? Check out this list of example games to get inspired. 7 Wonders DuelPowergridHexCursed","keywords":"","version":"Next"},{"title":"Core concepts","type":0,"sectionRef":"#","url":"/game/core-concepts","content":"","keywords":"","version":"Next"},{"title":"Board​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#board","content":" The Board is the class that defines the overall layout of the game. It is composed of Spaces and Pieces. Together these are calledElements. The board itself is a Space but with special behaviour.  ","version":"Next","tagName":"h2"},{"title":"Space​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#space","content":" Spaces are regions of the Board. They are fixed and never change once the game starts. They can contain both other spaces and pieces.  ","version":"Next","tagName":"h3"},{"title":"Piece​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#piece","content":" Pieces are movable objects in the game. They can move to other spaces or can be moved inside other Pieces, such as for instance, when tokens are placed onto a card.  You can read further about this in Board Structure.  ","version":"Next","tagName":"h3"},{"title":"Player​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#player","content":" The player is a class that represents a user playing the game. Each game will have a player class specific to it. Players can have pieces and spaces assigned to them, and any piece that enters these becomes &quot;owned&quot; by the player.  You can read further about this in Players.  ","version":"Next","tagName":"h2"},{"title":"Action​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#action","content":" An Action is a discrete unit of choice for a player. An action has a name, any possible selections for the action, and behavior. In Chess, for example, an action might be called &quot;move&quot;. It has two selections: the piece being moved, and space it's moved to. Its behavior would be to move the piece to its destination and a message to the game log.  You can read further about this in Actions.  ","version":"Next","tagName":"h2"},{"title":"Flow​","type":1,"pageTitle":"Core concepts","url":"/game/core-concepts#flow","content":" The Flow of your game is how the game runs from beginning to end. This describes the phases, rounds and turns of the game, and what actions are available to players at which point in the Flow.  You can read further about this in Flow. ","version":"Next","tagName":"h2"},{"title":"Class: Die<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Die","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#hierarchy","content":" Piece&lt;P, B&gt; ↳ Die  ","version":"Next","tagName":"h2"},{"title":"Other​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#other","content":" ","version":"Next","tagName":"h2"},{"title":"current​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#current","content":" • current: number = 1  Currently shown face  Defined in​  boardzilla-core/src/board/die.ts:16    ","version":"Next","tagName":"h3"},{"title":"roll​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#roll","content":" ▸ roll(): void  Randomly choose a new face, causing the roll animation  Returns​  void  Defined in​  boardzilla-core/src/board/die.ts:22  ","version":"Next","tagName":"h3"},{"title":"Queries​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#queries","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#name","content":" • name: string  Element name, used to distinguish elements. Elements with the same name are generally considered indistibuishable. Names are also used for easy searching of elements.  Inherited from​  Piece.name  Defined in​  boardzilla-core/src/board/element.ts:269    ","version":"Next","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#player","content":" • Optional player: P  Player with which this element is identified. This does not affect behaviour but will mark the element as mine in queries in the context of this player.  Inherited from​  Piece.player  Defined in​  boardzilla-core/src/board/element.ts:277    ","version":"Next","tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds all elements within this element recursively that match the arguments provided.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Inherited from​  Piece.all  Defined in​  boardzilla-core/src/board/element.ts:381    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  Finds the first element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  Piece.first  Defined in​  boardzilla-core/src/board/element.ts:397    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the first n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  Piece.firstN  Defined in​  boardzilla-core/src/board/element.ts:417    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  Finds the last element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  Piece.last  Defined in​  boardzilla-core/src/board/element.ts:434    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the last n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  Piece.lastN  Defined in​  boardzilla-core/src/board/element.ts:454    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  Piece.top  Defined in​  boardzilla-core/src/board/element.ts:469    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Piece.topN  Defined in​  boardzilla-core/src/board/element.ts:483    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  Piece.bottom  Defined in​  boardzilla-core/src/board/element.ts:498    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Piece.bottomN  Defined in​  boardzilla-core/src/board/element.ts:512    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#others","content":" ▸ others&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds &quot;sibling&quot; elements (elements that are directly inside the parent of this element) that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Piece.others  Defined in​  boardzilla-core/src/board/element.ts:528    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#has","content":" ▸ has&lt;F&gt;(className, ...finders): boolean  Return whether any element within this element recursively matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Inherited from​  Piece.has  Defined in​  boardzilla-core/src/board/element.ts:546    ","version":"Next","tagName":"h3"},{"title":"adjacencies​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#adjacencies","content":" ▸ adjacencies&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Find all elements adjacent based on row/column placement or based on this element having connections created by Space#connectTo. Uses the same parameters as GameElement#all  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Piece.adjacencies  Defined in​  boardzilla-core/src/board/element.ts:579    ","version":"Next","tagName":"h3"},{"title":"container​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#container","content":" ▸ container&lt;T&gt;(className?): undefined | T  Returns this elements parent.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName?\tElementClass&lt;T&gt;\tIf provided, searches up the parent tree to find the first matching element. E.g. if a Token is placed on a Card in a players Tableau. calling token.container(Tableau) can be used to find the grandparent.  Returns​  undefined | T  Inherited from​  Piece.container  Defined in​  boardzilla-core/src/board/element.ts:631    ","version":"Next","tagName":"h3"},{"title":"mine​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#mine","content":" • get mine(): boolean  Whether this element belongs to the player viewing the board. A player is considered to be currently viewing the board if this is called in the context of an action taken by a given player. It is an error to call this method when not in the context of a player action. When querying for elements using ElementFinder such as all and first,mine is available as a search key that accepts a value of true/false  Returns​  boolean  Inherited from​  Piece.mine  Defined in​  boardzilla-core/src/board/element.ts:684    ","version":"Next","tagName":"h3"},{"title":"atPosition​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#atposition","content":" ▸ atPosition(«destructured»): undefined | GameElement&lt;P, B&gt;  Returns the element at row and column within this element  Parameters​  Name\tType«destructured»\tObject › column\tnumber › row\tnumber  Returns​  undefined | GameElement&lt;P, B&gt;  Inherited from​  Piece.atPosition  Defined in​  boardzilla-core/src/board/element.ts:938  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#structure","content":" ","version":"Next","tagName":"h2"},{"title":"board​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#board","content":" • board: B  The Board to which this element belongs  Inherited from​  Piece.board  Defined in​  boardzilla-core/src/board/element.ts:287    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#game","content":" • game: Game&lt;P, B&gt;  A reference to the Game  Inherited from​  Piece.game  Defined in​  boardzilla-core/src/board/element.ts:293    ","version":"Next","tagName":"h3"},{"title":"constructor​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#constructor","content":" • new Die&lt;P, B&gt;(ctx): Die&lt;P, B&gt;  Do not use the constructor directly. Instead Call GameElement#create or GameElement#createMany on the element in which you want to create a new element.  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  Parameters​  Name\tTypectx\tPartial&lt;ElementContext&lt;P, any&gt;&gt;  Returns​  Die&lt;P, B&gt;  Inherited from​  Piece.constructor  Defined in​  boardzilla-core/src/board/element.ts:330    ","version":"Next","tagName":"h3"},{"title":"toString​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#tostring","content":" ▸ toString(): string  String used for representng this element in game messages when the object is passed directly, e.g. when taking the choice directly from a chooseOnBoard choice.  Returns​  string  Inherited from​  Piece.toString  Defined in​  boardzilla-core/src/board/element.ts:361    ","version":"Next","tagName":"h3"},{"title":"adjacentTo​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#adjacentto","content":" ▸ adjacentTo(element): boolean  If this element is adjacent to some other element, based on row/column placement or based on this element having a connection created by Space#connectTo.  Parameters​  Name\tTypeelement\tGameElement&lt;P, B&gt;  Returns​  boolean  Inherited from​  Piece.adjacentTo  Defined in​  boardzilla-core/src/board/element.ts:562    ","version":"Next","tagName":"h3"},{"title":"setOrder​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#setorder","content":" ▸ setOrder(order): void  Set this class to use a different ordering style.  Parameters​  Name\tType\tDescriptionorder\tundefined | &quot;normal&quot; | &quot;stacking&quot;\tordering style - &quot;normal&quot;: Elements placed into this element are put at the end of the list (default) - &quot;stacking&quot;: Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. if a stack of cards has order set to stacking the first method will return the last card placed in the stack, rather than the first one placed in the stack.  Returns​  void  Inherited from​  Piece.setOrder  Defined in​  boardzilla-core/src/board/element.ts:619    ","version":"Next","tagName":"h3"},{"title":"isEmpty​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#isempty","content":" ▸ isEmpty(): boolean  Returns whether this element has no elements placed within it.  Returns​  boolean  Inherited from​  Piece.isEmpty  Defined in​  boardzilla-core/src/board/element.ts:642    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Sorts the elements directly contained within this element by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Inherited from​  Piece.sortBy  Defined in​  boardzilla-core/src/board/element.ts:650    ","version":"Next","tagName":"h3"},{"title":"shuffle​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#shuffle","content":" ▸ shuffle(): void  Re-orders the elements directly contained within this element randomly.  Returns​  void  Inherited from​  Piece.shuffle  Defined in​  boardzilla-core/src/board/element.ts:658    ","version":"Next","tagName":"h3"},{"title":"owner​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#owner","content":" • get owner(): undefined | P  The player that owns this element, or the first element that contains this element searching up through the parent hierarchy. This is related to, but different than player. E.g. if a standard playing card is in a player's hand, typically the hand.player will be assigned to that player but the card itself would not have a player. In this case the card.owner() will equal the player in whose hand the card is placed.  Returns​  undefined | P  Inherited from​  Piece.owner  Defined in​  boardzilla-core/src/board/element.ts:671    ","version":"Next","tagName":"h3"},{"title":"create​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#create","content":" ▸ create&lt;T&gt;(className, name, attributes?): T  Create an element inside this element. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pile or made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player.  Returns​  T  Example  deck.create(Card, 'ace-of-hearts', { suit: 'H', value: '1' });   Inherited from​  Piece.create  Defined in​  boardzilla-core/src/board/element.ts:808    ","version":"Next","tagName":"h3"},{"title":"createMany​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#createmany","content":" ▸ createMany&lt;T&gt;(n, className, name, attributes?): ElementCollection&lt;T&gt;  Create n elements inside this element of the same class. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pileor made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tNumber to create className\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; | (n: number) =&gt; Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player. If a function is supplied here, a single number argument will be passed with the number of the added element, starting with 1.  Returns​  ElementCollection&lt;T&gt;  Inherited from​  Piece.createMany  Defined in​  boardzilla-core/src/board/element.ts:846    ","version":"Next","tagName":"h3"},{"title":"isDescendantOf​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#isdescendantof","content":" ▸ isDescendantOf(el): boolean  Whether this element has the given element in its parent hierarchy  Parameters​  Name\tTypeel\tGameElement&lt;any, any&gt;  Returns​  boolean  Inherited from​  Piece.isDescendantOf  Defined in​  boardzilla-core/src/board/element.ts:946    ","version":"Next","tagName":"h3"},{"title":"putInto​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#putinto","content":" ▸ putInto(to, options?): void  Move this piece into another element. This triggers any onEnter callbacks in the destination.  Parameters​  Name\tType\tDescriptionto\tGameElement&lt;any, any&gt;\tDestination element options?\tObject\t- options.position?\tnumber\tPlace the piece into a specific numbered position relative to the other elements in this space. Positive numbers count from the beginning. Negative numbers count from the end. options.fromTop?\tnumber\tPlace the piece into a specific numbered position counting from the first element options.fromBottom?\tnumber\tPlace the piece into a specific numbered position counting from the last element options.placement?\tObject\tPlace the piece into a specific row and column of the container's grid. options.placement.column\tnumber\t- options.placement.row\tnumber\t-  Returns​  void  Inherited from​  Piece.putInto  Defined in​  boardzilla-core/src/board/piece.ts:29    ","version":"Next","tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#remove","content":" ▸ remove(): void  Remove this piece from the playing area and place it into Board#pile  Returns​  void  Inherited from​  Piece.remove  Defined in​  boardzilla-core/src/board/piece.ts:58  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layout​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#layout","content":" ▸ layout&lt;T&gt;(this, applyTo, attributes): void  Apply a layout to some of the elements directly contained within this element. See also ElementCollection#layout  Type parameters​  Name\tTypeT\textends Die&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionthis\tT\t- applyTo\tstring | GameElement&lt;any, any&gt; | ElementClass&lt;any&gt; | ElementCollection&lt;GameElement&lt;any, any&gt;&gt;\tWhich elements this layout applies to. Provided value can be: - A specific GameElement - The name of an element - A specific set of elements (ElementCollection) - A class of elements If multiple layout declarations would apply to the same element, only one will be used. The order of specificity is as above. If a class is used and mutiple apply, the more specific class will be used. attributes\tPartial&lt;LayoutAttributes&lt;T&gt;&gt;\tA list of attributes describing the layout. All units of measurement are percentages of this elements width and height from 0-100, unless otherwise noted (See margin and gap)  Returns​  void  Inherited from​  Piece.layout  Defined in​  boardzilla-core/src/board/element.ts:1113    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#appearance","content":" ▸ appearance(appearance): void  Define the appearance of this element. Any values provided override previous ones. See also ElementCollection#appearance  Parameters​  Name\tType\tDescriptionappearance\tObject\tPossible values are: appearance.className?\tstring\tA class name to add to the dom element appearance.render?\tfalse | (el: Die&lt;P, B&gt;) =&gt; null | Element\tA function that takes this element as its only argument and returns JSX for the element. See /styling.md for more on usage. appearance.aspectRatio?\tnumber\tThe aspect ratio for this element. This value is a ratio of width over height. All layouts defined in layout will respect this aspect ratio. appearance.effects?\t{ attributes: Partial&lt;Pick&lt;Die&lt;P, B&gt;, undefined | &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | &quot;current&quot; | &quot;flip&quot; | &quot;sides&quot;&gt;&gt; ; className: string }[]\tProvides a CSS class that will be applied to this element if its attributes change to match the provided ones. appearance.info?\tboolean | (el: Die&lt;P, B&gt;) =&gt; null | boolean | Element\tReturn JSX for more info on this element. If returning true, an info modal will be available for this element but with only the rendered element and no text appearance.connections?\tObject\tIf the elements immediately within this element are connected using Space#connectTo, this makes those connections visible as connecting lines. Providing a label will place a label over top of this line by calling the provided function with the distance of the connection specified in Space#connectTo and using the retured JSX. If labelScale is provided, the label is scaled by this amount. appearance.connections.thickness?\tnumber\t- appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot;\t- appearance.connections.color?\tstring\t- appearance.connections.fill?\tstring\t- appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode\t- appearance.connections.labelScale?\tnumber\t-  Returns​  void  Inherited from​  Piece.appearance  Defined in​  boardzilla-core/src/board/element.ts:1667  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#showtoall","content":" ▸ showToAll(): void  Show this element to all players  Returns​  void  Inherited from​  Piece.showToAll  Defined in​  boardzilla-core/src/board/element.ts:693    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#showonlyto","content":" ▸ showOnlyTo(player): void  Show this element only to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  void  Inherited from​  Piece.showOnlyTo  Defined in​  boardzilla-core/src/board/element.ts:701    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#showto","content":" ▸ showTo(...player): void  Show this element to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  Piece.showTo  Defined in​  boardzilla-core/src/board/element.ts:714    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Inherited from​  Piece.hideFromAll  Defined in​  boardzilla-core/src/board/element.ts:729    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#hidefrom","content":" ▸ hideFrom(...player): void  Hide this element from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  Piece.hideFrom  Defined in​  boardzilla-core/src/board/element.ts:738    ","version":"Next","tagName":"h3"},{"title":"isVisibleTo​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#isvisibleto","content":" ▸ isVisibleTo(player): boolean  Returns whether this element is visible to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  boolean  Inherited from​  Piece.isVisibleTo  Defined in​  boardzilla-core/src/board/element.ts:756    ","version":"Next","tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#isvisible","content":" ▸ isVisible(): boolean  Returns whether this element is visible to the current player. Can only be called when in a player context, during an action taken by a player or while the board is viewed by a given player.  Returns​  boolean  Inherited from​  Piece.isVisible  Defined in​  boardzilla-core/src/board/element.ts:772    ","version":"Next","tagName":"h3"},{"title":"revealWhenHidden​","type":1,"pageTitle":"Class: Die<P, B>","url":"/api/classes/Die#revealwhenhidden","content":" ▸ revealWhenHidden&lt;T&gt;(this, ...attrs): void  Provide list of attributes that remain visible even when these elements are not visible to players. E.g. In a game with multiple card decks with different backs, identified by Card#deck, the identity of the card when face-down is hidden, but the deck it belongs to is not, since the card art on the back would identify the deck. In this case callingCard.revealWhenHidden('deck') will cause all attributes other than 'deck' to be hidden when the card is face down, while still revealing which deck it is.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypethis\tElementClass&lt;T&gt; ...attrs\tstring &amp; keyof T[]  Returns​  void  Inherited from​  Piece.revealWhenHidden  Defined in​  boardzilla-core/src/board/element.ts:788 ","version":"Next","tagName":"h3"},{"title":"Class: GameElement<P, B>","type":0,"sectionRef":"#","url":"/api/classes/GameElement","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#hierarchy","content":" GameElement ↳ Space ↳ Piece  ","version":"Next","tagName":"h2"},{"title":"Queries​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#queries","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#name","content":" • name: string  Element name, used to distinguish elements. Elements with the same name are generally considered indistibuishable. Names are also used for easy searching of elements.  Defined in​  boardzilla-core/src/board/element.ts:269    ","version":"Next","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#player","content":" • Optional player: P  Player with which this element is identified. This does not affect behaviour but will mark the element as mine in queries in the context of this player.  Defined in​  boardzilla-core/src/board/element.ts:277    ","version":"Next","tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds all elements within this element recursively that match the arguments provided.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Defined in​  boardzilla-core/src/board/element.ts:381    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  Finds the first element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Defined in​  boardzilla-core/src/board/element.ts:397    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the first n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Defined in​  boardzilla-core/src/board/element.ts:417    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  Finds the last element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Defined in​  boardzilla-core/src/board/element.ts:434    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the last n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Defined in​  boardzilla-core/src/board/element.ts:454    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/board/element.ts:469    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element.ts:483    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/board/element.ts:498    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element.ts:512    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#others","content":" ▸ others&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds &quot;sibling&quot; elements (elements that are directly inside the parent of this element) that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element.ts:528    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#has","content":" ▸ has&lt;F&gt;(className, ...finders): boolean  Return whether any element within this element recursively matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:546    ","version":"Next","tagName":"h3"},{"title":"adjacencies​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#adjacencies","content":" ▸ adjacencies&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Find all elements adjacent based on row/column placement or based on this element having connections created by Space#connectTo. Uses the same parameters as GameElement#all  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Defined in​  boardzilla-core/src/board/element.ts:579    ","version":"Next","tagName":"h3"},{"title":"container​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#container","content":" ▸ container&lt;T&gt;(className?): undefined | T  Returns this elements parent.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName?\tElementClass&lt;T&gt;\tIf provided, searches up the parent tree to find the first matching element. E.g. if a Token is placed on a Card in a players Tableau. calling token.container(Tableau) can be used to find the grandparent.  Returns​  undefined | T  Defined in​  boardzilla-core/src/board/element.ts:631    ","version":"Next","tagName":"h3"},{"title":"mine​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#mine","content":" • get mine(): boolean  Whether this element belongs to the player viewing the board. A player is considered to be currently viewing the board if this is called in the context of an action taken by a given player. It is an error to call this method when not in the context of a player action. When querying for elements using ElementFinder such as all and first,mine is available as a search key that accepts a value of true/false  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:684    ","version":"Next","tagName":"h3"},{"title":"atPosition​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#atposition","content":" ▸ atPosition(«destructured»): undefined | GameElement&lt;P, B&gt;  Returns the element at row and column within this element  Parameters​  Name\tType«destructured»\tObject › column\tnumber › row\tnumber  Returns​  undefined | GameElement&lt;P, B&gt;  Defined in​  boardzilla-core/src/board/element.ts:938  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#structure","content":" ","version":"Next","tagName":"h2"},{"title":"board​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#board","content":" • board: B  The Board to which this element belongs  Defined in​  boardzilla-core/src/board/element.ts:287    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#game","content":" • game: Game&lt;P, B&gt;  A reference to the Game  Defined in​  boardzilla-core/src/board/element.ts:293    ","version":"Next","tagName":"h3"},{"title":"constructor​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#constructor","content":" • new GameElement&lt;P, B&gt;(ctx): GameElement&lt;P, B&gt;  Do not use the constructor directly. Instead Call GameElement#create or GameElement#createMany on the element in which you want to create a new element.  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  Parameters​  Name\tTypectx\tPartial&lt;ElementContext&lt;P, any&gt;&gt;  Returns​  GameElement&lt;P, B&gt;  Defined in​  boardzilla-core/src/board/element.ts:330    ","version":"Next","tagName":"h3"},{"title":"toString​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#tostring","content":" ▸ toString(): string  String used for representng this element in game messages when the object is passed directly, e.g. when taking the choice directly from a chooseOnBoard choice.  Returns​  string  Defined in​  boardzilla-core/src/board/element.ts:361    ","version":"Next","tagName":"h3"},{"title":"adjacentTo​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#adjacentto","content":" ▸ adjacentTo(element): boolean  If this element is adjacent to some other element, based on row/column placement or based on this element having a connection created by Space#connectTo.  Parameters​  Name\tTypeelement\tGameElement&lt;P, B&gt;  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:562    ","version":"Next","tagName":"h3"},{"title":"setOrder​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#setorder","content":" ▸ setOrder(order): void  Set this class to use a different ordering style.  Parameters​  Name\tType\tDescriptionorder\tundefined | &quot;normal&quot; | &quot;stacking&quot;\tordering style - &quot;normal&quot;: Elements placed into this element are put at the end of the list (default) - &quot;stacking&quot;: Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. if a stack of cards has order set to stacking the first method will return the last card placed in the stack, rather than the first one placed in the stack.  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:619    ","version":"Next","tagName":"h3"},{"title":"isEmpty​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#isempty","content":" ▸ isEmpty(): boolean  Returns whether this element has no elements placed within it.  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:642    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Sorts the elements directly contained within this element by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Defined in​  boardzilla-core/src/board/element.ts:650    ","version":"Next","tagName":"h3"},{"title":"shuffle​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#shuffle","content":" ▸ shuffle(): void  Re-orders the elements directly contained within this element randomly.  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:658    ","version":"Next","tagName":"h3"},{"title":"owner​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#owner","content":" • get owner(): undefined | P  The player that owns this element, or the first element that contains this element searching up through the parent hierarchy. This is related to, but different than player. E.g. if a standard playing card is in a player's hand, typically the hand.player will be assigned to that player but the card itself would not have a player. In this case the card.owner() will equal the player in whose hand the card is placed.  Returns​  undefined | P  Defined in​  boardzilla-core/src/board/element.ts:671    ","version":"Next","tagName":"h3"},{"title":"create​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#create","content":" ▸ create&lt;T&gt;(className, name, attributes?): T  Create an element inside this element. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pile or made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player.  Returns​  T  Example  deck.create(Card, 'ace-of-hearts', { suit: 'H', value: '1' });   Defined in​  boardzilla-core/src/board/element.ts:808    ","version":"Next","tagName":"h3"},{"title":"createMany​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#createmany","content":" ▸ createMany&lt;T&gt;(n, className, name, attributes?): ElementCollection&lt;T&gt;  Create n elements inside this element of the same class. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pileor made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tNumber to create className\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; | (n: number) =&gt; Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player. If a function is supplied here, a single number argument will be passed with the number of the added element, starting with 1.  Returns​  ElementCollection&lt;T&gt;  Defined in​  boardzilla-core/src/board/element.ts:846    ","version":"Next","tagName":"h3"},{"title":"isDescendantOf​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#isdescendantof","content":" ▸ isDescendantOf(el): boolean  Whether this element has the given element in its parent hierarchy  Parameters​  Name\tTypeel\tGameElement&lt;any, any&gt;  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:946  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layout​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#layout","content":" ▸ layout&lt;T&gt;(this, applyTo, attributes): void  Apply a layout to some of the elements directly contained within this element. See also ElementCollection#layout  Type parameters​  Name\tTypeT\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionthis\tT\t- applyTo\tstring | GameElement&lt;any, any&gt; | ElementClass&lt;any&gt; | ElementCollection&lt;GameElement&lt;any, any&gt;&gt;\tWhich elements this layout applies to. Provided value can be: - A specific GameElement - The name of an element - A specific set of elements (ElementCollection) - A class of elements If multiple layout declarations would apply to the same element, only one will be used. The order of specificity is as above. If a class is used and mutiple apply, the more specific class will be used. attributes\tPartial&lt;LayoutAttributes&lt;T&gt;&gt;\tA list of attributes describing the layout. All units of measurement are percentages of this elements width and height from 0-100, unless otherwise noted (See margin and gap)  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:1113    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#appearance","content":" ▸ appearance(appearance): void  Define the appearance of this element. Any values provided override previous ones. See also ElementCollection#appearance  Parameters​  Name\tType\tDescriptionappearance\tObject\tPossible values are: appearance.className?\tstring\tA class name to add to the dom element appearance.render?\tfalse | (el: GameElement&lt;P, B&gt;) =&gt; null | Element\tA function that takes this element as its only argument and returns JSX for the element. See /styling.md for more on usage. appearance.aspectRatio?\tnumber\tThe aspect ratio for this element. This value is a ratio of width over height. All layouts defined in layout will respect this aspect ratio. appearance.effects?\t{ attributes: Partial&lt;Pick&lt;GameElement&lt;P, B&gt;, undefined | &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot;&gt;&gt; ; className: string }[]\tProvides a CSS class that will be applied to this element if its attributes change to match the provided ones. appearance.info?\tboolean | (el: GameElement&lt;P, B&gt;) =&gt; null | boolean | Element\tReturn JSX for more info on this element. If returning true, an info modal will be available for this element but with only the rendered element and no text appearance.connections?\tObject\tIf the elements immediately within this element are connected using Space#connectTo, this makes those connections visible as connecting lines. Providing a label will place a label over top of this line by calling the provided function with the distance of the connection specified in Space#connectTo and using the retured JSX. If labelScale is provided, the label is scaled by this amount. appearance.connections.thickness?\tnumber\t- appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot;\t- appearance.connections.color?\tstring\t- appearance.connections.fill?\tstring\t- appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode\t- appearance.connections.labelScale?\tnumber\t-  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:1667  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#showtoall","content":" ▸ showToAll(): void  Show this element to all players  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:693    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#showonlyto","content":" ▸ showOnlyTo(player): void  Show this element only to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:701    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#showto","content":" ▸ showTo(...player): void  Show this element to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:714    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:729    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#hidefrom","content":" ▸ hideFrom(...player): void  Hide this element from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:738    ","version":"Next","tagName":"h3"},{"title":"isVisibleTo​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#isvisibleto","content":" ▸ isVisibleTo(player): boolean  Returns whether this element is visible to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:756    ","version":"Next","tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#isvisible","content":" ▸ isVisible(): boolean  Returns whether this element is visible to the current player. Can only be called when in a player context, during an action taken by a player or while the board is viewed by a given player.  Returns​  boolean  Defined in​  boardzilla-core/src/board/element.ts:772    ","version":"Next","tagName":"h3"},{"title":"revealWhenHidden​","type":1,"pageTitle":"Class: GameElement<P, B>","url":"/api/classes/GameElement#revealwhenhidden","content":" ▸ revealWhenHidden&lt;T&gt;(this, ...attrs): void  Provide list of attributes that remain visible even when these elements are not visible to players. E.g. In a game with multiple card decks with different backs, identified by Card#deck, the identity of the card when face-down is hidden, but the deck it belongs to is not, since the card art on the back would identify the deck. In this case callingCard.revealWhenHidden('deck') will cause all attributes other than 'deck' to be hidden when the card is face down, while still revealing which deck it is.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypethis\tElementClass&lt;T&gt; ...attrs\tstring &amp; keyof T[]  Returns​  void  Defined in​  boardzilla-core/src/board/element.ts:788 ","version":"Next","tagName":"h3"},{"title":"Class: Board<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Board","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#hierarchy","content":" Space&lt;P, B&gt; ↳ Board  ","version":"Next","tagName":"h2"},{"title":"Queries​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#queries","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#name","content":" • name: string  Element name, used to distinguish elements. Elements with the same name are generally considered indistibuishable. Names are also used for easy searching of elements.  Inherited from​  Space.name  Defined in​  boardzilla-core/src/board/element.ts:269    ","version":"Next","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#player","content":" • Optional player: P  Player with which this element is identified. This does not affect behaviour but will mark the element as mine in queries in the context of this player.  Inherited from​  Space.player  Defined in​  boardzilla-core/src/board/element.ts:277    ","version":"Next","tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds all elements within this element recursively that match the arguments provided.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Inherited from​  Space.all  Defined in​  boardzilla-core/src/board/element.ts:381    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  Finds the first element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  Space.first  Defined in​  boardzilla-core/src/board/element.ts:397    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the first n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  Space.firstN  Defined in​  boardzilla-core/src/board/element.ts:417    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  Finds the last element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  Space.last  Defined in​  boardzilla-core/src/board/element.ts:434    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the last n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  Space.lastN  Defined in​  boardzilla-core/src/board/element.ts:454    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  Space.top  Defined in​  boardzilla-core/src/board/element.ts:469    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Space.topN  Defined in​  boardzilla-core/src/board/element.ts:483    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  Space.bottom  Defined in​  boardzilla-core/src/board/element.ts:498    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Space.bottomN  Defined in​  boardzilla-core/src/board/element.ts:512    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#others","content":" ▸ others&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds &quot;sibling&quot; elements (elements that are directly inside the parent of this element) that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Space.others  Defined in​  boardzilla-core/src/board/element.ts:528    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#has","content":" ▸ has&lt;F&gt;(className, ...finders): boolean  Return whether any element within this element recursively matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Inherited from​  Space.has  Defined in​  boardzilla-core/src/board/element.ts:546    ","version":"Next","tagName":"h3"},{"title":"adjacencies​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#adjacencies","content":" ▸ adjacencies&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Find all elements adjacent based on row/column placement or based on this element having connections created by Space#connectTo. Uses the same parameters as GameElement#all  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  Space.adjacencies  Defined in​  boardzilla-core/src/board/element.ts:579    ","version":"Next","tagName":"h3"},{"title":"container​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#container","content":" ▸ container&lt;T&gt;(className?): undefined | T  Returns this elements parent.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName?\tElementClass&lt;T&gt;\tIf provided, searches up the parent tree to find the first matching element. E.g. if a Token is placed on a Card in a players Tableau. calling token.container(Tableau) can be used to find the grandparent.  Returns​  undefined | T  Inherited from​  Space.container  Defined in​  boardzilla-core/src/board/element.ts:631    ","version":"Next","tagName":"h3"},{"title":"mine​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#mine","content":" • get mine(): boolean  Whether this element belongs to the player viewing the board. A player is considered to be currently viewing the board if this is called in the context of an action taken by a given player. It is an error to call this method when not in the context of a player action. When querying for elements using ElementFinder such as all and first,mine is available as a search key that accepts a value of true/false  Returns​  boolean  Inherited from​  Space.mine  Defined in​  boardzilla-core/src/board/element.ts:684    ","version":"Next","tagName":"h3"},{"title":"atPosition​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#atposition","content":" ▸ atPosition(«destructured»): undefined | GameElement&lt;P, B&gt;  Returns the element at row and column within this element  Parameters​  Name\tType«destructured»\tObject › column\tnumber › row\tnumber  Returns​  undefined | GameElement&lt;P, B&gt;  Inherited from​  Space.atPosition  Defined in​  boardzilla-core/src/board/element.ts:938    ","version":"Next","tagName":"h3"},{"title":"closest​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#closest","content":" ▸ closest&lt;F&gt;(className, ...finders): undefined | F  Finds the nearest space connected to this space, measured by distance. Uses the same parameters as GameElement#first  Type parameters​  Name\tTypeF\textends Space&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  Space.closest  Defined in​  boardzilla-core/src/board/space.ts:131    ","version":"Next","tagName":"h3"},{"title":"withinDistance​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#withindistance","content":" ▸ withinDistance(distance): ElementCollection&lt;Space&lt;P, B&gt;&gt;  Finds all spaces connected to this space by a distance no more thandistance  Parameters​  Name\tTypedistance\tnumber  Returns​  ElementCollection&lt;Space&lt;P, B&gt;&gt;  Inherited from​  Space.withinDistance  Defined in​  boardzilla-core/src/board/space.ts:154  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#structure","content":" ","version":"Next","tagName":"h2"},{"title":"pile​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#pile","content":" • pile: GameElement&lt;P, any&gt;  An element containing all game elements that are not currently in play. When elements are removed from the game, they go here, and can be retrieved, using e.g. board.pile.first('removed-element').putInto('destination-area').  Defined in​  boardzilla-core/src/board/board.ts:118    ","version":"Next","tagName":"h3"},{"title":"registerClasses​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#registerclasses","content":" ▸ registerClasses(...classList): void  This method must be called inside createGame with all custom Space and Piece class declared in your game.  Parameters​  Name\tType...classList\tElementClass[]  Returns​  void  Defined in​  boardzilla-core/src/board/board.ts:132    ","version":"Next","tagName":"h3"},{"title":"board​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#board","content":" • board: B  The Board to which this element belongs  Inherited from​  Space.board  Defined in​  boardzilla-core/src/board/element.ts:287    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#game","content":" • game: Game&lt;P, B&gt;  A reference to the Game  Inherited from​  Space.game  Defined in​  boardzilla-core/src/board/element.ts:293    ","version":"Next","tagName":"h3"},{"title":"toString​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#tostring","content":" ▸ toString(): string  String used for representng this element in game messages when the object is passed directly, e.g. when taking the choice directly from a chooseOnBoard choice.  Returns​  string  Inherited from​  Space.toString  Defined in​  boardzilla-core/src/board/element.ts:361    ","version":"Next","tagName":"h3"},{"title":"adjacentTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#adjacentto","content":" ▸ adjacentTo(element): boolean  If this element is adjacent to some other element, based on row/column placement or based on this element having a connection created by Space#connectTo.  Parameters​  Name\tTypeelement\tGameElement&lt;P, B&gt;  Returns​  boolean  Inherited from​  Space.adjacentTo  Defined in​  boardzilla-core/src/board/element.ts:562    ","version":"Next","tagName":"h3"},{"title":"setOrder​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#setorder","content":" ▸ setOrder(order): void  Set this class to use a different ordering style.  Parameters​  Name\tType\tDescriptionorder\tundefined | &quot;normal&quot; | &quot;stacking&quot;\tordering style - &quot;normal&quot;: Elements placed into this element are put at the end of the list (default) - &quot;stacking&quot;: Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. if a stack of cards has order set to stacking the first method will return the last card placed in the stack, rather than the first one placed in the stack.  Returns​  void  Inherited from​  Space.setOrder  Defined in​  boardzilla-core/src/board/element.ts:619    ","version":"Next","tagName":"h3"},{"title":"isEmpty​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#isempty","content":" ▸ isEmpty(): boolean  Returns whether this element has no elements placed within it.  Returns​  boolean  Inherited from​  Space.isEmpty  Defined in​  boardzilla-core/src/board/element.ts:642    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Sorts the elements directly contained within this element by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Inherited from​  Space.sortBy  Defined in​  boardzilla-core/src/board/element.ts:650    ","version":"Next","tagName":"h3"},{"title":"shuffle​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#shuffle","content":" ▸ shuffle(): void  Re-orders the elements directly contained within this element randomly.  Returns​  void  Inherited from​  Space.shuffle  Defined in​  boardzilla-core/src/board/element.ts:658    ","version":"Next","tagName":"h3"},{"title":"owner​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#owner","content":" • get owner(): undefined | P  The player that owns this element, or the first element that contains this element searching up through the parent hierarchy. This is related to, but different than player. E.g. if a standard playing card is in a player's hand, typically the hand.player will be assigned to that player but the card itself would not have a player. In this case the card.owner() will equal the player in whose hand the card is placed.  Returns​  undefined | P  Inherited from​  Space.owner  Defined in​  boardzilla-core/src/board/element.ts:671    ","version":"Next","tagName":"h3"},{"title":"createMany​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#createmany","content":" ▸ createMany&lt;T&gt;(n, className, name, attributes?): ElementCollection&lt;T&gt;  Create n elements inside this element of the same class. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pileor made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tNumber to create className\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; | (n: number) =&gt; Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player. If a function is supplied here, a single number argument will be passed with the number of the added element, starting with 1.  Returns​  ElementCollection&lt;T&gt;  Inherited from​  Space.createMany  Defined in​  boardzilla-core/src/board/element.ts:846    ","version":"Next","tagName":"h3"},{"title":"isDescendantOf​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#isdescendantof","content":" ▸ isDescendantOf(el): boolean  Whether this element has the given element in its parent hierarchy  Parameters​  Name\tTypeel\tGameElement&lt;any, any&gt;  Returns​  boolean  Inherited from​  Space.isDescendantOf  Defined in​  boardzilla-core/src/board/element.ts:946    ","version":"Next","tagName":"h3"},{"title":"onEnter​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#onenter","content":" ▸ onEnter&lt;T&gt;(type, callback): void  Attach a callback to this space for every element that enters or is created within.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptiontype\tElementClass&lt;T&gt;\tthe class of element that will trigger this callback callback\t(el: T) =&gt; void\tCallback will be called each time an element enters, with the entering element as the only argument.  Returns​  void  Example  deck.onEnter(Card, card =&gt; card.hideFromAll()) // card placed in the deck are automatically turned face down   Inherited from​  Space.onEnter  Defined in​  boardzilla-core/src/board/space.ts:50    ","version":"Next","tagName":"h3"},{"title":"onExit​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#onexit","content":" ▸ onExit&lt;T&gt;(type, callback): void  Attach a callback to this space for every element that is moved out of this space.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptiontype\tElementClass&lt;T&gt;\tthe class of element that will trigger this callback callback\t(el: T) =&gt; void\tCallback will be called each time an element exits, with the exiting element as the only argument.  Returns​  void  Example  deck.onExit(Card, card =&gt; card.showToAll()) // cards drawn from the deck are automatically turned face up   Inherited from​  Space.onExit  Defined in​  boardzilla-core/src/board/space.ts:66    ","version":"Next","tagName":"h3"},{"title":"connectTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#connectto","content":" ▸ connectTo(space, distance?): Board&lt;P, B&gt;  Make this space adjacent with another space for the purposes of adjacency and path-finding functions. Using connectTo on a space creates a custom graph of adjacency for the container of this space that overrides the standard adjacency based on the built-in row/column placement.  Parameters​  Name\tType\tDefault value\tDescriptionspace\tSpace&lt;P, B&gt;\tundefined\tSpace to connect to distance\tnumber\t1\tAdd a custom distance to this connection for the purposes of distance-measuring.  Returns​  Board&lt;P, B&gt;  Inherited from​  Space.connectTo  Defined in​  boardzilla-core/src/board/space.ts:89    ","version":"Next","tagName":"h3"},{"title":"distanceTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#distanceto","content":" ▸ distanceTo(space): undefined | number  Finds the shortest distance to another space, traveling thru multiple connections  Parameters​  Name\tType\tDescriptionspace\tSpace&lt;P, B&gt;\tSpace to measure distance to  Returns​  undefined | number  shortest distance measured by the distance values added to each connection in connectTo  Inherited from​  Space.distanceTo  Defined in​  boardzilla-core/src/board/space.ts:111  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layoutStep​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#layoutstep","content":" ▸ layoutStep(step, attributes): void  Apply layout rules to a particular step in the flow, controlling where player prompts and choices appear in relation to the board  Parameters​  Name\tType\tDescriptionstep\tstring\tthe name of the step as defined in playerActions attributes\tActionLayout\tsee ActionLayout  Returns​  void  Defined in​  boardzilla-core/src/board/board.ts:222    ","version":"Next","tagName":"h3"},{"title":"layoutAction​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#layoutaction","content":" ▸ layoutAction(action, attributes): void  Apply layout rules to a particular action, controlling where player prompts and choices appear in relation to the board  Parameters​  Name\tType\tDescriptionaction\tstring\tthe name of the action as defined in game#defineActions attributes\tActionLayout\tsee ActionLayout  Returns​  void  Defined in​  boardzilla-core/src/board/board.ts:236    ","version":"Next","tagName":"h3"},{"title":"disableDefaultAppearance​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#disabledefaultappearance","content":" ▸ disableDefaultAppearance(): void  Remove all built-in default appearance. If any elements have not been given a custom appearance, this causes them to be hidden.  Returns​  void  Defined in​  boardzilla-core/src/board/board.ts:246    ","version":"Next","tagName":"h3"},{"title":"layout​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#layout","content":" ▸ layout&lt;T&gt;(this, applyTo, attributes): void  Apply a layout to some of the elements directly contained within this element. See also ElementCollection#layout  Type parameters​  Name\tTypeT\textends Board&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionthis\tT\t- applyTo\tstring | GameElement&lt;any, any&gt; | ElementClass&lt;any&gt; | ElementCollection&lt;GameElement&lt;any, any&gt;&gt;\tWhich elements this layout applies to. Provided value can be: - A specific GameElement - The name of an element - A specific set of elements (ElementCollection) - A class of elements If multiple layout declarations would apply to the same element, only one will be used. The order of specificity is as above. If a class is used and mutiple apply, the more specific class will be used. attributes\tPartial&lt;LayoutAttributes&lt;T&gt;&gt;\tA list of attributes describing the layout. All units of measurement are percentages of this elements width and height from 0-100, unless otherwise noted (See margin and gap)  Returns​  void  Inherited from​  Space.layout  Defined in​  boardzilla-core/src/board/element.ts:1113    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#appearance","content":" ▸ appearance(appearance): void  Define the appearance of this element. Any values provided override previous ones. See also ElementCollection#appearance  Parameters​  Name\tType\tDescriptionappearance\tObject\tPossible values are: appearance.className?\tstring\tA class name to add to the dom element appearance.render?\tfalse | (el: Board&lt;P, B&gt;) =&gt; null | Element\tA function that takes this element as its only argument and returns JSX for the element. See /styling.md for more on usage. appearance.aspectRatio?\tnumber\tThe aspect ratio for this element. This value is a ratio of width over height. All layouts defined in layout will respect this aspect ratio. appearance.effects?\t{ attributes: Partial&lt;Pick&lt;Board&lt;P, B&gt;, undefined | &quot;name&quot; | &quot;_eventHandlers&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | &quot;pile&quot;&gt;&gt; ; className: string }[]\tProvides a CSS class that will be applied to this element if its attributes change to match the provided ones. appearance.info?\tboolean | (el: Board&lt;P, B&gt;) =&gt; null | boolean | Element\tReturn JSX for more info on this element. If returning true, an info modal will be available for this element but with only the rendered element and no text appearance.connections?\tObject\tIf the elements immediately within this element are connected using Space#connectTo, this makes those connections visible as connecting lines. Providing a label will place a label over top of this line by calling the provided function with the distance of the connection specified in Space#connectTo and using the retured JSX. If labelScale is provided, the label is scaled by this amount. appearance.connections.thickness?\tnumber\t- appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot;\t- appearance.connections.color?\tstring\t- appearance.connections.fill?\tstring\t- appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode\t- appearance.connections.labelScale?\tnumber\t-  Returns​  void  Inherited from​  Space.appearance  Defined in​  boardzilla-core/src/board/element.ts:1667  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#showtoall","content":" ▸ showToAll(): void  Show this element to all players  Returns​  void  Inherited from​  Space.showToAll  Defined in​  boardzilla-core/src/board/element.ts:693    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#showonlyto","content":" ▸ showOnlyTo(player): void  Show this element only to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  void  Inherited from​  Space.showOnlyTo  Defined in​  boardzilla-core/src/board/element.ts:701    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#showto","content":" ▸ showTo(...player): void  Show this element to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  Space.showTo  Defined in​  boardzilla-core/src/board/element.ts:714    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Inherited from​  Space.hideFromAll  Defined in​  boardzilla-core/src/board/element.ts:729    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#hidefrom","content":" ▸ hideFrom(...player): void  Hide this element from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  Space.hideFrom  Defined in​  boardzilla-core/src/board/element.ts:738    ","version":"Next","tagName":"h3"},{"title":"isVisibleTo​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#isvisibleto","content":" ▸ isVisibleTo(player): boolean  Returns whether this element is visible to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  boolean  Inherited from​  Space.isVisibleTo  Defined in​  boardzilla-core/src/board/element.ts:756    ","version":"Next","tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#isvisible","content":" ▸ isVisible(): boolean  Returns whether this element is visible to the current player. Can only be called when in a player context, during an action taken by a player or while the board is viewed by a given player.  Returns​  boolean  Inherited from​  Space.isVisible  Defined in​  boardzilla-core/src/board/element.ts:772    ","version":"Next","tagName":"h3"},{"title":"revealWhenHidden​","type":1,"pageTitle":"Class: Board<P, B>","url":"/api/classes/Board#revealwhenhidden","content":" ▸ revealWhenHidden&lt;T&gt;(this, ...attrs): void  Provide list of attributes that remain visible even when these elements are not visible to players. E.g. In a game with multiple card decks with different backs, identified by Card#deck, the identity of the card when face-down is hidden, but the deck it belongs to is not, since the card art on the back would identify the deck. In this case callingCard.revealWhenHidden('deck') will cause all attributes other than 'deck' to be hidden when the card is face down, while still revealing which deck it is.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypethis\tElementClass&lt;T&gt; ...attrs\tstring &amp; keyof T[]  Returns​  void  Inherited from​  Space.revealWhenHidden  Defined in​  boardzilla-core/src/board/element.ts:788 ","version":"Next","tagName":"h3"},{"title":"Creating a game","type":0,"sectionRef":"#","url":"/game/creating-a-game","content":"Creating a game After creating a new Boardzilla game, writing a game in Boardzilla usually follows these steps: Create the Spaces for your boardCreate the Pieces for your game and add them onto the boardDefine some Actions that the player(s) can takeAdd these actions into the FlowTest the actions in the browserAdd more actions and then test thoseCustomize the flow to add rounds, phases, turns etc.Finally, customize the UI by adding game art, custom HTML/CSS and animations UI Last It is generally best to customize the UI last. Boardzilla's default UI may not be pretty but it's the easiest way to see exactly what's going on, or why a rule is not behaving as you expect. From the moment you create your new Boardzilla game, it is runnable in the browser and as you progress through the steps above, the browser will immediately update with your changes. You can begin &quot;playing&quot; your game as soon as actions are added. You can also run the game backward and forward to test it. As you progress, the game updates in real-time, even reflecting how the in-progress game history would change based on the new rules you've entered. In this way, a game can be created iteratively, testing each rule and revising before adding more. See an example of creating a game using these steps in this video tutorial.","keywords":"","version":"Next"},{"title":"Creating a game","type":0,"sectionRef":"#","url":"/introduction/creating-a-game","content":"","keywords":"","version":"Next"},{"title":"Before you get started​","type":1,"pageTitle":"Creating a game","url":"/introduction/creating-a-game#before-you-get-started","content":" In order to make a game in Boardzilla you'll need to have:  Node 18 or higherA Linux or Mac environment to develop onA code editor of your choice  As well, a knowledge of the following is essential to writing a game in Boardzilla:  TypeScript or JavaScriptCSS  As well, some familiarity with the following is useful:  React, particularly with JSXesbuild which is used to compile and build your game  ","version":"Next","tagName":"h2"},{"title":"Creating your first game​","type":1,"pageTitle":"Creating a game","url":"/introduction/creating-a-game#creating-your-first-game","content":" Once you've got Node 18 or higher installed, you're ready to create your first game. Run the following:  npx @boardzilla/create-game   You'll be guided through a series of prompts. One of the choices you'll be prompted with is which game template you'd like to use. The simple template gives you a very basic game to edit right away. The empty template gives you a completely empty game to use. If this is your first time making a game, the simple template is probably best as it gives you a working example to play with. ","version":"Next","tagName":"h2"},{"title":"Players","type":0,"sectionRef":"#","url":"/game/players","content":"","keywords":"","version":"Next"},{"title":"Player List​","type":1,"pageTitle":"Players","url":"/game/players#player-list","content":" The current list of players is always available asgame.players which returns an Array-like of players with other special methods added. The array is in the order the players will normally act, but can be re-ordered withsortBy.  player order vs table position Player order is not always the same as the seating order around the table. Boardzilla will begin the game with players in order based on seating, but if the order is changed, then game.players will be in turn order, but looking at player.position orgame.players.inPositionOrder()will tell you what the seating order is.  The API documentation contains a full list of available methods on PlayerCollection.  ","version":"Next","tagName":"h2"},{"title":"Current player​","type":1,"pageTitle":"Players","url":"/game/players#current-player","content":" Boardzilla has a concept of a current player, that is currently allowed to act. If not otherwise specified, when presenting possible player actions, they are presented for the current player, and no other player can act until their turn.  The current player is available by callinggame.players.current(). You can set the current player, withplayer.setCurrent(). Typically however, when letting each player take turns, you will simply useeachPlayer which automatically sets the current player.  It is possible for multiple players to be considered current, in which case these players can act simultaneously. You can set multiple players by callinggame.players.setCurrent() with an array. In these cases, you must usegame.players.allCurrent() to retrieve the list of current players rather thangame.players.current().  The API documentation contains a full list of available methods on Player.  ","version":"Next","tagName":"h2"},{"title":"Customize player​","type":1,"pageTitle":"Players","url":"/game/players#customize-player","content":" When you create a Boardzilla game, you are automatically provided with a subclassed Player class where you can add properties and methods specific to your game. Typically this is where you keep per-player state, such as score.  The player object is used throughout Boardzilla. Most importantly, it is the argument sent to every Action. For this reason, the Player subclass for your game is passed as an argument tocreateGame so that every method and object that uses player passes your game's Player type, and you can access your custom methods and properties.  ","version":"Next","tagName":"h2"},{"title":"Player Board elements​","type":1,"pageTitle":"Players","url":"/game/players#player-board-elements","content":" As described in Board Structure, players can own elements of the board by setting its player property to the player you choose. This marks the element as being assigned to this player, e.g. the player mat, the player's hand, the player's unique tokens. All elements that enter a space assigned to a player are considered to be &quot;owned&quot; by that player, and are accessible using theplayer.my andplayer.allMy methods for finding respectively one or many owned elements.  ","version":"Next","tagName":"h2"},{"title":"Profile badge​","type":1,"pageTitle":"Players","url":"/game/players#profile-badge","content":" It is generally good practice to place the&lt;ProfileBadge/&gt; component into the UI to mark the player's area of the board and show information about the player, such as score. This automatically displays if it's the player's turn, whether they're online, and links to their profile, if any. It can be further customized with CSS. ","version":"Next","tagName":"h2"},{"title":"Testing and Debugging","type":0,"sectionRef":"#","url":"/introduction/debugging","content":"","keywords":"","version":"Next"},{"title":"Test runner​","type":1,"pageTitle":"Testing and Debugging","url":"/introduction/debugging#test-runner","content":" Boardzilla includes a test runner class that mocks the playing environment of a server plus a prescribed number of players all sending actions to the game so you can set up automated tests that run through example games and test assertions on the game state.  The test runner exposes both the player versions of the board and the server version of the board which was complete knowledge of all hidden information. It's important when testing player moves to use the correct version for the given player.  import { TestRunner } from &quot;@boardzilla/core&quot;; const runner = new TestRunner(setup); const [player1, player2] = runner.start({ players: 2, settings: {} }); // example move player1.move(&quot;takeCard&quot;, { card: player1.board.first(Card) }); // example assertion on server board console.assert(runner.server.board.someProperty === &quot;some-value&quot;); // example assertion on player actions console.assert(player1.actions().length === 0);   You can import the test runner and set up tests using the testing library of your choice. The starter game includes an example working test suiteusing vitest.  ","version":"Next","tagName":"h2"},{"title":"Browser developer tools​","type":1,"pageTitle":"Testing and Debugging","url":"/introduction/debugging#browser-developer-tools","content":" Boardzilla outputs some debug info about the current state of the board and the current available actions at every step of the game flow into the console. To see all these messages, set the console output levels to include Verbose ordebug.  While test playing your game in dev tools, it is often desirable to inspect the state at a given point. Setting up breakpoints using the browser dev tools or by inserting debugger into your game code is often useful. But even without breakpoints, you can inspect the state of the game at any given point by opening the console tab in your browser developer tools and switching the Javascript context to ui.html. While in this context, you have access to the player'sgame and board objects, as well as all custom classes registered for your game.    As well, the DOM inspector in the browser developer tools is a useful tool for quickly inspecting the state of the board. Since the board is output in a DOM tree that matches the Board structure, it can be used to quickly see if pieces and spaces are where they should be. As well the properties of all elements are output as data- attributes on the DOM elements so you can further see the state of inidividual game elements. SeeCSS for full details.  ","version":"Next","tagName":"h2"},{"title":"History controls​","type":1,"pageTitle":"Testing and Debugging","url":"/introduction/debugging#history-controls","content":" The history controls in devtools are useful for checking the state at any point in the game's move history. You can switch between different points in the game using the 'View' button on each history action. While viewing a different point in history, the console object can be used as above to query the game and board states at each step of the game. You can also press 'Revert' to return the game to a previous state and make different actions.  As well, the save states in devtools can be used to record and reload various points in your game to test a variety of conditions. The save state controls in devtools can be accessed by pressing 'Shift-S' while focusing the game frame.  ","version":"Next","tagName":"h2"},{"title":"God mode​","type":1,"pageTitle":"Testing and Debugging","url":"/introduction/debugging#god-mode","content":" God mode is another method of testing, allowing any game element to be moved or modified in any way. It can be enabled by settingGame#godMode to true. It is a powerful but dangerous tool as it can easily allow you to put the game into an invalid state. Use with caution. It can be easier and safer to modify your game rules temporarily to permit testing a scenario that is outside the game rules, by e.g. allowing players to make selections they would not normally be permitted to make. ","version":"Next","tagName":"h2"},{"title":"Development","type":0,"sectionRef":"#","url":"/introduction/development","content":"","keywords":"","version":"Next"},{"title":"Running your new game​","type":1,"pageTitle":"Development","url":"/introduction/development#running-your-new-game","content":" Now that you've created a game, you can run it by doing the following, substituting my-game for the name of your game:  cd my-game npm run dev   Installing dependencies If you elected to not install dependencies you'll need to run npm install before running npm run dev  Once this is running you'll be able to go to http://localhost:8080 to see your new game and start developing.  Devtools  Now that your game is loaded, you'll be presented with something like this in your browser:    From here you'll have access to your game. Any changes you make will be automatically reloaded without needing to refresh this page. Along the top of the devtools you'll have several controls available  Autoswitch players This toggle controls whether to go to the next player after a player has taken their turn. Number of players This controls the number of players available in the lobby. Theme toggle This allow you to see your game in either light or dark mode. Reset seed By default, random numbers will be deterministic in devtools. If you wish to get generate a new random seed, reset the seed with this function. History This pane will contain a complete history of your game as you're developing. You can view or revert pack to a previous state to ease development.  Building  The game is compiled using esbuild. The configuration for the build is contained in esbuild.game.mjs and esbuild.ui.mjs. Feel free to change these files as you like, however, its important than any assets your game relies on be included in your build. As well, when it comes time to publish, it's important than any assets in your game have a unique name as once you've published an asset to a specific path, you cannot overwrite that asset. The default build configuration for ui includes a hash in the file name, so by default, everything is taken care of for you.  ","version":"Next","tagName":"h2"},{"title":"Manifest file​","type":1,"pageTitle":"Development","url":"/introduction/development#manifest-file","content":" Details about your game and how it is built are controlled through the game.v1.json file located at the root of your game. Here you define the minimum and maximum number of players along with the watch paths and build commands for your game. ","version":"Next","tagName":"h2"},{"title":"Class: Space<P, B>","type":0,"sectionRef":"#","url":"/api/classes/Space","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#type-parameters","content":" Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  ","version":"Next","tagName":"h2"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#hierarchy","content":" GameElement&lt;P, B&gt; ↳ Space ↳↳ Board  ","version":"Next","tagName":"h2"},{"title":"Queries​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#queries","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#name","content":" • name: string  Element name, used to distinguish elements. Elements with the same name are generally considered indistibuishable. Names are also used for easy searching of elements.  Inherited from​  GameElement.name  Defined in​  boardzilla-core/src/board/element.ts:269    ","version":"Next","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#player","content":" • Optional player: P  Player with which this element is identified. This does not affect behaviour but will mark the element as mine in queries in the context of this player.  Inherited from​  GameElement.player  Defined in​  boardzilla-core/src/board/element.ts:277    ","version":"Next","tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#all","content":" ▸ all&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds all elements within this element recursively that match the arguments provided.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionclassName\tElementClass&lt;F&gt;\tOptionally provide a class as the first argument as a class filter. This will only match elements which are instances of the provided class ...finders\tElementFinder&lt;F&gt;[]\tAll other parameters are filters. See ElementFinder for more information.  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found. The collection is typed to ElementCollection&lt;className&gt; if one was provided.  Inherited from​  GameElement.all  Defined in​  boardzilla-core/src/board/element.ts:381    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#first","content":" ▸ first&lt;F&gt;(className, ...finders): undefined | F  Finds the first element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  GameElement.first  Defined in​  boardzilla-core/src/board/element.ts:397    ","version":"Next","tagName":"h3"},{"title":"firstN​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#firstn","content":" ▸ firstN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the first n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  GameElement.firstN  Defined in​  boardzilla-core/src/board/element.ts:417    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#last","content":" ▸ last&lt;F&gt;(className, ...finders): undefined | F  Finds the last element within this element recursively that matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  A matching element, if found  Inherited from​  GameElement.last  Defined in​  boardzilla-core/src/board/element.ts:434    ","version":"Next","tagName":"h3"},{"title":"lastN​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#lastn","content":" ▸ lastN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Finds the last n elements within this element recursively that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tnumber of matches className\tElementClass&lt;F&gt;\t- ...finders\tElementFinder&lt;F&gt;[]\t-  Returns​  ElementCollection&lt;F&gt;  An ElementCollection of as many matching elements as can be found, up to n. The collection is typed to ElementCollection&lt;className&gt;if one was provided.  Inherited from​  GameElement.lastN  Defined in​  boardzilla-core/src/board/element.ts:454    ","version":"Next","tagName":"h3"},{"title":"top​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#top","content":" ▸ top&lt;F&gt;(className, ...finders): undefined | F  Alias for first  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  GameElement.top  Defined in​  boardzilla-core/src/board/element.ts:469    ","version":"Next","tagName":"h3"},{"title":"topN​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#topn","content":" ▸ topN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for firstN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.topN  Defined in​  boardzilla-core/src/board/element.ts:483    ","version":"Next","tagName":"h3"},{"title":"bottom​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#bottom","content":" ▸ bottom&lt;F&gt;(className, ...finders): undefined | F  Alias for last  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Inherited from​  GameElement.bottom  Defined in​  boardzilla-core/src/board/element.ts:498    ","version":"Next","tagName":"h3"},{"title":"bottomN​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#bottomn","content":" ▸ bottomN&lt;F&gt;(n, className, ...finders): ElementCollection&lt;F&gt;  Alias for lastN  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypen\tnumber className\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.bottomN  Defined in​  boardzilla-core/src/board/element.ts:512    ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#others","content":" ▸ others&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Finds &quot;sibling&quot; elements (elements that are directly inside the parent of this element) that match the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.others  Defined in​  boardzilla-core/src/board/element.ts:528    ","version":"Next","tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#has","content":" ▸ has&lt;F&gt;(className, ...finders): boolean  Return whether any element within this element recursively matches the arguments provided. See all for parameter details.  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  boolean  Inherited from​  GameElement.has  Defined in​  boardzilla-core/src/board/element.ts:546    ","version":"Next","tagName":"h3"},{"title":"adjacencies​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#adjacencies","content":" ▸ adjacencies&lt;F&gt;(className, ...finders): ElementCollection&lt;F&gt;  Find all elements adjacent based on row/column placement or based on this element having connections created by Space#connectTo. Uses the same parameters as GameElement#all  Type parameters​  Name\tTypeF\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  ElementCollection&lt;F&gt;  Inherited from​  GameElement.adjacencies  Defined in​  boardzilla-core/src/board/element.ts:579    ","version":"Next","tagName":"h3"},{"title":"container​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#container","content":" ▸ container&lt;T&gt;(className?): undefined | T  Returns this elements parent.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionclassName?\tElementClass&lt;T&gt;\tIf provided, searches up the parent tree to find the first matching element. E.g. if a Token is placed on a Card in a players Tableau. calling token.container(Tableau) can be used to find the grandparent.  Returns​  undefined | T  Inherited from​  GameElement.container  Defined in​  boardzilla-core/src/board/element.ts:631    ","version":"Next","tagName":"h3"},{"title":"mine​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#mine","content":" • get mine(): boolean  Whether this element belongs to the player viewing the board. A player is considered to be currently viewing the board if this is called in the context of an action taken by a given player. It is an error to call this method when not in the context of a player action. When querying for elements using ElementFinder such as all and first,mine is available as a search key that accepts a value of true/false  Returns​  boolean  Inherited from​  GameElement.mine  Defined in​  boardzilla-core/src/board/element.ts:684    ","version":"Next","tagName":"h3"},{"title":"atPosition​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#atposition","content":" ▸ atPosition(«destructured»): undefined | GameElement&lt;P, B&gt;  Returns the element at row and column within this element  Parameters​  Name\tType«destructured»\tObject › column\tnumber › row\tnumber  Returns​  undefined | GameElement&lt;P, B&gt;  Inherited from​  GameElement.atPosition  Defined in​  boardzilla-core/src/board/element.ts:938    ","version":"Next","tagName":"h3"},{"title":"closest​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#closest","content":" ▸ closest&lt;F&gt;(className, ...finders): undefined | F  Finds the nearest space connected to this space, measured by distance. Uses the same parameters as GameElement#first  Type parameters​  Name\tTypeF\textends Space&lt;P, B&gt;  Parameters​  Name\tTypeclassName\tElementClass&lt;F&gt; ...finders\tElementFinder&lt;F&gt;[]  Returns​  undefined | F  Defined in​  boardzilla-core/src/board/space.ts:131    ","version":"Next","tagName":"h3"},{"title":"withinDistance​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#withindistance","content":" ▸ withinDistance(distance): ElementCollection&lt;Space&lt;P, B&gt;&gt;  Finds all spaces connected to this space by a distance no more thandistance  Parameters​  Name\tTypedistance\tnumber  Returns​  ElementCollection&lt;Space&lt;P, B&gt;&gt;  Defined in​  boardzilla-core/src/board/space.ts:154  ","version":"Next","tagName":"h3"},{"title":"Structure​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#structure","content":" ","version":"Next","tagName":"h2"},{"title":"board​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#board","content":" • board: B  The Board to which this element belongs  Inherited from​  GameElement.board  Defined in​  boardzilla-core/src/board/element.ts:287    ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#game","content":" • game: Game&lt;P, B&gt;  A reference to the Game  Inherited from​  GameElement.game  Defined in​  boardzilla-core/src/board/element.ts:293    ","version":"Next","tagName":"h3"},{"title":"constructor​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#constructor","content":" • new Space&lt;P, B&gt;(ctx): Space&lt;P, B&gt;  Do not use the constructor directly. Instead Call GameElement#create or GameElement#createMany on the element in which you want to create a new element.  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; = any B\textends Board&lt;P, B&gt; = any  Parameters​  Name\tTypectx\tPartial&lt;ElementContext&lt;P, any&gt;&gt;  Returns​  Space&lt;P, B&gt;  Inherited from​  GameElement.constructor  Defined in​  boardzilla-core/src/board/element.ts:330    ","version":"Next","tagName":"h3"},{"title":"toString​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#tostring","content":" ▸ toString(): string  String used for representng this element in game messages when the object is passed directly, e.g. when taking the choice directly from a chooseOnBoard choice.  Returns​  string  Inherited from​  GameElement.toString  Defined in​  boardzilla-core/src/board/element.ts:361    ","version":"Next","tagName":"h3"},{"title":"adjacentTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#adjacentto","content":" ▸ adjacentTo(element): boolean  If this element is adjacent to some other element, based on row/column placement or based on this element having a connection created by Space#connectTo.  Parameters​  Name\tTypeelement\tGameElement&lt;P, B&gt;  Returns​  boolean  Inherited from​  GameElement.adjacentTo  Defined in​  boardzilla-core/src/board/element.ts:562    ","version":"Next","tagName":"h3"},{"title":"setOrder​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#setorder","content":" ▸ setOrder(order): void  Set this class to use a different ordering style.  Parameters​  Name\tType\tDescriptionorder\tundefined | &quot;normal&quot; | &quot;stacking&quot;\tordering style - &quot;normal&quot;: Elements placed into this element are put at the end of the list (default) - &quot;stacking&quot;: Elements placed into this element are put at the beginning of the list. This is prefered for elements that stack. E.g. if a stack of cards has order set to stacking the first method will return the last card placed in the stack, rather than the first one placed in the stack.  Returns​  void  Inherited from​  GameElement.setOrder  Defined in​  boardzilla-core/src/board/element.ts:619    ","version":"Next","tagName":"h3"},{"title":"isEmpty​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#isempty","content":" ▸ isEmpty(): boolean  Returns whether this element has no elements placed within it.  Returns​  boolean  Inherited from​  GameElement.isEmpty  Defined in​  boardzilla-core/src/board/element.ts:642    ","version":"Next","tagName":"h3"},{"title":"sortBy​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#sortby","content":" ▸ sortBy&lt;E&gt;(key, direction?): ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Sorts the elements directly contained within this element by some Sorter.  Type parameters​  Name\tTypeE\textends GameElement&lt;P, B&gt;  Parameters​  Name\tTypekey\tSorter&lt;E&gt; | Sorter&lt;E&gt;[] direction?\t&quot;desc&quot; | &quot;asc&quot;  Returns​  ElementCollection&lt;GameElement&lt;P, B&gt;&gt;  Inherited from​  GameElement.sortBy  Defined in​  boardzilla-core/src/board/element.ts:650    ","version":"Next","tagName":"h3"},{"title":"shuffle​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#shuffle","content":" ▸ shuffle(): void  Re-orders the elements directly contained within this element randomly.  Returns​  void  Inherited from​  GameElement.shuffle  Defined in​  boardzilla-core/src/board/element.ts:658    ","version":"Next","tagName":"h3"},{"title":"owner​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#owner","content":" • get owner(): undefined | P  The player that owns this element, or the first element that contains this element searching up through the parent hierarchy. This is related to, but different than player. E.g. if a standard playing card is in a player's hand, typically the hand.player will be assigned to that player but the card itself would not have a player. In this case the card.owner() will equal the player in whose hand the card is placed.  Returns​  undefined | P  Inherited from​  GameElement.owner  Defined in​  boardzilla-core/src/board/element.ts:671    ","version":"Next","tagName":"h3"},{"title":"createMany​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#createmany","content":" ▸ createMany&lt;T&gt;(n, className, name, attributes?): ElementCollection&lt;T&gt;  Create n elements inside this element of the same class. This can only be called during the game setup (see createGame. Any game elements that are required must be created before the game starts. Elements that only appear later in the game can be created inside the Board#pileor made invisible.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionn\tnumber\tNumber to create className\tElementClass&lt;T&gt;\tClass to create. This class must be included in the elementClasses in createGame. name\tstring\tSets name attributes?\tPartial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt; | (n: number) =&gt; Partial&lt;Pick&lt;T, &quot;name&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot; | { [K in string | number | symbol]: K extends keyof GameElement&lt;any, any&gt; ? never : T[K] extends Function ? never : K }[keyof T]&gt;&gt;\tSets any attributes of the class that are defined in your own class that extend Space, Piece, or Board. Can also include player. If a function is supplied here, a single number argument will be passed with the number of the added element, starting with 1.  Returns​  ElementCollection&lt;T&gt;  Inherited from​  GameElement.createMany  Defined in​  boardzilla-core/src/board/element.ts:846    ","version":"Next","tagName":"h3"},{"title":"isDescendantOf​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#isdescendantof","content":" ▸ isDescendantOf(el): boolean  Whether this element has the given element in its parent hierarchy  Parameters​  Name\tTypeel\tGameElement&lt;any, any&gt;  Returns​  boolean  Inherited from​  GameElement.isDescendantOf  Defined in​  boardzilla-core/src/board/element.ts:946    ","version":"Next","tagName":"h3"},{"title":"onEnter​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#onenter","content":" ▸ onEnter&lt;T&gt;(type, callback): void  Attach a callback to this space for every element that enters or is created within.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptiontype\tElementClass&lt;T&gt;\tthe class of element that will trigger this callback callback\t(el: T) =&gt; void\tCallback will be called each time an element enters, with the entering element as the only argument.  Returns​  void  Example  deck.onEnter(Card, card =&gt; card.hideFromAll()) // card placed in the deck are automatically turned face down   Defined in​  boardzilla-core/src/board/space.ts:50    ","version":"Next","tagName":"h3"},{"title":"onExit​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#onexit","content":" ▸ onExit&lt;T&gt;(type, callback): void  Attach a callback to this space for every element that is moved out of this space.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tType\tDescriptiontype\tElementClass&lt;T&gt;\tthe class of element that will trigger this callback callback\t(el: T) =&gt; void\tCallback will be called each time an element exits, with the exiting element as the only argument.  Returns​  void  Example  deck.onExit(Card, card =&gt; card.showToAll()) // cards drawn from the deck are automatically turned face up   Defined in​  boardzilla-core/src/board/space.ts:66    ","version":"Next","tagName":"h3"},{"title":"connectTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#connectto","content":" ▸ connectTo(space, distance?): Space&lt;P, B&gt;  Make this space adjacent with another space for the purposes of adjacency and path-finding functions. Using connectTo on a space creates a custom graph of adjacency for the container of this space that overrides the standard adjacency based on the built-in row/column placement.  Parameters​  Name\tType\tDefault value\tDescriptionspace\tSpace&lt;P, B&gt;\tundefined\tSpace to connect to distance\tnumber\t1\tAdd a custom distance to this connection for the purposes of distance-measuring.  Returns​  Space&lt;P, B&gt;  Defined in​  boardzilla-core/src/board/space.ts:89    ","version":"Next","tagName":"h3"},{"title":"distanceTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#distanceto","content":" ▸ distanceTo(space): undefined | number  Finds the shortest distance to another space, traveling thru multiple connections  Parameters​  Name\tType\tDescriptionspace\tSpace&lt;P, B&gt;\tSpace to measure distance to  Returns​  undefined | number  shortest distance measured by the distance values added to each connection in connectTo  Defined in​  boardzilla-core/src/board/space.ts:111  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#ui","content":" ","version":"Next","tagName":"h2"},{"title":"layout​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#layout","content":" ▸ layout&lt;T&gt;(this, applyTo, attributes): void  Apply a layout to some of the elements directly contained within this element. See also ElementCollection#layout  Type parameters​  Name\tTypeT\textends Space&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionthis\tT\t- applyTo\tstring | GameElement&lt;any, any&gt; | ElementClass&lt;any&gt; | ElementCollection&lt;GameElement&lt;any, any&gt;&gt;\tWhich elements this layout applies to. Provided value can be: - A specific GameElement - The name of an element - A specific set of elements (ElementCollection) - A class of elements If multiple layout declarations would apply to the same element, only one will be used. The order of specificity is as above. If a class is used and mutiple apply, the more specific class will be used. attributes\tPartial&lt;LayoutAttributes&lt;T&gt;&gt;\tA list of attributes describing the layout. All units of measurement are percentages of this elements width and height from 0-100, unless otherwise noted (See margin and gap)  Returns​  void  Inherited from​  GameElement.layout  Defined in​  boardzilla-core/src/board/element.ts:1113    ","version":"Next","tagName":"h3"},{"title":"appearance​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#appearance","content":" ▸ appearance(appearance): void  Define the appearance of this element. Any values provided override previous ones. See also ElementCollection#appearance  Parameters​  Name\tType\tDescriptionappearance\tObject\tPossible values are: appearance.className?\tstring\tA class name to add to the dom element appearance.render?\tfalse | (el: Space&lt;P, B&gt;) =&gt; null | Element\tA function that takes this element as its only argument and returns JSX for the element. See /styling.md for more on usage. appearance.aspectRatio?\tnumber\tThe aspect ratio for this element. This value is a ratio of width over height. All layouts defined in layout will respect this aspect ratio. appearance.effects?\t{ attributes: Partial&lt;Pick&lt;Space&lt;P, B&gt;, undefined | &quot;name&quot; | &quot;_eventHandlers&quot; | &quot;player&quot; | &quot;row&quot; | &quot;column&quot;&gt;&gt; ; className: string }[]\tProvides a CSS class that will be applied to this element if its attributes change to match the provided ones. appearance.info?\tboolean | (el: Space&lt;P, B&gt;) =&gt; null | boolean | Element\tReturn JSX for more info on this element. If returning true, an info modal will be available for this element but with only the rendered element and no text appearance.connections?\tObject\tIf the elements immediately within this element are connected using Space#connectTo, this makes those connections visible as connecting lines. Providing a label will place a label over top of this line by calling the provided function with the distance of the connection specified in Space#connectTo and using the retured JSX. If labelScale is provided, the label is scaled by this amount. appearance.connections.thickness?\tnumber\t- appearance.connections.style?\t&quot;solid&quot; | &quot;double&quot;\t- appearance.connections.color?\tstring\t- appearance.connections.fill?\tstring\t- appearance.connections.label?\t(__namedParameters: { distance: number ; to: Space&lt;any, any&gt; ; from: Space&lt;any, any&gt; }) =&gt; ReactNode\t- appearance.connections.labelScale?\tnumber\t-  Returns​  void  Inherited from​  GameElement.appearance  Defined in​  boardzilla-core/src/board/element.ts:1667  ","version":"Next","tagName":"h3"},{"title":"Visibility​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#visibility","content":" ","version":"Next","tagName":"h2"},{"title":"showToAll​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#showtoall","content":" ▸ showToAll(): void  Show this element to all players  Returns​  void  Inherited from​  GameElement.showToAll  Defined in​  boardzilla-core/src/board/element.ts:693    ","version":"Next","tagName":"h3"},{"title":"showOnlyTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#showonlyto","content":" ▸ showOnlyTo(player): void  Show this element only to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  void  Inherited from​  GameElement.showOnlyTo  Defined in​  boardzilla-core/src/board/element.ts:701    ","version":"Next","tagName":"h3"},{"title":"showTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#showto","content":" ▸ showTo(...player): void  Show this element to the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  GameElement.showTo  Defined in​  boardzilla-core/src/board/element.ts:714    ","version":"Next","tagName":"h3"},{"title":"hideFromAll​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#hidefromall","content":" ▸ hideFromAll(): void  Hide this element from all players  Returns​  void  Inherited from​  GameElement.hideFromAll  Defined in​  boardzilla-core/src/board/element.ts:729    ","version":"Next","tagName":"h3"},{"title":"hideFrom​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#hidefrom","content":" ▸ hideFrom(...player): void  Hide this element from the given players without changing it's visibility to any other players.  Parameters​  Name\tType...player\tnumber[] | P[]  Returns​  void  Inherited from​  GameElement.hideFrom  Defined in​  boardzilla-core/src/board/element.ts:738    ","version":"Next","tagName":"h3"},{"title":"isVisibleTo​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#isvisibleto","content":" ▸ isVisibleTo(player): boolean  Returns whether this element is visible to the given player  Parameters​  Name\tTypeplayer\tnumber | P  Returns​  boolean  Inherited from​  GameElement.isVisibleTo  Defined in​  boardzilla-core/src/board/element.ts:756    ","version":"Next","tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#isvisible","content":" ▸ isVisible(): boolean  Returns whether this element is visible to the current player. Can only be called when in a player context, during an action taken by a player or while the board is viewed by a given player.  Returns​  boolean  Inherited from​  GameElement.isVisible  Defined in​  boardzilla-core/src/board/element.ts:772    ","version":"Next","tagName":"h3"},{"title":"revealWhenHidden​","type":1,"pageTitle":"Class: Space<P, B>","url":"/api/classes/Space#revealwhenhidden","content":" ▸ revealWhenHidden&lt;T&gt;(this, ...attrs): void  Provide list of attributes that remain visible even when these elements are not visible to players. E.g. In a game with multiple card decks with different backs, identified by Card#deck, the identity of the card when face-down is hidden, but the deck it belongs to is not, since the card art on the back would identify the deck. In this case callingCard.revealWhenHidden('deck') will cause all attributes other than 'deck' to be hidden when the card is face down, while still revealing which deck it is.  Type parameters​  Name\tTypeT\textends GameElement&lt;any, any&gt;  Parameters​  Name\tTypethis\tElementClass&lt;T&gt; ...attrs\tstring &amp; keyof T[]  Returns​  void  Inherited from​  GameElement.revealWhenHidden  Defined in​  boardzilla-core/src/board/element.ts:788 ","version":"Next","tagName":"h3"},{"title":"Publishing","type":0,"sectionRef":"#","url":"/publishing/publish","content":"","keywords":"","version":"Next"},{"title":"Assets for your game​","type":1,"pageTitle":"Publishing","url":"/publishing/publish#assets-for-your-game","content":" Your new game requires some metadata and assets before it can be published. Once you've submitted your game you'll be directed to a page on boardzilla.io to finish game submission. Write here once this process is cleaned up. ","version":"Next","tagName":"h2"},{"title":"Board Structure","type":0,"sectionRef":"#","url":"/game/board","content":"","keywords":"","version":"Next"},{"title":"Subclassing​","type":1,"pageTitle":"Board Structure","url":"/game/board#subclassing","content":" Typically, a game will declare a few classes for your various game pieces, e.g. Cards, Tokens and the like. Each of these will be a subclass of Piece. These subclasses can add properties and methods that you can use in the rules of game. E.g. a Cardclass, that might have suit and number properties, and special methods likeisTrump().  Example Card class export class Card extends Piece { suit: &quot;S&quot; | &quot;H&quot; | &quot;D&quot; | &quot;C&quot;; number: number; isTrump() { return this.suit === this.game.trump; } }   Spaces can be subclassed as well. This is less common, but helpful if you have several spaces of a particular type that have special properties or behavior.  Defining subclasses like this also makes it easy to customize their appearance later and give the different classes of Pieces entirely different visuals.  ","version":"Next","tagName":"h2"},{"title":"Querying​","type":1,"pageTitle":"Board Structure","url":"/game/board#querying","content":" Accessing parts of the board is done using the Query API on the board and the spaces and pieces you add. The two most important methods are:  all Search the tree recursively and return all matchesfirst Search the tree recursively and return only the first match  In the example tree above, calling board.all(Piece) would return the two cards at the bottom of the tree. If we used the Card class above, we could also have used board.all(Card) to return the same thing but typed correctly to the Card class. We can then also search by name, e.g. board.first(Card, '2C') to return the Card named '2C', or add properties to the search, e.g. board.first(Card, { number: 1 }) to return the first ace in the game.  Any methods that return lists of elements, like all, actually return anElementCollection. This is an Array-like class that can be treated like an array but also contains many other methods.  first can return undefined Note that first can return undefined if no matching element is found. When usingfirst, you will frequently add ! or ? depending on the situation, which is a good reminder to not assume that a piece is always where you expect, e.g. // flip the top Card of the deck, if there are any $.deck.first(Card)?.showToAll();   global $ For convenience, all uniquely named spaces are also accessible from a global $object that contains all spaces by name, e.g. $.deck.  There are many more methods and options for finding particular game elements. See the API documentation for more.  ","version":"Next","tagName":"h2"},{"title":"Creation​","type":1,"pageTitle":"Board Structure","url":"/game/board#creation","content":" Spaces and pieces are created using thecreate method. All Game Elements have a class and a name. The Class can be one of the based classes or one of the subclasses you've declared. The name can be any string. It is used for searches, determining uniqueness, and also appears in the HTML for CSS targetting. e.g.:   const tableau = board.create(Space, &quot;tableau&quot;); const hand = tableau.create(Space, &quot;hand&quot;); hand.create(Card, &quot;2C&quot;);   You can also specify the properties during their creation with a 3rd argument:   hand.create(Card, '2C', { suit: 'C', number: 2 }); hand.create(Card, 'JS', { suit: 'S', number: 1 1});   ","version":"Next","tagName":"h2"},{"title":"Ownership​","type":1,"pageTitle":"Board Structure","url":"/game/board#ownership","content":" All Game Elements also have an optional player property built-in. Setting this property assigns the element to a Player. This is useful for pieces and spaces that permanently belong to them, like their player mat, or their unique player token. These elements can be created and queried using the player property.   // create 2 tableaus for each player board.create(Space, &quot;tableau&quot;, { player: game.players[0] }); board.create(Space, &quot;tableau&quot;, { player: game.players[1] }); // get player 1's tableau board.first(Space, &quot;tableau&quot;, { player: game.players[0] });   Any elements that are contained within an element assigned to a player are also considered to be &quot;owned&quot; by that player, e.g. a card in their hand. These elements can be queried using the owner property.   // get player 1's cards board.all(Card { owner: game.players[0] });   player vs owner Remember the difference between player and owner. They are related but distinct. player is a property that can be set that assigns a game element to that player. It does not change automatically as a piece moves, so must be set again if you wish it to be assigned to a new player.owner is a read-only property that indicates if the piece currently resides in a space assigned to a player. As the piece moves this property is automatically updated to indicate who the current owner is. A Card might be owned by a player while they hold it, but if it moved to another player's hand, then the owner would be updated to reflect that change.  The Player object also conveniently has methods for retrieving these elements:my and allMy for retrieving one or many elements respectively   // get player 1's tableau game.players[0].my(&quot;tableau&quot;); // get player 1's cards game.players[0].allMy(Card);   ","version":"Next","tagName":"h2"},{"title":"Visibility​","type":1,"pageTitle":"Board Structure","url":"/game/board#visibility","content":" All elements are visible to all players by default. Often a game will require that pieces are visible only to some players and hidden from others. In Boardzilla, &quot;hiding&quot; a Game Element means that the properties of that element are no longer visible. For example if one of our example Card instances was flipped over, the player would be able to see that it was an instance of theCard class, but card.suit and card.number would be undefined.  This can be accomplished in a number of ways, the simplest beinghideFromAll. There are many other methods for managing visibilty. It may also be that some properties should be visible even when the element is hidden, e.g. a Card may belong to different decks, and this is represented byCard#deck. If the card back art indicates what deck it belongs to, then this property should be revealed even if the card is hidden. You can set these properties with the static methodrevealWhenHidden, e.g.:   Card.revealWhenHidden(&quot;deck&quot;);   ","version":"Next","tagName":"h2"},{"title":"Movement​","type":1,"pageTitle":"Board Structure","url":"/game/board#movement","content":" Pieces can be created in a particular place on the board, but will move around as players take their actions. There are several ways to do this but the simplest is putInto.   // discard a card card.putInto($.discard); // draw the top card of the deck into the field $.deck.first(Card).putInto($.field);   As cards move from space to space, you may want to change their properties. These can be done automatically by adding event handlers to spaces. The most common type is to have spaces that change the visibility of their elements. E.g. when a card enters the deck, it should automatically be turned face down, or, when it enters a player's hand, it should be visible only to that player. This can be done with the onEnter event handler. For example:   // the deck's cards are always face down $.deck.onEnter(Card, card =&gt; card.hideFromAll(); // the player's hand always reveals their cards to `player` const hand = board.create(Space, 'hand', { player }); hand.onEnter(Card, card =&gt; card.showTo(player));   There is also a corresponding onExit handler.  ","version":"Next","tagName":"h2"},{"title":"The pile and removing pieces​","type":1,"pageTitle":"Board Structure","url":"/game/board#the-pile-and-removing-pieces","content":" There is a special invisible region of the board called the &quot;pile&quot; available atboard.pile. This is the holding area for any pieces that are not in use. The pile is never rendered, but is always available to the API for querying. Pieces are never created or destroyed once the game has started, and instead are simply moved to or retrieved from the pile.  Remove a piece (move it to the pile) simply by calling itsremove method, or for a list of items, the ElementCollection#remove can be used. For example, to remove all cards from the deck that are lower than 5, we can say:   $.deck.all(Card, (card) =&gt; card.number &lt; 5).remove();   to put all the unused cards from the pile into the deck, we would say:   board.pile.all(Card).putInto($.deck);  ","version":"Next","tagName":"h2"},{"title":"@boardzilla/core","type":0,"sectionRef":"#","url":"/api/modules","content":"","keywords":"","version":"Next"},{"title":"Classes​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#classes","content":" ActionBoardDieElementCollectionGameElementPieceSpaceGamePlayerCollectionPlayer  ","version":"Next","tagName":"h2"},{"title":"Actions​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#actions","content":" ","version":"Next","tagName":"h2"},{"title":"Argument​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#argument","content":" Ƭ Argument&lt;P&gt;: SingleArgument&lt;P&gt; | SingleArgument&lt;P&gt;[]  An argument that can be added to an Action. Each value is chosen by player or in some cases passed from a previous action. Arguments can be:  a numbera stringa booleana GameElementa Playeran array of one these in the case of a multi-choice selection  Type parameters​  Name\tTypeP\textends Player  Defined in​  boardzilla-core/src/action/action.ts:29    ","version":"Next","tagName":"h3"},{"title":"ActionStub​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#actionstub","content":" Ƭ ActionStub&lt;P&gt;: Object  A follow-up action  Type parameters​  Name\tTypeP\textends Player  Type declaration​  Name\tType\tDescriptionname\tstring\tThe name of the action, as defined in {@link Game#defineactions}. player?\tP\tThe player to take this action, if different than the current player prompt?\tstring\tAction prompt. If specified, overrides the action.prompt in {@link Game#defineactions}. description?\tstring\tDescription of taking the action from a 3rd person perspective, e.g. &quot;choosing a card&quot;. The string will be automatically prefixed with the player name and verb. If specified, will be used to convey to non-acting players what actions are happening. args?\tRecord&lt;string, Argument&lt;P&gt;&gt;\tAn object containing arguments to be passed to the follow-up action. This is useful if there are multiple ways to trigger this follow-up that have variations.  Defined in​  boardzilla-core/src/action/action.ts:35    ","version":"Next","tagName":"h3"},{"title":"Board​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#board","content":" ","version":"Next","tagName":"h2"},{"title":"Sorter​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#sorter","content":" Ƭ Sorter&lt;T&gt;: keyof T | (e: T) =&gt; number | string  Either the name of a property of the object that can be lexically sorted, or a function that will be called with the object to sort and must return a lexically sortable value.  Type parameters​  NameT  Defined in​  boardzilla-core/src/board/element-collection.ts:16    ","version":"Next","tagName":"h3"},{"title":"ElementFinder​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#elementfinder","content":" Ƭ ElementFinder&lt;T&gt;: (e: T) =&gt; boolean | ElementAttributes&lt;T&gt; &amp; { mine?: boolean ; owner?: T[&quot;player&quot;] ; empty?: boolean ; adjacent?: boolean ; withinDistance?: number } | string  A query filter can be one of 3 different forms:  string: will match elements with this namefunction: A function that accept an element as its argument and returns a boolean indicating whether it is a match, similar to Array#filter.object: will match elements whose properties match the provided properties. For example, deck.all(Card, {suit: 'H'}) would match allCard elements in deck with a suit property equal to &quot;H&quot;. There are some special property names allowed here: mine: true/false whether this element belongs to the player in whose context the query is madeempty true/false whether this element is emptyadjacent true/false whether this element is adjacent by a connection to the element on which the query method was called. E.g. france.other(Country, {adjacent: true}) will matchCountry elements that are connected to france by Space#connectTowithinDistance Similar to adjacent but uses the provided number to determine if a connection is possible between elements whose cost is not greater than the provided value  Type parameters​  Name\tTypeT\textends GameElement = any  Defined in​  boardzilla-core/src/board/element-collection.ts:41    ","version":"Next","tagName":"h3"},{"title":"createBoardClasses​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#createboardclasses","content":" ▸ createBoardClasses&lt;P, B&gt;(): Object  Returns board classes for game with the correct types for board and player.  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; B\textends Board&lt;P, B&gt;  Returns​  Object  Name\tTypeGameElement\t(ctx: Partial&lt;ElementContext&lt;P, any&gt;&gt;) =&gt; GameElement&lt;P, B&gt; GameElement.prototype\tGameElement&lt;any, any&gt; GameElement.isGameElement\tboolean GameElement.visibleAttributes\tundefined | string[] GameElement.revealWhenHidden\t[object Object] Space\t(ctx: Partial&lt;ElementContext&lt;P, any&gt;&gt;) =&gt; Space&lt;P, B&gt; Space.prototype\tSpace&lt;any, any&gt; Space.isGameElement\tboolean Space.visibleAttributes\tundefined | string[] Space.revealWhenHidden\t[object Object] Piece\t(ctx: Partial&lt;ElementContext&lt;P, any&gt;&gt;) =&gt; Piece&lt;P, B&gt; Piece.prototype\tPiece&lt;any, any&gt; Piece.isGameElement\tboolean Piece.visibleAttributes\tundefined | string[] Piece.revealWhenHidden\t[object Object] Die\t(ctx: Partial&lt;ElementContext&lt;P, any&gt;&gt;) =&gt; Die&lt;P, B&gt; Die.prototype\tDie&lt;any, any&gt; Die.isGameElement\tboolean Die.visibleAttributes\tundefined | string[] Die.revealWhenHidden\t[object Object]  Example  const {Space, Piece, Die} = createBoardClasses&lt;MyGamePlayer, MyGameBoard&gt;();   Defined in​  boardzilla-core/src/index.ts:39  ","version":"Next","tagName":"h3"},{"title":"Core​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#core","content":" ","version":"Next","tagName":"h2"},{"title":"createGame​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#creategame","content":" ▸ createGame&lt;P, B&gt;(playerClass, boardClass, gameCreator): SetupFunction&lt;P, B&gt;  Create your game  Type parameters​  Name\tTypeP\textends Player&lt;P, B&gt; B\textends Board&lt;P, B&gt;  Parameters​  Name\tType\tDescriptionplayerClass\tObject\tYour player class. This must extend Player. If you do not need any custom Player attributes or behaviour, simply put Player here. This becomes the P type generic used throughout Boardzilla. boardClass\tElementClass&lt;B&gt;\tYour board class. This must extend Board. If you do not need any custom Board attributes or behaviour, simply put Board here. This becomes the B type generic used throughout Boardzilla. gameCreator\t(game: Game&lt;P, B&gt;) =&gt; void\t-  Returns​  SetupFunction&lt;P, B&gt;  Defined in​  boardzilla-core/src/index.ts:82    ","version":"Next","tagName":"h3"},{"title":"Flow​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#flow","content":" ","version":"Next","tagName":"h2"},{"title":"union​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#union","content":" ▸ union(...queries): ElementCollection  Returns an ElementCollection by combining a list of GameElement's or ElementCollection's,  Parameters​  Name\tType...queries\t(undefined | GameElement&lt;any, any&gt; | ElementCollection&lt;any&gt;)[]  Returns​  ElementCollection  Defined in​  boardzilla-core/src/board/utils.ts:10    ","version":"Next","tagName":"h3"},{"title":"Do​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#do","content":" • Const Do: Object  Functions for interrupting flows  These functions can be called from anywhere inside a looping flow (loop, whileLoop, forLoop, forEach, eachPlayer) to interrupt the flow, with each one resuming the flow differently.  Do.break causes the flow to exit loop and resume after the loop, like thebreak keyword in Javascript.  Do.continue causes the flow to skip the rest of the current loop iteration and restart the loop at the next iteration, like the continue keyword in Javascript.  Do.repeat causes the flow to skip the rest of the current loop iteration and restart the same iteration of the loop.  Example  // each player can shout as many times as they like eachPlayer({ name: 'player', do: ( playerActions({ actions: [ { name: 'shout', do: Do.repeat }, 'pass' ]}), ]}); // each player can decide to shout, and if so, may subsequently apologize eachPlayer({ name: 'player', do: [ playerActions({ actions: [ { name: 'shout', do: Do.continue }, // if shouting, skip to the next player 'pass' ]}), playerActions({ actions: [ 'apologize', 'pass' ] }), ]}); // each player can take a card but if the card is a match, it ends this round eachPlayer({ name: 'player', do: ( playerActions({ actions: [ { name: 'takeCard', do: ({ takeCard }) =&gt; if (takeCard.card.isMatch()) Do.break() }, 'pass' ]}), ]});   Type declaration​  Name\tTyperepeat\t() =&gt; LoopInterruptControl continue\t() =&gt; LoopInterruptControl break\t() =&gt; LoopInterruptControl  Defined in​  boardzilla-core/src/flow/enums.ts:46    ","version":"Next","tagName":"h3"},{"title":"FlowArguments​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#flowarguments","content":" Ƭ FlowArguments: Record&lt;string, any&gt;  Several flow methods accept an argument of this type. This is an object containing keys for every flow function that the game is in the middle of which recorded a value to the current scope. Functions that can add these values are forLoop, forEach, switchCase and playerActions. The name given to these functions will be the key used in the FlowArguments and its value will be the value of the current loop for loops, or the test value for switchCase, or the arguments to the action taken for playerActions.  Example  forLoop({ name: 'x', // x is declared here initial: 0, next: x =&gt; x + 1, while: x =&gt; x &lt; 3, do: forLoop({ name: 'y', initial: 0, next: y =&gt; y + 1, while: y =&gt; y &lt; 2, do: ({ x, y }) =&gt; { // x is available here as the value of the outer loop // and y will be the value of the inner loop } }) })   Defined in​  boardzilla-core/src/flow/flow.ts:45    ","version":"Next","tagName":"h3"},{"title":"FlowStep​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#flowstep","content":" Ƭ FlowStep&lt;P&gt;: Flow&lt;P&gt; | (args: FlowArguments) =&gt; any  FlowStep's are provided to the game and to all flow function to provide further flow logic inside the given flow. Any of the follow qualifies:  a plain function that accepts FlowArgumentsone of the Game#flowCommands  Type parameters​  Name\tTypeP\textends Player  Defined in​  boardzilla-core/src/flow/flow.ts:54    ","version":"Next","tagName":"h3"},{"title":"FlowDefinition​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#flowdefinition","content":" Ƭ FlowDefinition&lt;P&gt;: FlowStep&lt;P&gt; | FlowStep&lt;P&gt;[]  FlowDefinition's are provided to the game and to all flow function to provide further flow logic inside the given flow. Any of the follow qualifies:  a plain function that accepts FlowArgumentsone of the Game#flowCommandsan array of any combination of the above  Type parameters​  Name\tTypeP\textends Player  Defined in​  boardzilla-core/src/flow/flow.ts:64    ","version":"Next","tagName":"h3"},{"title":"playerActions​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#playeractions","content":" ▸ playerActions&lt;P&gt;(options): default&lt;P&gt;  Stop the flow and wait for a player to act.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name?\tstring\tA unique name for this player action. If provided, this can be used for the UI to determine placement of messages for this action in Board#layoutStep. options.players?\tP[] | (args: Record&lt;string, any&gt;) =&gt; P[]\tWhich players can perform this action, if multiple. options.player?\tP | (args: Record&lt;string, any&gt;) =&gt; P\tWhich player can perform this action. If not provided, this defaults to the current player options.actions\t(string | { name: string ; prompt?: string | (args: Record&lt;string, any&gt;) =&gt; string ; args?: Record&lt;string, Argument&lt;P&gt;&gt; | (args: Record&lt;string, any&gt;) =&gt; Record&lt;string, Argument&lt;P&gt;&gt; ; do?: FlowDefinition&lt;P&gt; })[]\tAn array of possible actions. Each action can be either a string or on object. If a string, it is the name of the action as defined in Game#defineActions. If an object, it consists of the following keys: name: the name of the action do: a further FlowDefintion for the game to run if this action is taken. This can contain any number of nested Flow functions. args: args to pass to the action, or function returning those args. If provided this pre-selects arguments to the action that the player does not select themselves. Also see game#action and game#followUp. prompt: a string prompt, or function returning a string. If provided this overrides the prompt defined in the action. This can be useful if the same action should prompt differently at different points in the game options.prompt?\tstring | (args: Record&lt;string, any&gt;) =&gt; string\tA prompting message for the player taking the action to decide between their choices. May be a string or a function accepting FlowArguments options.description?\tstring\tA description of this step from a 3rd person perspective, e.g. &quot;choosing a card&quot;. The string will be automatically prefixed with the player name and verb. If specified, will be used to convey to non-acting players what step is happening. options.optional?\tstring | (args: Record&lt;string, any&gt;) =&gt; string\tIf a string is passed, this becomes a prompt players can use to 'pass' this step, performing no action and letting the flow proceed. May be a string or a function accepting FlowArguments options.skipIf?\t&quot;always&quot; | &quot;never&quot; | &quot;only-one&quot;\tOne of 'always', 'never' or 'only-one' (Default 'always'). only-one: If there is only valid choice in the choices given, the game will skip this choice, prompting the player for subsequent choices, if any, or completing the action otherwise. always: Rather than present this choice directly, the player will be prompted with choices from the next choice in each action here, essentially expanding the choices ahead of time to save the player a step. never: Always present this choice, even if the choice is forced   Returns​  default&lt;P&gt;  Defined in​  boardzilla-core/src/flow/index.ts:86    ","version":"Next","tagName":"h3"},{"title":"whileLoop​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#whileloop","content":" ▸ whileLoop&lt;P&gt;(options): default&lt;P&gt;  Create a loop that continues until some condition is true. This functions like a standard while loop.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.while\t(a: FlowArguments) =&gt; boolean\tEither a simple boolean value or a condition function that must return true for the loop to continue. If this evaluates to false when the loop begins, it will be skipped entirely. The condition will be evaluated at the start of each loop to determine whether it should continue. options.do\tFlowDefinition&lt;P&gt;\tThe part that gets repeated. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. The functions Do.repeat, Do.break or Do|Do.continue, can also be used here to cause the current loop to be interupted.  Returns​  default&lt;P&gt;  Example  whileLoop({ while: () =&gt; !bag.isEmpty(), do: ( playerActions({ actions: { takeOneFromBag: null, }}), )});   Defined in​  boardzilla-core/src/flow/index.ts:112    ","version":"Next","tagName":"h3"},{"title":"loop​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#loop","content":" ▸ loop&lt;P&gt;(...block): default&lt;P&gt;  Create a loop that continues until Do.break is called  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType...block\tFlowStep&lt;P&gt;[]  Returns​  default&lt;P&gt;  Example  loop(playerActions({ actions: [ 'takeOneFromBag', { name: 'done', do: Do.break } ]}));   Defined in​  boardzilla-core/src/flow/index.ts:131    ","version":"Next","tagName":"h3"},{"title":"forLoop​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#forloop","content":" ▸ forLoop&lt;P, T&gt;(options): default&lt;P, T&gt;  Create a loop that sets a value and continues until that value meets some condition. This functions like a standard for loop.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt; T\tSerializable&lt;P&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name\tstring\tThe current value of the loop variable will be added to the FlowArguments under a key with this name. options.initial\tT | (a: FlowArguments) =&gt; T\tThe initial value of the loop variable options.next\t(a: T) =&gt; T\tA function that will be run on each loop and must return the new value of the loop variable options.while\t(a: T) =&gt; boolean\tA condition function that must return true for the loop to continue. If this evaluates to false when the loop begins, it will be skipped entirely. The condition will be evaluates at the start of each loop to determine whether it should continue. options.do\tFlowDefinition&lt;P&gt;\tThe part that gets repeated. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. The functions Do.repeat, Do.break or Do|Do.continue, can also be used here to cause the current loop to be interupted.  Returns​  default&lt;P, T&gt;  Example  forLoop({ name: 'x', initial: 0, next: x =&gt; x + 1, while: x =&gt; x &lt; 3, do: ({ x }) =&gt; { // do something 3 times } })   Defined in​  boardzilla-core/src/flow/index.ts:169    ","version":"Next","tagName":"h3"},{"title":"forEach​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#foreach","content":" ▸ forEach&lt;P, T&gt;(options): default&lt;P, T&gt;  Create a loop that iterates over an array. This functions like a standardArray#forEach method.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt; T\textends undefined | null | string | number | boolean | Player&lt;any, any&gt; | GameElement&lt;P, any&gt; | Serializable&lt;P&gt;[] | { [key: string]: Serializable&lt;P&gt;; }  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name\tstring\tThe current value of collection will be added to the FlowArguments under a key with this name. options.collection\t(a: FlowArguments) =&gt; T[] | T[]\tA collection of values to loop over. This can be declared as an array or as a method that accept the FlowArguments used up to this point in the flow and return the collection Array. This expression is evaluated only once at the start of the loop. options.do\tFlowDefinition&lt;P&gt;\tThe part that gets repeated. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. The functions Do.repeat, Do.break or Do|Do.continue, can also be used here to cause the current loop to be interupted.  Returns​  default&lt;P, T&gt;  Example  forEach({ name: 'card', collection: () =&gt; deck.all(Card), do: [ // show each card from the deck to player in turn ({ card }) =&gt; card.showTo(player), playerActions({ actions: [ 'chooseCard', 'pass', ]}), ]});   Defined in​  boardzilla-core/src/flow/index.ts:201    ","version":"Next","tagName":"h3"},{"title":"eachPlayer​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#eachplayer","content":" ▸ eachPlayer&lt;P&gt;(options): default&lt;P&gt;  Create a loop that iterates over each player. This is the same as forEach with the additional behaviour of setting the current player on each iteration of the loop.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name\tstring\tThe current player will be added to the FlowArguments under a key with this name. options.startingPlayer?\tP | (a: FlowArguments) =&gt; P\tDeclare the player to start the loop. If not specified, this will be the first player in turn order. options.nextPlayer?\t(p: P) =&gt; P\tDeclare a method to select the next player. If not specified this will follow turn order. See PlayerCollection#sortby for more information. options.turns?\tnumber\tIf specified, loop through each play this many times. Default is 1. options.continueUntil?\t(p: P) =&gt; boolean\tIf specified, rather than loop through each player for a certain number of turns, the loop will continue until the provided condition is true. This function accepts the player for the current loop as its only argument. options.do\tFlowDefinition&lt;P&gt;\tThe part that gets repeated for each player. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. The functions Do.repeat, Do.break or Do|Do.continue, can also be used here to cause the current loop to be interupted.  Returns​  default&lt;P&gt;  Example  eachPlayer({ name: 'biddingPlayer', do: // each player in turn has a chance to bid playerActions({ actions: [ 'bid', 'pass' ] }) });   Defined in​  boardzilla-core/src/flow/index.ts:239    ","version":"Next","tagName":"h3"},{"title":"ifElse​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#ifelse","content":" ▸ ifElse&lt;P&gt;(options): default&lt;P&gt;  Provides a branching flow on a condition. This operates like a standardif... else  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name?\tstring\t- options.if\t(r: Record&lt;any, any&gt;) =&gt; boolean\tCondition to test for true/false. This function accepts all FlowArguments. options.do\tFlowDefinition&lt;P&gt;\tThe part that gets run if the condition is true. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. The functions Do.repeat, Do.break or Do|Do.continue, can also be used here to cause the current loop to be interupted. options.else?\tFlowDefinition&lt;P&gt;\tAs do, but runs if the condition is false. Optional.  Returns​  default&lt;P&gt;  Defined in​  boardzilla-core/src/flow/index.ts:258    ","version":"Next","tagName":"h3"},{"title":"switchCase​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#switchcase","content":" ▸ switchCase&lt;P, T&gt;(options): default&lt;P, T&gt;  Provides a branching flow on a condition with multiple outcomes. This operates like a standard switch... case  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt; T\textends undefined | null | string | number | boolean | Player&lt;any, any&gt; | GameElement&lt;P, any&gt; | Serializable&lt;P&gt;[] | { [key: string]: Serializable&lt;P&gt;; }  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.name?\tstring\tIf a name is provided, the value that results from evaluating switch will be added to the FlowArguments under a key with this name. options.switch\tT | (a: FlowArguments) =&gt; T\tExpression to evaluate for determining which case should run. This function accepts all FlowArguments. options.cases\tSwitchCaseCases&lt;P, T&gt;\tAn array of conditions that will test whether they meet the conditions based on the evaluated switch and execute their do block. The case block can contain an eq which will test for equality with a provided value, or test which will test the value using a provided function that must return a boolean. Only the first one that meets the condition will run. The do can contain any type of FlowDefintion. options.default?\tFlowDefinition&lt;P&gt;\tIf no case qualifies, a default case can be provided.  Returns​  default&lt;P, T&gt;  Example  switchCase({ name: 'switch', switch: () =&gt; deck.top(Card)?.suit, cases: [ { eq: 'D', do: () =&gt; { /* ... diamonds */ }, { eq: 'H', do: () =&gt; { /* ... hearts */ }, { eq: 'S', do: () =&gt; { /* ... spades */ }, { eq: 'C', do: () =&gt; { /* ... clubs */ } ], default: () =&gt; { /* ... there is no card */ } })   Defined in​  boardzilla-core/src/flow/index.ts:296    ","version":"Next","tagName":"h3"},{"title":"everyPlayer​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#everyplayer","content":" ▸ everyPlayer&lt;P&gt;(options): default&lt;P&gt;  Create a flow for a set of players that can be done by all players simulataneously in any order. This is similiar to eachPlayer except that the players can act in any order.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionoptions\tObject\t- options.players?\tP[]\tDeclare the players to perform this do. If not specified, this will be all players. options.do\tFlowDefinition&lt;P&gt;\tThe part that each player can perform. This can contain any type of FlowDefintion, a list of functions, or more Flow commands. Each player will go through the defined flows individually and may be at difference stages. The flow will complete when all players have completed this flow. If Do.repeat, Do.break or Do|Do.continue is called, the current loop can be interupted, regardless of what the other players have done. options.name?\tstring\tThe player acting will be added to the FlowArguments under a key with this name for flows within this do.  Returns​  default&lt;P&gt;  Example  everyPlayer({ name: 'passCardPlayer', do: ( // each player selects a card from hand or passes playerActions({ actions: [ 'selectCard', 'pass' ]}), ]});   Defined in​  boardzilla-core/src/flow/index.ts:324  ","version":"Next","tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#ui","content":" ","version":"Next","tagName":"h2"},{"title":"ActionLayout​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#actionlayout","content":" Ƭ ActionLayout: { element: GameElement ; width?: number ; height?: number ; noAnchor?: string[] ; position?: &quot;inset&quot; | &quot;beside&quot; | &quot;stack&quot; ; left?: number ; right?: number ; top?: number ; bottom?: number ; gap?: number } &amp; { position?: &quot;inset&quot; } &amp; { left?: number ; right?: never ; gap?: never } | { left?: never ; right?: number ; gap?: never } &amp; { top?: number ; bottom?: never ; gap?: never } | { top?: never ; bottom?: number ; gap?: never } | { position: &quot;beside&quot; | &quot;stack&quot; ; left?: never ; right?: never ; top?: never ; bottom?: never ; gap?: number }  Type for layout of player controls  Defined in​  boardzilla-core/src/board/board.ts:18    ","version":"Next","tagName":"h3"},{"title":"Box​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#box","content":" Ƭ Box: Object  A Box size and position relative to a container  Type declaration​  Name\tTypeleft\tnumber top\tnumber width\tnumber height\tnumber  Defined in​  boardzilla-core/src/board/element.ts:53    ","version":"Next","tagName":"h3"},{"title":"Vector​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#vector","content":" Ƭ Vector: Object  An (x, y) Vector  Type declaration​  Name\tTypex\tnumber y\tnumber  Defined in​  boardzilla-core/src/board/element.ts:58    ","version":"Next","tagName":"h3"},{"title":"LayoutAttributes​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#layoutattributes","content":" Ƭ LayoutAttributes&lt;T&gt;: Object  List of attributes used to create a new layout in GameElement#layout.  Type parameters​  Name\tTypeT\textends GameElement  Type declaration​  Name\tType\tDescriptionmargin?\tnumber | { top: number ; bottom: number ; left: number ; right: number }\tInstead of providing area, providing a margin defines the bounding box in terms of a margin around the edges of this element. This value is an absolute percentage of the board's size so that margins specified on different layouts with the same value will exactly match. area?\tBox\tA box defining the layout's bounds within this element. Unless size is set too large, no elements will ever overflow this area. If unspecified, the entire area is used, i.e. { left: 0, top: 0, width: 100, height: 100 } rows?\tnumber | { min: number ; max?: number } | { min?: number ; max: number }\tThe number of rows to allot for placing elements in this layout. If a number is provided, this is fixed. If min/max values are provided, the layout will allot at least min and up to max as needed. If min is omitted, a minimum of 1 is implied. If max is omitted, as many are used as needed. Default is no limits on either. columns?\tnumber | { min: number ; max?: number } | { min?: number ; max: number }\tColumns, as per rows slots?\tBox[]\tIf supplied, this overrides all other attributes to define a set of strictly defined boxes for placing each element. Any elements that exceed the number of slots provided are not displayed. size?\t{ width: number ; height: number }\tSize alloted for each element placed in this layout. Overrides scaling and all defined aspect ratios for these elements, fixing the size for each element at the specified size. size.width\tnumber\t- size.height\tnumber\t- aspectRatio?\tnumber\tAspect ratio for each element placed in this layout. This value is a ratio of width over height. Elements will adhere to this ratio unless they have their own specified aspectRatio in their GameElement#appearance. This value is ignored if size is provided. scaling?\t&quot;fit&quot; | &quot;fill&quot;\tScaling strategy for the elements placed in this layout. - fit: Elements scale up or down to fit within the area alloted without squshing - fill: Elements scale up or down to completely fill the area, squishing themselves together as needed along one dimension. gap?\tnumber | { x: number ; y: number }\tIf provided, this places a gap between elements. If scaling is 'fill', this is considered a maximum but may shrink or even become negative in order to fill the area. This value is an absolute percentage of the board's size so that gaps specified on different layouts with the same value will exactly match alignment\t&quot;top&quot; | &quot;bottom&quot; | &quot;left&quot; | &quot;right&quot; | &quot;top left&quot; | &quot;bottom left&quot; | &quot;top right&quot; | &quot;bottom right&quot; | &quot;center&quot;\tIf more room is provided than needed, this determines how the elements will align themselves within the area. offsetColumn?\tVector | number\tInstead of gap, providing an offsetColumn/offsetRow specifies that the contained elements must offset one another by a specified amount as a percentage of the elements size, i.e. offsetColumn=100 is equivalent to a gap of 0. This allows non-orthogonal grids like hex or diamond. If one of offsetColumn/offsetRow is provided but not the other, the unspecified one will be 90° to the one specified. Like gap, if scaling is set to fill, these offsets may squish to fill space. offsetRow?\tVector | number\tAs offsetColumn direction\t&quot;square&quot; | &quot;ltr&quot; | &quot;rtl&quot; | &quot;rtl-btt&quot; | &quot;ltr-btt&quot; | &quot;ttb&quot; | &quot;ttb-rtl&quot; | &quot;btt&quot; | &quot;btt-rtl&quot;\tSpecifies the direction in which elements placed here should fill up the rows and columns of the layout. Rows or columns will increase to their specified maximum as needed. Therefore if, for example, direction is &quot;ltr&quot; and columns has no maximum, there will never be a second row added. Values are: - square: fill rows and columns equally to maintain as square a grid as possible (default) - ltr: fill columns left to right, then rows top to bottom once maximum columns reached - rtl: fill columns right to left, then rows top to bottom once maximum columns reached - ltr-btt: fill columns left to right, then rows bottom to top once maximum columns reached - rtl-btt: fill columns right to left, then rows bottom to top once maximum columns reached - ttb: fill rows top to bottom, then columns left to right once maximum rows reached - btt: fill rows bottom to top, then columns left to right once maximum rows reached - ttb-rtl: fill rows top to bottom, then columns right to left once maximum rows reached - btt-rtl: fill rows bottom to top, then columns right to left once maximum rows reached limit?\tnumber\tIf specified, no more than limit items will be visible. This is useful for displaying e.g. decks of cards where showing only 2 or 3 cards provides a deck-like appearance without needed to render more cards underneath that aren't visible. maxOverlap?\tnumber\tIf scaling is &quot;fill&quot;, this will limit the total amount of overlap if elements are squished together in their space before they will start to shrink to fit. This is useful for e.g. cards that can overlap but that must leave a certain amount visible to clearly identify the card. haphazardly?\tnumber\tA number specifying an amount of randomness added to the layout to provide a more natural looking placement sticky?\tboolean\tSet to true to prevent these elements from automatically changing position within the container grid. showBoundingBox?\tstring\tSet to true for debugging. Creates a visible box on screen around the defined area, tagged with the provided string. drawer?\t{ closeDirection: &quot;up&quot; | &quot;down&quot; | &quot;left&quot; | &quot;right&quot; ; tab: (el: T) =&gt; React.ReactNode | false ; closedTab?: (el: T) =&gt; React.ReactNode | false ; openIf?: (actions: { name: string ; args: Record&lt;string, Argument&lt;Player&gt;&gt; }[]) =&gt; boolean ; closeIf?: (actions: { name: string ; args: Record&lt;string, Argument&lt;Player&gt;&gt; }[]) =&gt; boolean }\tSpecifies that this layout should inhabit a drawer, a collapsible area that can be hidden to save overall space on the board. drawer.closeDirection\t&quot;up&quot; | &quot;down&quot; | &quot;left&quot; | &quot;right&quot;\t- drawer.tab\t(el: T) =&gt; React.ReactNode | false\tJSX to appear in the tab while open drawer.closedTab?\t(el: T) =&gt; React.ReactNode | false\tJSX to appear in the tab while closed, if it differs from the open appearance drawer.openIf?\t(actions: { name: string ; args: Record&lt;string, Argument&lt;Player&gt;&gt; }[]) =&gt; boolean\tA function that will be checked at each game state. If it returns true, the tab will automatically open. drawer.closeIf?\t(actions: { name: string ; args: Record&lt;string, Argument&lt;Player&gt;&gt; }[]) =&gt; boolean\tA function that will be checked at each game state. If it returns true, the tab will automatically close.  Defined in​  boardzilla-core/src/board/element.ts:101    ","version":"Next","tagName":"h3"},{"title":"ProfileBadge​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#profilebadge","content":" ▸ ProfileBadge(«destructured»): Element  Component for rendering a Player's name and avatar in their color. Also capture online status and displays (as className &quot;online&quot;) and flashes when the player is the current player (className &quot;current&quot;).  Parameters​  Name\tType«destructured»\tObject › player\tPlayer&lt;any, any&gt;  Returns​  Element  Defined in​  boardzilla-core/src/ui/game/components/ProfileBadge.tsx:14    ","version":"Next","tagName":"h3"},{"title":"render​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#render","content":" ▸ render&lt;P, B&gt;(setup, options): void  The core function called to customize the game's UI.  Type parameters​  Name\tTypeP\textends Player&lt;any, any&gt; B\textends Board&lt;any, any&gt;  Parameters​  Name\tType\tDescriptionsetup\tSetupFunction&lt;P, B&gt;\t- options\tObject options.settings?\tRecord&lt;string, (p: SetupComponentProps) =&gt; Element&gt;\tDefine your game's settings that the host can customize. This is an object consisting of custom settings. The key is a name for this setting that can be used in Game#setting to retrieve the setting's value for this game. The object is the result of calling one of the setting functions toggleSetting, numberSetting, textSetting or choiceSetting. options.boardSizes?\t(screenX: number, screenY: number, mobile: boolean) =&gt; BoardSize\tA function that determines what board size to use based on the player's device and viewport. The function will take the following arguments: - screenX: The player's view port width - screenY: The player's view port height - mobile: true if using a mobile device The function should return a string indicating the layout to use, this will be cached and sent to the layout function. options.layout?\t(board: B, player: P, boardSize: string) =&gt; void\tA function for declaring all UI customization in the game. Typically this will include calls to GameElement#layout, GameElement#appearance, Board#layoutStep and Board#layoutAction. options.infoModals?\t{ title: string ; modal: (board: B) =&gt; Element }[]\t-  Returns​  void  Defined in​  boardzilla-core/src/ui/index.tsx:612    ","version":"Next","tagName":"h3"},{"title":"toggleSetting​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#togglesetting","content":" ▸ toggleSetting(label): (__namedParameters: SetupComponentProps) =&gt; Element  Provide a game setting that can be turned on or off.  Parameters​  Name\tType\tDescriptionlabel\tstring\tText label to appear next to the toggle  Returns​  fn  ▸ («destructured»): Element  Parameters​  Name\tType«destructured»\tSetupComponentProps  Returns​  Element  Defined in​  boardzilla-core/src/ui/setup/components/settingComponents.tsx:9    ","version":"Next","tagName":"h3"},{"title":"choiceSetting​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#choicesetting","content":" ▸ choiceSetting(label, choices): (__namedParameters: SetupComponentProps) =&gt; Element  Provide a game setting that can be selected from a list of options.  Parameters​  Name\tType\tDescriptionlabel\tstring\tText label to appear next to the option list choices\tRecord&lt;string, string&gt;\tList of choices as key-value pairs, where the value will be the text choice for the host and the key will the result of calling Game#setting  Returns​  fn  ▸ («destructured»): Element  Parameters​  Name\tType«destructured»\tSetupComponentProps  Returns​  Element  Defined in​  boardzilla-core/src/ui/setup/components/settingComponents.tsx:30    ","version":"Next","tagName":"h3"},{"title":"textSetting​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#textsetting","content":" ▸ textSetting(label): (__namedParameters: SetupComponentProps) =&gt; Element  Provide a game setting that can be entered as text.  Parameters​  Name\tType\tDescriptionlabel\tstring\tText label to appear next to the text box  Returns​  fn  ▸ («destructured»): Element  Parameters​  Name\tType«destructured»\tSetupComponentProps  Returns​  Element  Defined in​  boardzilla-core/src/ui/setup/components/settingComponents.tsx:51    ","version":"Next","tagName":"h3"},{"title":"numberSetting​","type":1,"pageTitle":"@boardzilla/core","url":"/api/modules#numbersetting","content":" ▸ numberSetting(label, min, max): (__namedParameters: SetupComponentProps) =&gt; Element  Provide a game setting that can be selected as a number.  Parameters​  Name\tType\tDescriptionlabel\tstring\tText label to appear next to the number select min\tnumber\tThe minimum number allowed max\tnumber\tThe maximum number allowed  Returns​  fn  ▸ («destructured»): Element  Parameters​  Name\tType«destructured»\tSetupComponentProps  Returns​  Element  Defined in​  boardzilla-core/src/ui/setup/components/settingComponents.tsx:65 ","version":"Next","tagName":"h3"},{"title":"Core concepts","type":0,"sectionRef":"#","url":"/ui/core-concepts","content":"","keywords":"","version":"Next"},{"title":"Layout​","type":1,"pageTitle":"Core concepts","url":"/ui/core-concepts#layout","content":" The layout of the game is the definition of where the Spaces and Pieces appear in the player's browser, and how they change as Pieces are added into an area and start to fill it up.  Learn more in Layout and also try out the Layout sandbox.  ","version":"Next","tagName":"h3"},{"title":"Appearance​","type":1,"pageTitle":"Core concepts","url":"/ui/core-concepts#appearance","content":" The appearance of each visible space and piece can be customized using JSX that you provide, and you can apply any CSS you like to these. You can also supply special effects that will be applied when things happen to these elements.  Learn more in Appearance.  ","version":"Next","tagName":"h3"},{"title":"Controls​","type":1,"pageTitle":"Core concepts","url":"/ui/core-concepts#controls","content":" Controls are what we call any input controls that sit on top of the game board. These include:  PromptsButton choicesInputs for text or numbersConfirmation text and buttons ","version":"Next","tagName":"h3"},{"title":"CSS","type":0,"sectionRef":"#","url":"/ui/css","content":"","keywords":"","version":"Next"},{"title":"DOM element reference​","type":1,"pageTitle":"CSS","url":"/ui/css#dom-element-reference","content":" Here you will find a list of all the elements and classes that can be targetted for custom CSS. As with any CSS development, it is often best to simply inspect the HTML and edit it directly to see what effect your custom CSS will have.  This HTML block is only intended to show the general structure and where examples of the main types of elements would appear in the DOM. This is not exhaustive and not all of these elements would be present at the same time.  &lt;html&gt; &lt;body&gt; &lt;!-- if on the setup screen --&gt; &lt;div id=&quot;setup&quot;&gt; &lt;div id=&quot;background&quot;/&gt; &lt;div id=&quot;seating&quot;&gt; &lt;div id=&quot;settings&quot;&gt; &lt;/div&gt; &lt;-- if on the game screen --&gt; &lt;div id=&quot;game&quot;&gt; &lt;div id=&quot;background&quot;/&gt; &lt;div id=&quot;play-area&quot;&gt; &lt;!-- example Space --&gt; &lt;div class=&quot;transform-wrapper&quot;&gt; &lt;div class=&quot;Space&quot;&gt; &lt;!-- plus the name of the derived class, if any --&gt; &lt;!-- Any custom JSX in Space's render goes here --&gt; &lt;!-- example nested Piece --&gt; &lt;div class=&quot;transform-wrapper&quot;&gt; &lt;div class=&quot;Piece&quot;&gt; &lt;!-- Any custom JSX in Piece's render goes here --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;profile-badge&quot;&gt; &lt;div class=&quot;avatar&quot;/&gt; &lt;div class=&quot;player-name&quot;/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;player-controls&quot;&gt; &lt;div class=&quot;prompt&quot;/&gt; &lt;/div&gt; &lt;div id=&quot;info-container&quot;&gt; &lt;div id=&quot;info-drawer&quot;/&gt; &lt;div id=&quot;info-modal&quot;&gt; &lt;div class=&quot;element-zoom&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;  ","version":"Next","tagName":"h2"},{"title":"<html>​","type":1,"pageTitle":"CSS","url":"/ui/css#html","content":" The html element is where dark-mode is set. To target dark mode with specific CSS, use  html.dark {   ","version":"Next","tagName":"h3"},{"title":"<body>​","type":1,"pageTitle":"CSS","url":"/ui/css#body","content":" The body element is typically targetted only for global CSS changes, like font-family.  ","version":"Next","tagName":"h3"},{"title":"setup​","type":1,"pageTitle":"CSS","url":"/ui/css#setup","content":" The game setup page with seating and settings is found here. Target this with CSS if you want to style the setup page specifically, e.g. with custom font treatment.  ","version":"Next","tagName":"h3"},{"title":"game​","type":1,"pageTitle":"CSS","url":"/ui/css#game","content":" The top-level element for the game itself. This can have a variety of classes applied to it to target particular browsers and devices, namely:  mobile for mobile browsersdesktop for desktop browsersbrowser-chrome for Chromebrowser-edge for Edgebrowser-safari for Safaribrowser-firefox for Firefox  ","version":"Next","tagName":"h3"},{"title":"background​","type":1,"pageTitle":"CSS","url":"/ui/css#background","content":" The background element that contains the wood grain. This can be replaced or customized by changing background-image  ","version":"Next","tagName":"h3"},{"title":"play-area​","type":1,"pageTitle":"CSS","url":"/ui/css#play-area","content":" The Board is rendered here, as opposed to any player controls or informational text. Use this in case of CSS selectors that must be scoped to the board only. Remember that elements can appear in modals so element CSS should not be restricted to #play-area.  ","version":"Next","tagName":"h3"},{"title":".transform-wrapper​","type":1,"pageTitle":"CSS","url":"/ui/css#transform-wrapper","content":" Every Space or Piece has a Wrapper div around it that Boardzilla uses for positioning, scaling and animations. Generally, it is inadvisable to target this directly with CSS. This element has font-size set to a value that scales with the size of the element. This means that any CSS applied to the element can useem units to ensure it stays proportionate to the element.  ","version":"Next","tagName":"h3"},{"title":".Space or .Piece​","type":1,"pageTitle":"CSS","url":"/ui/css#space-or-piece","content":" Specific Spaces and Pieces of your board are rendered with this element. They always a class name of Space or Piece depending on the base type. They also have a class name matching the Typescript class of the element if it is subclassed.  There are additional class names that may be present depending on circumstances, and are useful for targetting to customize appearance:  selected If this element is selectedselectable If this element is currently selectable in an available actiondroppable If this element is a valid drop zone for a dragged elementclickable If this element is clickable for any reason  The properties you give to your Space/Piece class, as well as built-in properties like name and player are also added to the HTML element as data-attributes, e.g.:   &lt;div class=&quot;Piece Card&quot; data-name=&quot;ace-of-hearts&quot; data-suit=&quot;H&quot; data-number=&quot;1&quot; &gt;   All JSX supplied in the appearance.render appears immediately inside this element.  Also see appearance.  ","version":"Next","tagName":"h3"},{"title":".profile-badge​","type":1,"pageTitle":"CSS","url":"/ui/css#profile-badge","content":" The &lt;ProfileBadge&gt; component, if it is included on the page, appears here, along with children for the avatar image and the player name. This can be targetted to customize font treatment, but should generally be left with little alteration for consistency's sake. This element additionally may have these classes:  online if the player is currently onlinecurrent if the player is the current player to act  ","version":"Next","tagName":"h3"},{"title":".player-controls​","type":1,"pageTitle":"CSS","url":"/ui/css#player-controls","content":" Any player input controls or prompts that sit on top of the page are here. They may include prompt text, with class name prompt. Additionally specific player controls can be targeted by using the the name of the Flow command. If a name is present this element will additionally have a class name for that step:  .player-controls.step-&lt;step name&gt; {   ","version":"Next","tagName":"h3"},{"title":"info-drawer​","type":1,"pageTitle":"CSS","url":"/ui/css#info-drawer","content":" The floating info panel in the top left once it's opened. This can be targetted for font and color treatment. For consistency's sake, styling should remain close to default.  ","version":"Next","tagName":"h3"},{"title":"info-modal​","type":1,"pageTitle":"CSS","url":"/ui/css#info-modal","content":" When selecting an element to see info, this modal contains the element and text. It is important to remember that an element'sappearance.render JSX can appear in this context as well.  ","version":"Next","tagName":"h3"},{"title":"Hover​","type":1,"pageTitle":"CSS","url":"/ui/css#hover","content":" Applying CSS to elements as players hover them can be done with the standard:hover pseudo-class on the Piece/Space element.  It is common in the case of stacked elements to have elements next to the hovered element splay out to reveal themselves to make it easy to leaf thru the stack. A standard, although somewhat complex CSS selector can be used to select the elements before and after the hover, e.g.:   .transform-wrapper:has(+ .transform-wrapper .Card:hover) .Card { /* the card before the hover */ } .transform-wrapper:has(.Card:hover) + .transform-wrapper .Card { /* the card after the hover */ }   This can be further extended with even more esoteric CSS:   .transform-wrapper:has(+ .transform-wrapper + .transform-wrapper .Card:hover) .Card { /* two cards before the hover */ } .transform-wrapper:has(.Card:hover) + .transform-wrapper + .transform-wrapper .Card { /* two cards after the hover */ }  ","version":"Next","tagName":"h2"},{"title":"Customizing the UI","type":0,"sectionRef":"#","url":"/ui/customizing-ui","content":"","keywords":"","version":"Next"},{"title":"React​","type":1,"pageTitle":"Customizing the UI","url":"/ui/customizing-ui#react","content":" The UI for Boardzilla is rendered using React. However, there is very little knowledge specifically of React necessary in order to customize the UI. Essentially, the only React knowledge needed is how to writeJSX. ","version":"Next","tagName":"h2"},{"title":"Game Settings","type":0,"sectionRef":"#","url":"/ui/game-settings","content":"Game Settings If you have specific settings for your game that can be set on a per-game basis, these are also added in the render function inui/index.tsx using a settings property. Here you can add a property of the game that the host can set when setting up the game. Boardzilla will render the controls to adjust this setting depending on whether it's a number, a multiple choice, a toggle or a string. Provide a key for the setting and then the selection that the host made is available by calling game.setting in your game rules. For example, to include an option for the host to turn on/off real-time VP in your game, you might add: render(setup, { ... settings: { realtimeVp: toggleSetting(&quot;Show VP in real-time&quot;) }, ... }); And somewhere in your UI code you will lookup the game's setting to see if this value is turned on to determine whether to show VP: if (board.game.setting(&quot;realtimeVp&quot;)) { // show VP } ","keywords":"","version":"Next"},{"title":"Layout sandbox","type":0,"sectionRef":"#","url":"/ui/layout-sandbox","content":"Layout sandbox The best way to explain Boardzilla's layout engine is to experiement. This sandbox lets you adjust the parameters and add/remove items into a layout for an imaginary space with a square aspect ratio. See the results, and copy the resultant code to use the layout in your game. Of course, always refer to thedocumentation to understand everything that's going on, as well as a few more options that are not pictured here. The area is treated here as the entire square box. In reality you may setarea or margin to restrict the layout to a portion of the given space. # of pieces rows leave blank for no limit min: max: columns leave blank for no limit min: max: spacing gap gap size is absolute to board size X: 10% Y: 0% aspect ratio 1 scaling alignment centertopbottomleftrighttop leftbottom lefttop rightbottom right direction squareltrrtlrtl-bttltr-bttttbttb-rtlbttbtt-rtl max overlap 100% haphazardly example presets Piece 1 Piece 2 Piece 3 Piece 4","keywords":"","version":"Next"},{"title":"Actions","type":0,"sectionRef":"#","url":"/game/actions","content":"","keywords":"","version":"Next"},{"title":"What constitutes an Action?​","type":1,"pageTitle":"Actions","url":"/game/actions#what-constitutes-an-action","content":" An action consists of a set of choices that together constitute the whole action. The choices that belong to an action cannot reveal any information or affect the game until the complete action is taken. An action therefore, consists of the complete set of choices and must be taken altogether or not at all. As an action doesn't reveal any private information, a player can change their mind at any point during the action without consequence, and other players will not be aware of this.  Actions are a set of choices or selections A chess move as a Boardzilla Action would have two selections: Piece to moveSpace to move it to You can select them each in turn (or both together via dragging) but you if you select a pawn and change your mind, you can unselect it and select a knight. Selecting the piece by itself does not constitute an action until the destination space is selected.  Each action may contain several selections for the player to make and they must use only the information the player has available at at the time they begin the action. If an action involves revealing information and then making a follow up choice, these must be separate actions. (see follow-ups).  Actions are like functions Think of actions like function calls. An action for a chess move would be like a function named move that takes two arguments piece and space. This is a single action, not two. The player's client would essentially make a call like: For this reason, you will sometimes see the values selected by the players called &quot;arguments&quot;.  ","version":"Next","tagName":"h2"},{"title":"Anatomy of an action​","type":1,"pageTitle":"Actions","url":"/game/actions#anatomy-of-an-action","content":" An action consists of several required properties.  a unique name by which it will be referred to, e.g. playCardzero or more selections that a player must make to perform the actionthe behavior of the action such as moving a piece and displaying a message  As well, an action can have several optional properties.  conditions on whether an action can be performed at allvalidations on the selections for an actionunique prompts to help the player understand their actiona description for other players to see what's happeningany additional confirmations the player needs for this action  Actions are all created in a single place in game/index.ts inside thecreateGame when you callgame.defineActions. Each action is listed with its name, and the selections and behaviors of the action are chained onto it, e.g.:  Chaining action methods game.defineActions({ bid: player =&gt; action({ prompt: 'Make a bid', description: 'bidding', condition: !player.passedThisAuction }).chooseNumber( 'amount', { min: board.lastBid ?? 1 max: player.money, } ).do( ({ amount }) =&gt; board.lastBid = amount ).message( `{{player}} bid {{amount}}` ), });   There's quite a bit going on with this action. Let's break it down:  The name of the action is &quot;bid&quot;, defined as the key of the object.Notice that the action function accepts a player argument. This is the player performing this action, which is why later in the action we can refer to the player's money and use their name in the message.This action has one selection which is named &quot;amount&quot;. This is a number selection created with chooseNumber.This action has two behavior functions. One is ado that records the bid amount asboard.lastBid and one is a message sent to the players.This action also has 3 properties. We've added a string prompt, adescription, and also a condition for performing this action, namely that the player may not perform this action if they have already passed this auction.  ","version":"Next","tagName":"h2"},{"title":"Selections​","type":1,"pageTitle":"Actions","url":"/game/actions#selections","content":" An action can have zero or more selections. There are 5 fundamental types of selections available in Boardzilla.  Type\tMethod\tDescription\tAppearancenumber\tchooseNumber\tSelect from a range of numbers, such as when spending an arbitrary amount of resources.\tNumber picker text\tenterText\tEnter text, such as in word-guessing games.\tInput box choices\tchooseFrom\tSelect from a list of choices.\tList of buttons board\tchooseOnBoard\tSelect something on the board, a piece or space\tSelectable elements on the board can be clicked placement\tplacePiece\tSelect the exact position for a piece\tThe selected piece becomes movable and snaps to valid positions  In addition there is an additional select chooseGroup which allows you to combine these selections into a single selection  Type\tMethod\tDescription\tAppearancegroup\tchooseGroup\tCombination of chooseNumber, enterText, chooseFrom, chooseOnBoard or placePiece\tCombined based on the combination  Each selection added to an Action must be one of these types, and must have a name unique to this action. The methods above are called one by one, chained onto the action in the order the player must select them. You can think of these methods like Chained Promisesthat are resolved by the choice the player makes. All the values selected by the player become available to function calls later in the action, as a single argument with key-value pairs for the selections. For example:   action({ prompt: &quot;Pick a number and a word&quot; }).chooseNumber( 'amount' }).enterText( 'guess' }).do( ({ amount, guess }) =&gt; { // amount equals the number the player chose // guess equals the text the player entered } );   Because of this, selections can use the result of previous selections within a single action. Whenever you're making selections within an action, and a property accepts a function, that function will be called with the selections up to that point.  Often one selection will depend on the choices made in previous selections. For example, suppose the player needs to select a type of resource to purchase and the amount they wish to purchase. The chooseNumber method accepts min andmax to set the range of allowed values. We might set the max based on the amount available for the resource they chose.   action({ prompt: &quot;Purchase resources&quot;, }).chooseFrom( &quot;resource&quot;, [&quot;Lumber&quot;, &quot;Steel&quot;, &quot;Wheat&quot;] ).chooseNumber( &quot;amount&quot;, { min: 1, // here the &quot;resource&quot; chosen is available to limit the range for the 2nd selection max: ({ resource }) =&gt; board.availableResources(resource), } );   Using Typescript for actions Because the choose functions declare the type of selection, Typescript will correctly type these arguments later when you use them. This is useful to double check that you have entered the selections correctly.  ","version":"Next","tagName":"h2"},{"title":"Behaviors​","type":1,"pageTitle":"Actions","url":"/game/actions#behaviors","content":" After a player has made all the necessary choices and submitted the action, it's time to actually do something!  ","version":"Next","tagName":"h2"},{"title":"Moving​","type":1,"pageTitle":"Actions","url":"/game/actions#moving","content":" The most common behavior is to move a Piece or Pieces into a new location. For most moves, we can just call move after the selections, e.g.   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card) ).move( // move the card selected into the &quot;play&quot; Space &quot;card&quot;, $.play );   Notice that in this example we use a string as the first argument, meaning &quot;use the piece(s) the player selected in the selection with this name&quot;. For thesecond argument we specify a predetermined location with a literal Space. Both the piece(s) moved and the location they're moved to can be either player choices (string names) or predetermined game elements (GameElementexpressions).  Boardzilla will make this move when the player has made all their selctions, and will additionally permit a mouse drag if using a desktop browser.  placing pieces placePiece is a special method that isboth a selection and a behavior. The player selects the exact position to place the element, and Boardzilla moves it to this location as part of the action.  ","version":"Next","tagName":"h3"},{"title":"Messaging​","type":1,"pageTitle":"Actions","url":"/game/actions#messaging","content":" It's usually good to send a message to all players explaining what just occurred. The easiest way to do this is by adding amessage call onto the action. The messagefunction takes a string and can interpolate either the player name or any of the items selected by using {{handlebars}} syntax. For example in the play card action above, we can add a message like this:   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card) ).move( &quot;card&quot;, $.play ).message( &quot;{{player}} played {{card}}&quot; );   We can also add more {{handlebars}} variables using the second argument, e.g.:   .message( &quot;{{player}} played {{card}} and now has a score of {{score}}&quot;, { score: player.score() } )   Using {{handlebars}} Using Boardzilla's {{handlebars}} syntax in messages allows references to Players or Game objects to have special formatting applied. You can interpolate values into the message string directly, but for this reason, using the{{handlebars}} syntax is recommended.  Message strings Boardzilla provides string representations of Players and Game Elements that use their &quot;name&quot; using the standard toString(). Feel free to override these and provide your own toString() if you want to customize how these things appear in messages.  ","version":"Next","tagName":"h3"},{"title":"Other behavior​","type":1,"pageTitle":"Actions","url":"/game/actions#other-behavior","content":" All other behavior can be achieved with the generaldo method. This just lets us add arbitrary code to an action. Suppose that in our card play example above, we additionally want to perform some logic if the drawn card is special. An additional do clause might look like:   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card) ).move( &quot;card&quot;, $.play ).message( &quot;{{player}} played {{card}}&quot; ).do( ({ card }) =&gt; { if (card.isSpecial()) card.performSpecial(); } );   We can add anything we need here, mutating and moving items on the board or changing state in any way. Note that just like in all action-related functions, the player's selections are passed to the do function in a single object of key-value pairs using the names provided for each Selection.  Order matters Order matters! When mixing message and do or move keep in mind that if you mutate the board, the message call will use the state before or after the mutation depending on which order you chain the methods.  ","version":"Next","tagName":"h3"},{"title":"Tree-shaking and Skipping​","type":1,"pageTitle":"Actions","url":"/game/actions#tree-shaking-and-skipping","content":" Where possible, Boardzilla analyzes each possible action based on the state of the board to determine which actions can be performed, or when players only have a single action available to them. For example, if you have a playCard action that has a selection of any card in the player's hand, but that player has no cards, the playCard will be removed from the list of possible actions. Also if a player has no cards in their hand, and their only choices are to play a card or pass, Boardzilla will only present the pass action to the player.  In the example above with choosing &quot;resource&quot; and &quot;amount&quot;, consider what would happen if board.availableResources(&quot;Lumber&quot;) returned 0. In this case,min would be 1 and the max would be 0, resulting in an invalid choice. Boardzilla would therefore eliminate &quot;Lumber&quot; from the possible resources to choose from. It's possible that only one resource is selectable, in this case the &quot;resource&quot; selection can be skipped and the player would be prompted only for the &quot;amount&quot; when trying to perform this action.  Skipping forced selections If there is only one possible action to move the game forward, the player's client will automatically make this move. For example, if a player is presented with options to play cards, use items, or pass, if they have neither cards nor items, then the game will automatically &quot;pass&quot;. This behavior can be changed using skipIf which is detailed below.  The process of eliminating actions based on what is possible is called &quot;tree-shaking&quot;. Boardzilla handles this for you automatically. This means you can add several possible actions to the list of available actions, even if some of them depend on unusual circumstances. Perhaps an action can only be taken if you have a particular card, or if the game is in a particular phase, etc. Boardzilla will prune the set of possible actions to present the choices to the player that make sense under the circumstances.  ","version":"Next","tagName":"h2"},{"title":"Customizing the tree-shaking​","type":1,"pageTitle":"Actions","url":"/game/actions#customizing-the-tree-shaking","content":" There are several ways Boardzilla can tree-shake an action, and ways you can customize this behavior. The principal way is by looking at the possible selections. If you present a list of possible choices dynamically, e.g. the cards in the player's hand, then Boardzilla will automatically evaluate that to see if the selection can be removed or skipped.  You can also declare that an entire action is impossible based on other reasons by adding a condition to the action. In the example above we set a condition for the &quot;bid&quot; action, which is that the player must have not passed the auction, which was recorded as player.passedThisAuction. In this case, the &quot;bid&quot; action should be pruned from the player's choices, which we do by adding the following:   action({ prompt: 'Make a bid', condition: !player.passedThisAuction })...   ","version":"Next","tagName":"h3"},{"title":"Skipping​","type":1,"pageTitle":"Actions","url":"/game/actions#skipping","content":" Boardzilla has 3 different strategies it follows for choosing what to skip and applies them by default to different actions and selections. Generally the defaults create an intuitive set of prompts for players regardless of the situation, but it is easy to modify which strategy is used as it suits the action. To modify this strategy, add a skipIf parameter to either a selection function, or to theplayerActions function.  Strategy\tskipIf value\tDescription\tDefaultNever Skip\t&quot;never&quot;\tBoardzilla will always present this selection to players even if it is their only choice.\tn/a Skip if Only One\t&quot;only-one&quot;\tBoardzilla will skip this selection if there is only one viable option.\tDefault for all selection functions Always Skip\t&quot;always&quot;\tRather than present this choice directly, the player will be prompted with choices from the next choice in the action for each possible choice here, essentially expanding the choices ahead of time to save the player a step. This option only has relevance if there are subsequent choices in the action.\tDefault for playerActions  For example, if you want the player to play a card from hand but want the player to explicitly click the card, even if there is only one card in hand to play, your action might look like:   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card), { skipIf: &quot;never&quot; } );   ","version":"Next","tagName":"h3"},{"title":"Follow-ups​","type":1,"pageTitle":"Actions","url":"/game/actions#follow-ups","content":" Sometimes an action will trigger further actions based on new information, such as when revealing a card that requires some choices and actions for the player. In these cases the action can trigger additional actions usinggame.followUp. This can be called anywhere that is triggered directly by the action, usually in the action do. This causes Boardzilla to immediately prompt this action following the completion of the current action.   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card) ).move( &quot;card&quot;, $.play ).do( ({ card }) =&gt; { if (card.hasSpecialAction) { game.followUp({ name: &quot;specialAction&quot; }); } } );   In this example, certain cards trigger another action named &quot;specialAction&quot;. This action must be defined elsewhere in thedefineActions call with this name.  Often a variety of ways to trigger this follow-up will exist in play with variations. Imagine a card game where drawing certain cards lets you take resources of your choice, but different cards let you take different amounts. Rather than define different actions for each amount, we can pass arguments to the follow-up action using args. The triggering action might look like this:   player =&gt; action({ prompt: &quot;Play a card&quot;, }).chooseOnBoard( &quot;card&quot;, player.allMy(Card) ).move( &quot;card&quot;, $.play ).do( ({ card }) =&gt; { if (card.takeResources &gt; 0) { game.followUp({ name: &quot;takeResources&quot;, args: { amount: card.takeResources } }); } } );   In this case the &quot;amount&quot; becomes just another argument in the action named&quot;takeResources&quot; except that instead of being a player selection, this one is passed in. The &quot;takeResources&quot; action then might look something like this:   player =&gt; action&lt;{ amount: number }&gt;({ prompt: &quot;Take resources&quot;, }).chooseFrom( &quot;resource&quot;, [&quot;Lumber&quot;, &quot;Steel&quot;, &quot;Wheat&quot;] ).do( ({ resource, amount }) =&gt; player.addResources(resource, amount) );   Note the use of the Typescript generic here &lt;{amount: number}&gt;. This is not required but ensures that Typescript correctly types amount later in the docall since it has no other way of knowing what that argument is. ","version":"Next","tagName":"h2"},{"title":"Layout","type":0,"sectionRef":"#","url":"/ui/layout","content":"","keywords":"","version":"Next"},{"title":"Layout parameters​","type":1,"pageTitle":"Layout","url":"/ui/layout#layout-parameters","content":" Creating a layout for an area of the board is a series of questions, with different parameters used to answer each one.  What part of the area should be used to display its contents? (area ormargin)How large should the grid be to accommodate its contents? (rows andcolumns)How tightly should they be packed? (gap or offsetRow/offsetColumn)Should they be in a square grid, or something non-orthogonal like a hexagon? (gap or offsetRow/offsetColumn)How should they fill up their grid as more are added? (direction,alignment and limit)How should they stretch, shrink, or squish together to fit in the area? (scaling and maxOverlap)  How these parameters interact can become complicated. The best approach is to experiment in order to find what you're looking for. A helpful layout sandbox is provided here to let you try different parameters and see the results with different elements. Also browsing the sample games to see how their layouts work is a good resource. Of course, refer to the API documentation for the complete descriptions.  relative percentages Most of the sizing attributes in the layout parameters are percentage values. These are generally percentages of the container element's layout, so e.g. $.deck.layout(Card, { area: { left: 25, top: 25, width: 50, height: 50 }, }); Would place the Cards in the deck space into an inner region that is 50% of the deck's width and height.  Note that the layout code is evaluated every time the board changes, so if e.g. you have a layout on $.field for only the cards for which card.coloris &quot;red&quot;, then the layout declaration might look like:  $.field.layout( $.field.all(Card, {color: &quot;red&quot;}), { ... } );   This will be applied to each Card in the field Space with color equal to&quot;red&quot;, and as cards enter or leave the field or change color, the layout will automatically be re-applied given the new set of red cards in the field.  layout bounding box While working on a particular layout declaration, adding a showBoundingBoxattribute causes the layout's area to visibly appear on screen as a dotted bounding box. This is an easy way to visually see if your layout is correct.  ","version":"Next","tagName":"h2"},{"title":"Customize Controls​","type":1,"pageTitle":"Layout","url":"/ui/layout#customize-controls","content":" The controls (floating boxes with player prompts and inputs) can have their location customized to be contextual with the action taken. There are two methods for controlling placement of these, depending on whether you want the placement to be specific to an Action or specific to a step in the Flow:  board.layoutActionboard.layoutStep  Both of these apply layout rules to a control by specifying theAction or theplayerActions.name respectively and providing parameters to anchor it to the board in a particular location. This is to allow your game to place these in a suitable location of the board that corresponds to the action needed, and does not obscure game elements. SeeActionLayout for details.  The controls can also be targetted with CSS like all Boardzilla elements. The controls box always have the HTML class player-controls applied, and other classes are used for specific elements and actions. See CSS for details. ","version":"Next","tagName":"h2"},{"title":"Flow","type":0,"sectionRef":"#","url":"/game/flow","content":"","keywords":"","version":"Next"},{"title":"Typical flow structure​","type":1,"pageTitle":"Flow","url":"/game/flow#typical-flow-structure","content":" Flow is defined in game/index.ts inside thecreateGame when you callgame.defineFlow. The arguments to this function are the steps for your game. There are two basic types of steps:  FunctionsFlow commands  Functions alter the game state in some way, and Flow commands change the flow of the game. You can keep adding as many functions and Flow commands as needed, in any order. Let's look at a simple example from the Boardzilla starter game:   game.defineFlow( () =&gt; $.pool.shuffle(), loop( eachPlayer({ name: &quot;player&quot;, do: playerActions({ actions: [&quot;take&quot;], }), }) ) );   This flow contains exactly two items: a function call that shuffles the pool, and the main play loop. The first function makes a single change to the board:   () =&gt; $.pool.shuffle(),   Generally the first function of a flow will set up the board, shuffling decks, dealing out opening hands and the like. Later in the flow you can use functions as much as you like to make other changes to the board state, including moving pieces around that are not part of a player action (e.g. dealing out a new hand) or just changing state on the board or players (e.g. updating the score).  Flow may not create or destroy game elements One thing you cannot do in the flow is create new elements. All Spaces and Pieces in your game must be created before callingdefineFlow. If pieces are only needed later in the game, they can be created on the pile using board.pile.create() and moved from the pile when needed. Similarly when elements areremoved they actually are put into the pile.  The next argument in this example calls loop. This is a basic Flow command that causes a portion of the flow to be repeated until something interrupts it. In this case, it sets up the basic game loop. Flow commands can set up other types of loops, have players take turns, create branching logic, and most importantly, prompt players for the actions they can perform.  In the example above the main loop itself includes other Flow commands, namelyeachPlayer and playerActions. This is an important distinction between the two types of flow steps, plain functions and Flow commands:  Please note! Flow commands can only be added directly by other Flow commands.  For example, imagine you have a flow function that does some things, setting up the deck, dealing some cards, and then cleaning up after the hand:   game.defineFlow( () =&gt; { // shuffle the deck // deal cards // put the cards back in the deck }) );   If you now want to insert a Flow command in the middle to add a player action, you must break the function into two pieces and insert the flow function between them, e.g.:   game.defineFlow( () =&gt; { // shuffle the deck // deal cards }, playerAction({ actions: ['playCard'] }), () =&gt; { // put the cards back in the deck }) );   flow visualization Getting the Flow right is critical, but it can be hard to conceptualize and visualize game flow in a formalized way like this. As an aid to understanding the flow, you can use the debug mode of the devtools (the magnifying glass icon in the top left) to open up a visualization of the flow showing where the game is currently in the flow at any point.  ","version":"Next","tagName":"h2"},{"title":"Flow commands​","type":1,"pageTitle":"Flow","url":"/game/flow#flow-commands","content":" All Flow commands are available ongame.flowCommands. It is common to deconstruct all needed commands before defining flow, e.g.:  const { playerActions, eachPlayer, forEach, forLoop } = game.flowCommands;   Let's look at the various Flow commands. There are 3 main types of flow commands, looping, branching and actions.  ","version":"Next","tagName":"h2"},{"title":"Looping Flow commands​","type":1,"pageTitle":"Flow","url":"/game/flow#looping-flow-commands","content":" loop​  The most basic loop, this creates a loop that continues indefinitely until explicitly interrupted. This would be like a C/Javascript while(true).  whileLoop​  Like the basic loop, except that it accepts a condition and will only start a new iteration of the loop if the condition is true. This is exaclty like the C/Javascript while(condition). In particular, note that this loop might not execute even one iteration if the supplied condition is false to begin with.  forLoop​  This loop sets a value, iterates that value at each loop iteration and continues looping until that value meets some condition. In other words, a standard forloop from C/Javascript.  forEach​  This loop accepts a collection, and iterates over the members of that collection. This is like for ... of or Array#forEach in Javascript.  eachPlayer​  This is a loop that iterates over each player. This is the same as forEachwith one addition. On each iteration as the player changes, it also automatically sets the &quot;current&quot; player.  everyPlayer​  Strictly speaking, this isn't a loop. However, it looks identical toeachPlayer except that instead of operating on each player in turn, it let's all players take their turn in parallel. This &quot;loop&quot; completes when all players have completed the body of this command, or is otherwise interrupted.  ","version":"Next","tagName":"h3"},{"title":"Branching Flow commands​","type":1,"pageTitle":"Flow","url":"/game/flow#branching-flow-commands","content":" ifElse​  Simply checks a condition and either takes one branch named do or an optionalelse branch, just as an standard if...else  switchCase​  Like ifElse except the test expression can be compared with several possible values and execute different branches depending on the outcome. It may also execute a default branch if no other matches apply. This is similar to theswitch...case in C/Javascript but without fall through behaviour.  ","version":"Next","tagName":"h3"},{"title":"Player Actions​","type":1,"pageTitle":"Flow","url":"/game/flow#player-actions","content":" playerActions​  This is the sole Flow command for prompting player actions. This command accept a list of allowed actions that were defined in defineActions and prompts the current player (or a particular player or players if specified).  Actions can be supplied as strings, corresponging to the names given indefineActions e.g.:  actions: [&quot;take&quot;, &quot;pass&quot;]   or as objects if additional properties are needed, e.g.:  actions: [ { name: &quot;take&quot;, do: Do.repeat, }, 'pass' ]   The properties available are:  name: the name of the actiondo: a continuation for the flow if this action is taken. This can contain any number of nested Flow functions.args: args to pass to the action. If provided this pre-selects arguments to the action that the player does not select themselves, in the same way asFollow up's.prompt: a string prompt. If provided this overrides the prompt defined in the action. This can be useful if the same action should prompt differently at different points in the game  Note that like all other selections in Boardzilla, this list of actions hastree-shaking and skipping behavior. If one of the included actions is determined to have no possible valid moves, it will not be included in player prompts. If only one of the supplied actions is determined to be playable, it will be prompted with any required selections. If such an action requires no further selections it will be auto-played. Just like action selections this behavior can be configured for each playerActions with a skipIf parameter.  For this reason, it is common to include a wide variety of possible actions in the list of playerActions but let each action definition take responsibility for determining whether it is actually playable at the time based on its selections and/or condition parameter.  Flow commands are created once Unlike Actions that are created for each player at the time of being played, Flow commands are created at the beginning of the game. Be careful with passing expressions directly to Flow commands that rely on game state. For example if you want to loop through some cards laid out in a board Space called &quot;field&quot;, something like the following is probably not what you want: forEach({ name: &quot;card&quot;, collection: $.field.all(Card), // ❌ only evaluated at the start of the game do: playerAction({ actions: [&quot;chooseCard&quot;, &quot;pass&quot;] }), }); Instead use the functional form, so that the expression will be evaluated each time this loop is entered: forEach({ name: &quot;card&quot;, collection: () =&gt; $.field.all(Card), // ✅ do: playerAction({ actions: [&quot;chooseCard&quot;, &quot;pass&quot;] }), });   ","version":"Next","tagName":"h3"},{"title":"Current Flow Position​","type":1,"pageTitle":"Flow","url":"/game/flow#current-flow-position","content":" For many Flow commands, it is necessary to know what the current position is. For example in a simple for i loop, we need to access i and have logic that depends on its current value.  All function parameters in Flow commands accept a single argument of type FlowArguments for this purpose. The argument is a single object that contains all the values &quot;in scope&quot; at this point in the flow. There are two types of values included here:  loop variablesplayer action selections  Loop variables​  The loop variables included here are from any loops that the flow is currently inside of, namely the current iterator value in any forLoop's, the current collection member of any forEach loops, the evaluated test expression in any switchCase's.  The values are included as key value pairs where the key is the name parameter supplied for the Flow command.   forLoop({ name: &quot;x&quot;, // x is declared here initial: 0, next: x =&gt; x + 1, while: x =&gt; x &lt; 3, do: forLoop({ name: &quot;y&quot;, // y is declared here initial: 0, next: y =&gt; y + 1, while: y =&gt; y &lt; 2, do: ({ x, y }) =&gt; { // x is available here as the value of the outer loop // and y will be the value of the inner loop }, }), });   Player action selections​  For player action selections, the arguments to the player action are included as a single object. Again this only applies if the Flow command is inside the dobranch belonging to this player action. The name in this case is the name of the actions. For example, here we have defined an action called &quot;takeResource&quot; and later we want to know what choices the player made in the flow.   game.defineActions({ ... takeResources: player =&gt; action&lt;{ amount: number }&gt;({ prompt: &quot;Take resources&quot;, }).chooseFrom( &quot;resource&quot;, [&quot;Lumber&quot;, &quot;Steel&quot;, &quot;Wheat&quot;] ).do( ({ resource, amount }) =&gt; player.addResources(resource, amount) ), ... }); game.defineFlow( ... playerActions({ actions: [ { name: &quot;takeResources&quot;, // The argument is the name of the action do: ({ takeResources }) =&gt; { // takeResoures.resource will be the name of the resource, e.g. 'Steel' // takeResoures.amount will be the selection number &quot;amount&quot; }, }, ], }) );   Action vs playerActions We can react to a player's action both in the actiondo and in the do of the playerActions. It can be confusing which we should use for what. In general the action do is the proper place to react to what a player just did. This includes mutating the board, recording state, or triggering follow-up actions. The playerActions do should be used only for changes to the flow of the game as a result of the player action, e.g. ending a phase or somehow interrupting a loop, or triggering other rounds of player actions, since Flow commands can only be issued inside other Flow commands.  ","version":"Next","tagName":"h3"},{"title":"Loop interruption​","type":1,"pageTitle":"Flow","url":"/game/flow#loop-interruption","content":" It is important in a game to able to interrupt loops. In fact if we use the basic loop Flow command, the loop will continue indefinitely unless we interrupt it. There are 3 basic loop interruption functions:  Do.break()  This causes the flow to exit loop and resume after the loop, like thebreak keyword in C/Javascript.  Do.continue()  This causes the flow to skip the rest of the current loop iteration and restart the loop at the next iteration, like the continue keyword in C/Javascript.  Do.repeat()  Similar to Do.continue except this restarts the loop on the same iterationit's currently on.  These functions can be called in any loop function or action. Often it is the only thing you want to call after a particular action, in which case you can pass it as the action do, e.g.:   loop( playerActions({ actions: [ &quot;takeOneFromBag&quot;, { name: &quot;done&quot;, // break out of the loop when a player selects 'Done' do: Do.break, }, ], }) );   These are not javascript keywords Remember that the flow interruption functions are merely humble Javascript functions, not keywords, despite being named similarly. They do not break control flow all by themselves. loop({ name: 'round', do: () =&gt; { if (game.isRoundFinished()) Do.break(); // otherwise do other stuff game.doOtherStuff(); &lt;-- will execute even if Do.break is called } }); Use e.g. return or else to control what executes, e.g.: loop({ name: &quot;round&quot;, do: () =&gt; { if (game.isRoundFinished()) return Do.break(); // otherwise do other stuff game.doOtherStuff(); }, });  ","version":"Next","tagName":"h2"},{"title":"Appearance","type":0,"sectionRef":"#","url":"/ui/appearance","content":"","keywords":"","version":"Next"},{"title":"Aspect ratio​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#aspect-ratio","content":" The first item you might set is the aspect ratio. This works in concert with thelayout to determine how items should fill up their space. E.g. If you give every Card an aspectRatio of 3 / 4, it will appear in the correct proportions as it moves around the board, even though the different layouts that hold Cards might scale them up or down. Typically Piece's have aspect ratios, while Space's do not, since they are simply given a layout.area to fill up.  When you adjust the aspect ratio slider in the layout sandbox, it applies it to the pieces so you can see how layout and appearance work together.  ","version":"Next","tagName":"h2"},{"title":"Render​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#render","content":" To set the actual HTML of a game element, add a render function to theappearance parameters. This is a function that provides an element of the correct type as its argument, and expects to have JSX returned to display that element. Here's a simple example of JSX to show a Card that has name, costand description:   board.all(Card).appearance({ aspectRatio: 3 / 4, render: (card) =&gt; ( &lt;div&gt; &lt;div className=&quot;name&quot;&gt;{card.name}&lt;/div&gt; &lt;div className=&quot;cost&quot;&gt;{card.cost}&lt;/div&gt; &lt;div className=&quot;description&quot;&gt;{card.description}&lt;/div&gt; &lt;/div&gt; ), });   You can put as much logic here as you like to conditionally display elements differently based on the state of the element, or of the game itself.  render false Pass false to the render attribute to tell Boardzilla not to render these elements or their contents at all.  Bear in the mind that the elements in a game might beinvisible to players (e.g. a flipped Card) in which case the properties of the element will be undefined. You can check forundefined properties, or simply callisVisible() to determine if the back of the card should be displayed instead.  ","version":"Next","tagName":"h2"},{"title":"CSS​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#css","content":" You can apply custom CSS to your elements in your game's CSS file. By default the Boardzilla starter kit provides a blank CSS file using a Sass preprocessor. A full list of elements to target is given here. But for the purposes of styling a particular game element, it's important to know that the name of the element Class as defined in your game code is also the name of the HTML class for the HTML Element, in other words a class named Card will appear in the HTML as:   &lt;div class=&quot;Card ... &quot;&gt;   class names Every element has an HTML class name for matching its Javascript class name, as well as the base class Space or Piece. If you want to add more classes for targetting, you can also specify one in appearance.className.  The name of the element will also be represented as the HTML element's id. So if you create a Space called &quot;deck&quot;, you can target it with:   .Space#deck {   In addition the properties you give to your card class, as well as built-in properties like name and player are added to the HTML element as data-attributes, e.g.:   &lt;div class=&quot;Card ... &quot; data-name=&quot;ace-of-hearts&quot; data-suit=&quot;H&quot; data-number=&quot;1&quot; &gt;   player attribute If an element is assigned to a player, this also causes adata-player attribute to be added. The value is the seat position of the player, e.g. &lt;div class=&quot;Hand ... &quot; data-player=&quot;1&quot;&gt;   These are here so you can target elements with different CSS as they change. If you want to target the aces in a standard player deck represented with a Cardclass that has a number property, you can target:   .Card[data-number=&quot;1&quot;] {   The render JSX you supply will be rendered inside the &lt;div&gt;. In this way, you can combine the appearance JSX and the custom CSS to create anything you wish.  HTML attributes are strings Remember that all HTML attributes are strings! Numbers and booleans are converted to strings. If you have e.g. Card.active as a boolean property, it will appear as: &lt;div class=&quot;Card...&quot; data-active=&quot;true&quot;&gt; and can be targetted in CSS as: .Card[data-active=&quot;true&quot;] {   use em or % Since elements in Boardzilla can change size, it's important to never use absolute CSS units like px. Always use em units when you want your CSS to be relative to the element it belongs to. CSS attributes that accept a % relative to parent size are also appropriate. Use rem in rare cases where you want the size to be relative to the entire game board.  ","version":"Next","tagName":"h2"},{"title":"Child elements​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#child-elements","content":" The data tree of the Board is also mapped to the DOM tree in HTML. For example, if you define a Space named &quot;deck&quot;, with Cards in them, then the Cardelements will be HTML DOM children of the &quot;deck&quot; element. If you want to target CSS for specifically the Cards in the &quot;deck&quot; you can simply use:   Space#deck .Card {   ","version":"Next","tagName":"h3"},{"title":"Artwork​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#artwork","content":" When it's time to add artwork to your game, this is as simple as adding the asset into your game directory, importing it, and placing it into the relevant HTML element, e.g.:   import cardArt from './assets/card-art.webp'; ... board.all(Card).appearance({ aspectRatio: 3 / 4, render: card =&gt; ( &lt;div&gt; &lt;img src={cardArt} /&gt; &lt;div className=&quot;name&quot;&gt;{card.name}&lt;/div&gt; &lt;/div&gt; ) });   Of course if you have multiple cards with different art, you may find this easier to do in the CSS. You can use the data- attributes to target specific cards, e.g.:   .Card { &amp;[data-name=&quot;ace-of-hearts&quot;] { background-image: url(../assets/ace-of-hearts.webp); } &amp;[data-name=&quot;ace-of-spades&quot;] { background-image: url(../assets/ace-of-spades.webp); } ... } };   no external assets All assets for your game must be included in your game folder and be included either in the ui/index.ts or the ui/style.scss. You may not load any assets from external URLs in your game as any such requests will fail.  The default build configuration included when you created your game handles files of types .jpg, .png, .svg, .webp and .ttf. More can be added in the esbuild config.  ","version":"Next","tagName":"h2"},{"title":"SVG​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#svg","content":" SVGs can be a good choice for art in Boardzilla since the elements in Boardzilla can scale depending on their location. Boardzilla will happily render SVG as well as HTML, either by importing an SVG asset and placing it into an &lt;img src&gt; or by including &lt;svg&gt; elements inside the JSX within render. In practice, including &lt;svg&gt; can be tricky for a couple of reasons.  SVGs in JSX require editing to make the attribute names JSX-friendly. This tends to affect SVGs more than HTML.Dynamic content can be included in the SVG, e.g. &lt;tspan&gt;{card.cost}&lt;/tspan&gt;as with HTML, however this can make it quite difficult to maintain a workflow from your SVG editor into Boardzilla.  For this reason, it is often easier to place static SVG's into &lt;img&gt; tags and position dynamic content over top of them in HTML. Alternatively for dynamic content, it may be easier to maintain separate source SVG's for every variation.  ","version":"Next","tagName":"h2"},{"title":"Fonts​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#fonts","content":" Fonts can be added like any other asset. Since your game must embed all assets it needs, you may not call an external URL for a font. If you include a 3rd party font, first download this to a file inside your game directory and reference it directly in your CSS, e.g.:   @font-face { font-family: &quot;Font Name&quot;; src: url(./assets/font-file.ttf); } body { font-family: &quot;Font Name&quot;; }   If you apply your font to the body element as above, bear in mind that it will apply not only to everything on the game board, but all game messages, and the setup page. See CSS for more information on the different elements that can be targetted.  ","version":"Next","tagName":"h2"},{"title":"Animations​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#animations","content":" By default Boardzilla will animate game elements as they change their position and size. This is done by applying a CSS transition effect to a wrapper element that controls size and position. You can add transition effects that react to changes in your elements simply by adding style and class info in therender and using CSS transitions to change how they animate as these properties change. E.g. the Boardzilla starter game features Tokens that animate their flip.  You can also provide CSS effects that listen for changes on your elements and only apply when the elements changes into that state. E.g. if you have a Cardclass with an isTrump property, and you want the Card to have a special effect applied to it when isTrump transitions from false to true, you can apply the effect with appearance.effect, e.g.:   board.all(Card).appearance({ effects: [{ attributes: { isTrump: true }, className: &quot;newly-trump&quot;, }], });   The &quot;newly-trump&quot; CSS class will be applied to your Card DOM element only when a game change causes the isTrump property to become true. You can attach a one-time animation in this CSS class to cause the card to flash or highlight in some way only when a card change to become trump.  Disable default When you are writing your custom UI, at some point you will want to get rid of the Boardzilla default styling that appears when you start. As you add renderproperties to each elements appearance you will replace this default UI for those elements. However, you can turn it off entirely for all elements. Any elements that have no custom appearance will then be left unrendered. To turn off default rendering, simply add in the layout block: board.disableDefaultAppearance();   Board size  You may notice that by default the board starts as a perfect square and adjusting the size of the browser window causes the square to change size to be as large as it can be and still fit in the viewport. You can customize the aspect ratio of the board to something other than 1 (a square). This is done by adding a boardSizes function to the main renderfunction, e.g.:   render({ boardSizes: () =&gt; ({ name: &quot;standard&quot;, aspectRatio: 4 / 3 }) ... })   The board size will always fill as much of the viewport on the player's device as it can while maintaining the specified aspect ratio.  ","version":"Next","tagName":"h2"},{"title":"Responsive and mobile​","type":1,"pageTitle":"Appearance","url":"/ui/appearance#responsive-and-mobile","content":" You can provide multiple aspect ratios and layouts for different screen sizes and device types. All of the layout API above can also be targetted to a particular screen size or device type. When you supply the boardSizes function above, you can also accept some parameters to provide different layouts. These parameters are:  screenX (the pixel width of the viewport)screenY (the pixel width of the viewport)mobile (true if using a mobile device)  You can then supply different board sizes depending on these values, for example having a portrait or landscape version, or simply giving a different version for mobile devices, e.g.:   render({ boardSizes: (screenX, screenY, mobile) =&gt; { if (mobile) return { name: &quot;mobile&quot;, aspectRatio: 1 / 2 }); return { name: &quot;standard&quot;, aspectRatio: 5 / 3 }) }) ... });   The name provided is then passed to the main layout function in therender function. You can use this to completely change the layout and appearance of any element in the different layouts you provide, e.g.:   render({ ... layout: (board, player, boardSize) =&gt; { if (boardSize === &quot;mobile&quot;) { // mobile layout here } else { // desktop layout here } } });  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}