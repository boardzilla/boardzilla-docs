"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[9083],{8415:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var t=a(5893),s=a(1151);const o={sidebar_position:1},i="Core concepts",r={id:"game/core-concepts",title:"Core concepts",description:"These are some of the basic core concepts of Boardzilla that will be referred to",source:"@site/docs/game/core-concepts.md",sourceDirName:"game",slug:"/game/core-concepts",permalink:"/game/core-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/game/core-concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Building a game",permalink:"/category/building-a-game"},next:{title:"Creating a game",permalink:"/game/creating-a-game"}},c={},l=[{value:"Game",id:"game",level:2},{value:"Space",id:"space",level:3},{value:"Piece",id:"piece",level:3},{value:"Pile",id:"pile",level:3},{value:"Player",id:"player",level:2},{value:"Action",id:"action",level:2},{value:"Flow",id:"flow",level:2}];function h(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"core-concepts",children:"Core concepts"}),"\n",(0,t.jsx)(n.p,{children:"These are some of the basic core concepts of Boardzilla that will be referred to\nthroughout the documentation."}),"\n",(0,t.jsx)(n.h2,{id:"game",children:"Game"}),"\n",(0,t.jsxs)(n.p,{children:["The Game is the main class that defines the behaviour of the the game and it's\nlayout. The first order of business when creating a game is to subclass Game so\nyou can add your own methods. The Game class includes all the ",(0,t.jsx)(n.strong,{children:"Spaces"})," and\n",(0,t.jsx)(n.strong,{children:"Pieces"})," of the board. Together these are called ",(0,t.jsx)(n.strong,{children:"Elements"}),". The Game is\nitself a Space but with special behaviour."]}),"\n",(0,t.jsx)(n.h3,{id:"space",children:"Space"}),"\n",(0,t.jsxs)(n.p,{children:["Spaces are regions or zones of the Board. They are ",(0,t.jsx)(n.strong,{children:"fixed"})," and never change\nonce the game starts. A Space can also contain other Spaces and Pieces."]}),"\n",(0,t.jsx)(n.h3,{id:"piece",children:"Piece"}),"\n",(0,t.jsxs)(n.p,{children:["Pieces are ",(0,t.jsx)(n.strong,{children:"movable"})," objects in the game. They can move from Space to Space\nand can also be moved inside other Pieces, such as for instance, when tokens are\nplaced onto a card."]}),"\n",(0,t.jsx)(n.h3,{id:"pile",children:"Pile"}),"\n",(0,t.jsx)(n.p,{children:"The Pile is a holding area for pieces that are not in use. Pieces can be moved\ninto and out of the Pile. It is never visible. Think of it as the box sitting\noff to the side of the game."}),"\n",(0,t.jsxs)(n.p,{children:["You can read further about this in ",(0,t.jsx)(n.a,{href:"./board",children:"Board Structure"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"player",children:"Player"}),"\n",(0,t.jsx)(n.p,{children:'The player is a class that represents a user playing the game. Each game will\nhave a player class specific to it. Players can have pieces and spaces assigned\nto them, and any piece that enters these becomes "owned" by the player.'}),"\n",(0,t.jsxs)(n.p,{children:["You can read further about this in ",(0,t.jsx)(n.a,{href:"./players",children:"Players"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"action",children:"Action"}),"\n",(0,t.jsxs)(n.p,{children:["An Action is a discrete unit of choice for a player. An action has a ",(0,t.jsx)(n.strong,{children:"name"}),",\nany possible ",(0,t.jsx)(n.strong,{children:"selections"})," for the action, and ",(0,t.jsx)(n.strong,{children:"behavior"}),'. In Chess, for\nexample, an action might be called "move". It has two selections: the piece\nbeing moved, and space it\'s moved to. Its behavior would be to move the piece\nto its destination and a message to the game log.']}),"\n",(0,t.jsxs)(n.p,{children:["You can read further about this in ",(0,t.jsx)(n.a,{href:"./actions",children:"Actions"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"flow",children:"Flow"}),"\n",(0,t.jsx)(n.p,{children:"The Flow of your game is how the game runs from beginning to end. This describes\nthe phases, rounds and turns of the game, and what actions are available to\nplayers at which point in the Flow."}),"\n",(0,t.jsxs)(n.p,{children:["You can read further about this in ",(0,t.jsx)(n.a,{href:"./flow",children:"Flow"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>i});var t=a(7294);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);