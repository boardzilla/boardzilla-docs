"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[6762],{908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(5893),o=n(1151);const s={sidebar_position:3},l="Layout",i={id:"ui/layout",title:"Layout",description:"Customizing the game UI probably requires declaring several layouts. Each layout",source:"@site/docs/ui/layout.md",sourceDirName:"ui",slug:"/ui/layout",permalink:"/ui/layout",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/ui/layout.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Customizing the UI",permalink:"/ui/customizing-ui"},next:{title:"Layout sandbox",permalink:"/ui/layout-sandbox"}},r={},c=[{value:"Layout parameters",id:"layout-parameters",level:2},{value:"Customize Controls",id:"customize-controls",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",div:"div",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"layout",children:"Layout"}),"\n",(0,a.jsx)(t.p,{children:"Customizing the game UI probably requires declaring several layouts. Each layout\nprovides a strategy how items are visually laid out. Each layout declaration has\n3 parts:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.strong,{children:"container"})," that uses this layout"]}),"\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.strong,{children:"contents"})," that it applies to"]}),"\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.strong,{children:"rules"})," for the layout"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"For example, in the following layout declaration:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"  $.deck.layout(Card, { alignment: 'left' }\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:"container"})," is the deck space ",(0,a.jsx)(t.code,{children:"$.deck"}),", the ",(0,a.jsx)(t.strong,{children:"contents"})," are any ",(0,a.jsx)(t.code,{children:"Card"}),"s\nin the deck, and the ",(0,a.jsx)(t.strong,{children:"rules"})," are that these cards should left align."]}),"\n",(0,a.jsx)(t.p,{children:"Layout declarations might declare that for a given area, items should be laid\nout in a row, or a stack, or a grid. When many items enter the same space, it\nmight declare whether they should scale down to fit, should squish together, or\nwhether only a certain number of them should actually be visible."}),"\n",(0,a.jsxs)(t.p,{children:["All layout declarations go in the ",(0,a.jsx)(t.code,{children:"layout"})," of the main\n",(0,a.jsx)(t.a,{href:"../api/modules#render",children:(0,a.jsx)(t.code,{children:"render"})})," function, e.g.:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"  render(setup, {\n    ...\n    layout: (board) => {\n      // layout declarations go here\n    }\n\n  });\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The Boardzilla layout engine works by applying different layout strategies to\ngame elements on the board. By default, each element has a simple layout that\ndivides up its space equally to hold as many items as it has and fits them\nexactly within the allotted space. This is the layout you see when you start\nbuilding your board. Each layout strategy you apply creates a new invisible grid\nlayer on top in which things can fit. This invisible grid will grow or shrink as\nneeded to fill as much of the area as it can. Layouts are applied by calling\n",(0,a.jsx)(t.a,{href:"../api/classes/GameElement#layout",children:(0,a.jsx)(t.code,{children:"layout"})})," on an element or ",(0,a.jsx)(t.a,{href:"../api/classes/ElementCollection#layout",children:"group of\nelements"}),". When you apply a new layout\nto a space, you declare what element(s), or class of elements, it should apply\nto. Any element that enters this space gets put into one of the layouts\ndepending on whether it applies. If multiple layouts apply, Boardzilla\nprioritizes from more specific to more general (e.g. a specific element\noverrides one that applies to a class of elements). If no layouts apply, the\ndefault layout gets applied at the very bottom."]}),"\n",(0,a.jsx)(t.p,{children:"Each layout in a space operates completely independently of the others in that\nspace. E.g. if you have a space that might have both Cards and Tokens in it and\nyou apply one layout to Cards and another to Tokens, each Card and Token in that\nspace will be laid out in accordance with its respective layout rules, but Cards\nwill not affect how Tokens are laid out, and vice versa. They are therefore\ncompletely free to overlap each other if the layouts use the same area. Later\nlayouts will appear over top of earlier ones in this case."}),"\n",(0,a.jsx)(t.div,{style:{textAlign:"center"},children:(0,a.jsx)(t.img,{src:"/img/layouts.svg"})}),"\n",(0,a.jsx)(t.p,{children:"In the example pictured here, two layouts are declared for a space, one for\nCircle elements and one for Rectangle elements. Each declares a different grid\nfor their respective elements. When Circles and Rectangles are both added to the\nspace, they overlap each other without interfering with each others grid. The\nlast one declared (Rectangles) appears on top."}),"\n",(0,a.jsx)(t.h2,{id:"layout-parameters",children:"Layout parameters"}),"\n",(0,a.jsxs)(t.p,{children:["Creating a layout for an area of the board is a series of questions, with\ndifferent ",(0,a.jsx)(t.a,{href:"../api/modules#layoutattributes",children:"parameters"})," used to answer each one."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["What part of the area should be used to display its contents? (",(0,a.jsx)(t.code,{children:"area"})," or\n",(0,a.jsx)(t.code,{children:"margin"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["How large should the grid be to accommodate its contents? (",(0,a.jsx)(t.code,{children:"rows"})," and\n",(0,a.jsx)(t.code,{children:"columns"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["How tightly should they be packed? (",(0,a.jsx)(t.code,{children:"gap"})," or ",(0,a.jsx)(t.code,{children:"offsetRow"}),"/",(0,a.jsx)(t.code,{children:"offsetColumn"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["Should they be in a square grid, or something non-orthogonal like a hexagon?\n(",(0,a.jsx)(t.code,{children:"gap"})," or ",(0,a.jsx)(t.code,{children:"offsetRow"}),"/",(0,a.jsx)(t.code,{children:"offsetColumn"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["How should they fill up their grid as more are added? (",(0,a.jsx)(t.code,{children:"direction"}),",\n",(0,a.jsx)(t.code,{children:"alignment"})," and ",(0,a.jsx)(t.code,{children:"limit"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["How should they stretch, shrink, or squish together to fit in the area?\n(",(0,a.jsx)(t.code,{children:"scaling"})," and ",(0,a.jsx)(t.code,{children:"maxOverlap"}),")"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["How these parameters interact can become complicated. The best approach is to\nexperiment in order to find what you're looking for. A helpful ",(0,a.jsx)(t.a,{href:"layout-sandbox",children:"layout\nsandbox"})," is provided here to let you try different parameters\nand see the results with different elements. Also browsing the ",(0,a.jsx)(t.a,{href:"/examples/examples",children:"sample\ngames"})," to see how their layouts work is a good resource. Of\ncourse, refer to ",(0,a.jsx)(t.a,{href:"../api/modules#layoutattributes",children:"the API documentation"})," for\nthe complete descriptions."]}),"\n",(0,a.jsxs)(t.admonition,{title:"relative percentages",type:"tip",children:[(0,a.jsxs)(t.p,{children:["Most of the sizing attributes in the ",(0,a.jsx)(t.code,{children:"layout"})," parameters are percentage\nvalues. These are generally percentages of the container element's layout, so\ne.g."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"$.deck.layout(Card, {\n  area: { left: 25, top: 25, width: 50, height: 50 },\n});\n"})}),(0,a.jsxs)(t.p,{children:["Would place the ",(0,a.jsx)(t.code,{children:"Card"}),"s in the ",(0,a.jsx)(t.code,{children:"deck"})," space into an inner region that is 50% of\nthe deck's width and height."]})]}),"\n",(0,a.jsxs)(t.p,{children:["Note that the layout code is evaluated every time the board changes, so if\ne.g. you have a layout on ",(0,a.jsx)(t.code,{children:"$.field"})," for ",(0,a.jsx)(t.em,{children:"only"})," the cards for which ",(0,a.jsx)(t.code,{children:"card.color"}),"\nis ",(0,a.jsx)(t.code,{children:'"red"'}),", then the ",(0,a.jsx)(t.code,{children:"layout"})," declaration might look like:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'$.field.layout(\n  $.field.all(Card, {color: "red"}), {\n    ...\n  }\n);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This will be applied to each ",(0,a.jsx)(t.code,{children:"Card"})," in the ",(0,a.jsx)(t.code,{children:"field"})," Space with ",(0,a.jsx)(t.code,{children:"color"})," equal to\n",(0,a.jsx)(t.code,{children:'"red"'}),", and as cards enter or leave the field or change color, the layout will\nautomatically be re-applied given the new set of red cards in the field."]}),"\n",(0,a.jsx)(t.admonition,{title:"layout bounding box",type:"tip",children:(0,a.jsxs)(t.p,{children:["While working on a particular layout declaration, adding a ",(0,a.jsx)(t.code,{children:"showBoundingBox"}),"\nattribute causes the layout's area to visibly appear on screen as a dotted\nbounding box. This is an easy way to visually see if your layout is correct."]})}),"\n",(0,a.jsx)(t.h2,{id:"customize-controls",children:"Customize Controls"}),"\n",(0,a.jsx)(t.p,{children:"The controls (floating boxes with player prompts and inputs) can have their\nlocation customized to be contextual with the action taken. There are three\nmethods for controlling placement of these, depending on whether you want the\nplacement to be specific to an Action or specific to a step in the Flow, or\ngeneral to all:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutaction",children:(0,a.jsx)(t.code,{children:"board.layoutAction"})})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutstep",children:(0,a.jsx)(t.code,{children:"board.layoutStep"})})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutcontrols",children:(0,a.jsx)(t.code,{children:"board.layoutControls"})})}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["These all apply layout rules to a control by specifying the\n",(0,a.jsx)(t.a,{href:"../game/actions",children:(0,a.jsx)(t.code,{children:"Action"})})," in the case of\n",(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutaction",children:(0,a.jsx)(t.code,{children:"board.layoutAction"})}),", or the\n",(0,a.jsx)(t.a,{href:"../game/flow#player-actions",children:(0,a.jsx)(t.code,{children:"playerActions.name"})})," in the case of\n",(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutstep",children:(0,a.jsx)(t.code,{children:"board.layoutStep"})}),". Finally,\n",(0,a.jsx)(t.a,{href:"../api/classes/Board#layoutcontrols",children:(0,a.jsx)(t.code,{children:"board.layoutControls"})})," applies to all\nsteps and actions unless a more specific one applies. Whichever function you use,\nyou then provide parameters to anchor it to the board in a particular\nlocation. This is to allow your game to place these in a suitable location of\nthe board that corresponds to the action needed, and does not obscure game\nelements. See ",(0,a.jsx)(t.a,{href:"../api/modules#actionlayout",children:(0,a.jsx)(t.code,{children:"ActionLayout"})})," for details."]}),"\n",(0,a.jsx)(t.p,{children:"Example to place all prompts in the top center of the board:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"  board.layoutControls({\n    element: board,\n    top: 0,\n    center: 50,\n    width: 20\n  });\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The controls can also be targetted with CSS like all Boardzilla elements. The\ncontrols box always have the HTML class ",(0,a.jsx)(t.code,{children:"player-controls"})," applied, and other\nclasses are used for specific elements and actions. See ",(0,a.jsx)(t.a,{href:"css",children:"CSS"})," for details."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>l});var a=n(7294);const o={},s=a.createContext(o);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);